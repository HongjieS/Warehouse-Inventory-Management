{"ast":null,"code":"// src/parsers/worldFamousParser.js\nimport * as pdfjsLib from \"pdfjs-dist/build/pdf\";\nimport pdfWorker from \"pdfjs-dist/build/pdf.worker.entry\";\n\n// Ensure worker is properly configured\npdfjsLib.GlobalWorkerOptions.workerSrc = pdfWorker;\n\n/**\n * parsePDFWorldFamous(arrayBuffer)\n *  For World Famous / Ink Projects invoices\n */\nexport async function parsePDFWorldFamous(arrayBuffer) {\n  try {\n    const pdf = await pdfjsLib.getDocument({\n      data: arrayBuffer\n    }).promise;\n    let allText = \"\";\n    for (let i = 1; i <= pdf.numPages; i++) {\n      const page = await pdf.getPage(i);\n      const content = await page.getTextContent();\n\n      // Sort items by their vertical position (y) and then horizontal position (x)\n      const items = content.items.sort((a, b) => {\n        const yDiff = b.transform[5] - a.transform[5];\n        if (Math.abs(yDiff) < 2) {\n          // If y positions are close, sort by x\n          return a.transform[4] - b.transform[4];\n        }\n        return yDiff;\n      });\n\n      // Group items by their vertical position to form lines\n      let currentY = null;\n      let currentLine = [];\n      const lines = [];\n      for (const item of items) {\n        if (currentY === null || Math.abs(item.transform[5] - currentY) > 2) {\n          if (currentLine.length > 0) {\n            lines.push(currentLine.join(' '));\n          }\n          currentLine = [item.str];\n          currentY = item.transform[5];\n        } else {\n          currentLine.push(item.str);\n        }\n      }\n      if (currentLine.length > 0) {\n        lines.push(currentLine.join(' '));\n      }\n      allText += lines.join('\\n') + '\\n';\n    }\n\n    // Split into lines and filter out empty lines and headers\n    const lines = allText.split('\\n').filter(line => line.trim()).filter(line => !line.match(/^Page \\d+$/)).filter(line => !line.match(/^Sales Order/)).filter(line => !line.match(/^Date/)).filter(line => !line.match(/^Ship To/)).filter(line => !line.match(/^Total/)).filter(line => !line.match(/^Bill To/)).filter(line => !line.match(/^Order Information/)).filter(line => !line.match(/^Qty/)).filter(line => !line.match(/^\\d+ of \\d+$/)).filter(line => !line.match(/^Ink Projects/)).filter(line => !line.match(/^[0-9]{8,}$/)).filter(line => !line.match(/^Fort Mill/)).filter(line => !line.match(/^United States/)).filter(line => !line.match(/^Customer/)).filter(line => !line.match(/^Order Notes/)).filter(line => !line.match(/^Shipping/)).filter(line => !line.match(/^VAT/)).filter(line => !line.match(/^Payment/)).filter(line => !line.match(/^Discount/)).filter(line => !line.match(/^Subtotal/)).filter(line => !line.match(/^460A/));\n    console.log('Filtered lines:', lines);\n    const results = [];\n    let currentItem = null;\n    for (const line of lines) {\n      console.log('Processing line:', line.replace(/ /g, '·'));\n\n      // Try to match the start of an item\n      const itemMatch = line.match(/^\\s*(\\d+)\\s+(\\d+)\\s+(\\d+)\\s+(\\S+)\\s+\\$[\\d.,]+\\s+\\$[\\d.,]+\\s*$/);\n      if (itemMatch) {\n        // If we have a previous item pending, save it\n        if (currentItem) {\n          results.push(currentItem);\n        }\n        const [, qtyFulfilled, qtyInvoiced, qtyOrdered, itemCode] = itemMatch;\n        currentItem = {\n          itemCode: itemCode.trim(),\n          color: '',\n          quantity: parseInt(qtyOrdered, 10),\n          size: '1oz' // default size\n        };\n      } else if (currentItem) {\n        // This might be a continuation line with color and size information\n        if (line.includes('World Famous')) {\n          // Extract size if present\n          if (line.includes('— 1oz')) {\n            currentItem.size = '1oz';\n          } else if (line.includes('— 2oz')) {\n            currentItem.size = '2oz';\n          } else if (line.includes('— 4oz')) {\n            currentItem.size = '4oz';\n          } else if (line.includes('— 1/2oz')) {\n            currentItem.size = '1/2oz';\n          }\n\n          // Clean up and extract color name\n          const colorPart = line.replace(/— World Famous Tattoo Ink/gi, '').replace(/— 1oz$/gi, '').replace(/— 2oz$/gi, '').replace(/— 4oz$/gi, '').replace(/— 1\\/2oz$/gi, '').replace(/\\s*\\([^)]*\\)/g, '').replace(/\\s*\\[[^\\]]*\\]/g, '').replace(/\\s*\\{[^}]*\\}/g, '').replace(/\\s*\\$[\\d.,]+/g, '').trim();\n          if (currentItem.color) {\n            currentItem.color += ' ' + colorPart;\n          } else {\n            currentItem.color = colorPart;\n          }\n        }\n      }\n    }\n\n    // Don't forget to add the last item if there is one\n    if (currentItem) {\n      results.push(currentItem);\n    }\n    if (results.length === 0) {\n      console.error('No items could be parsed from the PDF');\n      throw new Error('No items could be parsed from the PDF');\n    }\n\n    // Clean up any multi-line color names\n    results.forEach(item => {\n      item.color = item.color.replace(/\\s+/g, ' ').replace(/— /g, '').trim();\n    });\n    console.log('Parsed results:', results);\n    return results;\n  } catch (error) {\n    console.error('Error parsing PDF:', error);\n    throw error;\n  }\n}","map":{"version":3,"names":["pdfjsLib","pdfWorker","GlobalWorkerOptions","workerSrc","parsePDFWorldFamous","arrayBuffer","pdf","getDocument","data","promise","allText","i","numPages","page","getPage","content","getTextContent","items","sort","a","b","yDiff","transform","Math","abs","currentY","currentLine","lines","item","length","push","join","str","split","filter","line","trim","match","console","log","results","currentItem","replace","itemMatch","qtyFulfilled","qtyInvoiced","qtyOrdered","itemCode","color","quantity","parseInt","size","includes","colorPart","error","Error","forEach"],"sources":["C:/Users/hongjie/Desktop/Warehouse Test/src/parsers/worldFamousParser.js"],"sourcesContent":["// src/parsers/worldFamousParser.js\nimport * as pdfjsLib from \"pdfjs-dist/build/pdf\";\nimport pdfWorker from \"pdfjs-dist/build/pdf.worker.entry\";\n\n// Ensure worker is properly configured\npdfjsLib.GlobalWorkerOptions.workerSrc = pdfWorker;\n\n/**\n * parsePDFWorldFamous(arrayBuffer)\n *  For World Famous / Ink Projects invoices\n */\nexport async function parsePDFWorldFamous(arrayBuffer) {\n  try {\n    const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;\n    let allText = \"\";\n\n    for (let i = 1; i <= pdf.numPages; i++) {\n      const page = await pdf.getPage(i);\n      const content = await page.getTextContent();\n      \n      // Sort items by their vertical position (y) and then horizontal position (x)\n      const items = content.items.sort((a, b) => {\n        const yDiff = b.transform[5] - a.transform[5];\n        if (Math.abs(yDiff) < 2) { // If y positions are close, sort by x\n          return a.transform[4] - b.transform[4];\n        }\n        return yDiff;\n      });\n\n      // Group items by their vertical position to form lines\n      let currentY = null;\n      let currentLine = [];\n      const lines = [];\n\n      for (const item of items) {\n        if (currentY === null || Math.abs(item.transform[5] - currentY) > 2) {\n          if (currentLine.length > 0) {\n            lines.push(currentLine.join(' '));\n          }\n          currentLine = [item.str];\n          currentY = item.transform[5];\n        } else {\n          currentLine.push(item.str);\n        }\n      }\n      if (currentLine.length > 0) {\n        lines.push(currentLine.join(' '));\n      }\n\n      allText += lines.join('\\n') + '\\n';\n    }\n\n    // Split into lines and filter out empty lines and headers\n    const lines = allText.split('\\n')\n      .filter(line => line.trim())\n      .filter(line => !line.match(/^Page \\d+$/))\n      .filter(line => !line.match(/^Sales Order/))\n      .filter(line => !line.match(/^Date/))\n      .filter(line => !line.match(/^Ship To/))\n      .filter(line => !line.match(/^Total/))\n      .filter(line => !line.match(/^Bill To/))\n      .filter(line => !line.match(/^Order Information/))\n      .filter(line => !line.match(/^Qty/))\n      .filter(line => !line.match(/^\\d+ of \\d+$/))\n      .filter(line => !line.match(/^Ink Projects/))\n      .filter(line => !line.match(/^[0-9]{8,}$/))\n      .filter(line => !line.match(/^Fort Mill/))\n      .filter(line => !line.match(/^United States/))\n      .filter(line => !line.match(/^Customer/))\n      .filter(line => !line.match(/^Order Notes/))\n      .filter(line => !line.match(/^Shipping/))\n      .filter(line => !line.match(/^VAT/))\n      .filter(line => !line.match(/^Payment/))\n      .filter(line => !line.match(/^Discount/))\n      .filter(line => !line.match(/^Subtotal/))\n      .filter(line => !line.match(/^460A/));\n\n    console.log('Filtered lines:', lines);\n    \n    const results = [];\n    let currentItem = null;\n    \n    for (const line of lines) {\n      console.log('Processing line:', line.replace(/ /g, '·'));\n      \n      // Try to match the start of an item\n      const itemMatch = line.match(/^\\s*(\\d+)\\s+(\\d+)\\s+(\\d+)\\s+(\\S+)\\s+\\$[\\d.,]+\\s+\\$[\\d.,]+\\s*$/);\n      \n      if (itemMatch) {\n        // If we have a previous item pending, save it\n        if (currentItem) {\n          results.push(currentItem);\n        }\n        \n        const [, qtyFulfilled, qtyInvoiced, qtyOrdered, itemCode] = itemMatch;\n        currentItem = {\n          itemCode: itemCode.trim(),\n          color: '',\n          quantity: parseInt(qtyOrdered, 10),\n          size: '1oz' // default size\n        };\n      } else if (currentItem) {\n        // This might be a continuation line with color and size information\n        if (line.includes('World Famous')) {\n          // Extract size if present\n          if (line.includes('— 1oz')) {\n            currentItem.size = '1oz';\n          } else if (line.includes('— 2oz')) {\n            currentItem.size = '2oz';\n          } else if (line.includes('— 4oz')) {\n            currentItem.size = '4oz';\n          } else if (line.includes('— 1/2oz')) {\n            currentItem.size = '1/2oz';\n          }\n\n          // Clean up and extract color name\n          const colorPart = line\n            .replace(/— World Famous Tattoo Ink/gi, '')\n            .replace(/— 1oz$/gi, '')\n            .replace(/— 2oz$/gi, '')\n            .replace(/— 4oz$/gi, '')\n            .replace(/— 1\\/2oz$/gi, '')\n            .replace(/\\s*\\([^)]*\\)/g, '')\n            .replace(/\\s*\\[[^\\]]*\\]/g, '')\n            .replace(/\\s*\\{[^}]*\\}/g, '')\n            .replace(/\\s*\\$[\\d.,]+/g, '')\n            .trim();\n\n          if (currentItem.color) {\n            currentItem.color += ' ' + colorPart;\n          } else {\n            currentItem.color = colorPart;\n          }\n        }\n      }\n    }\n\n    // Don't forget to add the last item if there is one\n    if (currentItem) {\n      results.push(currentItem);\n    }\n\n    if (results.length === 0) {\n      console.error('No items could be parsed from the PDF');\n      throw new Error('No items could be parsed from the PDF');\n    }\n\n    // Clean up any multi-line color names\n    results.forEach(item => {\n      item.color = item.color\n        .replace(/\\s+/g, ' ')\n        .replace(/— /g, '')\n        .trim();\n    });\n\n    console.log('Parsed results:', results);\n    return results;\n  } catch (error) {\n    console.error('Error parsing PDF:', error);\n    throw error;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}