{"ast":null,"code":"// src/parsers/worldFamousParser.js\nimport * as pdfjsLib from \"pdfjs-dist/build/pdf\";\nimport pdfWorker from \"pdfjs-dist/build/pdf.worker.entry\";\n\n// Ensure worker is properly configured\npdfjsLib.GlobalWorkerOptions.workerSrc = pdfWorker;\n\n/**\n * parsePDFWorldFamous(arrayBuffer)\n *  For World Famous / Ink Projects invoices\n */\nexport const parsePDFWorldFamous = async buffer => {\n  try {\n    const pdf = await pdfjsLib.getDocument({\n      data: buffer\n    }).promise;\n    const items = [];\n\n    // Process all pages\n    for (let pageNum = 1; pageNum <= pdf.numPages; pageNum++) {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n\n      // Group text items by their vertical position (y coordinate)\n      const lineMap = new Map();\n      textContent.items.forEach(item => {\n        const y = Math.round(item.transform[5]); // Get y coordinate\n        if (!lineMap.has(y)) {\n          lineMap.set(y, []);\n        }\n        lineMap.get(y).push({\n          text: item.str,\n          x: item.transform[4] // Store x coordinate\n        });\n      });\n\n      // Sort lines by y coordinate (top to bottom) and combine items in each line\n      const lines = Array.from(lineMap.entries()).sort((a, b) => b[0] - a[0]) // Sort by y coordinate\n      .map(([_, items]) => {\n        // Sort items by x coordinate and join\n        return items.sort((a, b) => a.x - b.x).map(item => item.text).join(' ').trim();\n      }).filter(line => line.length > 0);\n      console.log(`Extracted lines from page ${pageNum}:`, lines); // Debug log\n\n      // Process each line looking for World Famous items\n      for (let i = 0; i < lines.length; i++) {\n        const line = lines[i].trim();\n        console.log(`Processing line ${i}:`, JSON.stringify(line)); // Debug log\n\n        // Skip header lines or lines that don't contain item information\n        if (!line || line.includes('Qty Fulfilled') || line.includes('Page') || line.includes('Total') || line.includes('Subtotal') || line.includes('Order Information') || line.includes('Sales Order')) {\n          continue;\n        }\n\n        // Look for quantity line pattern (e.g., \"0 0 10 $9.25 $92.50\")\n        const quantityMatch = line.match(/(\\d+)\\s+\\d+\\s+(\\d+)\\s+\\$[\\d,.]+\\s+\\$[\\d,.]+/);\n        if (quantityMatch) {\n          const [_, fulfilled, quantity] = quantityMatch;\n          console.log(`Found quantity line - Fulfilled: ${fulfilled}, Quantity: ${quantity}`); // Debug log\n\n          // Look ahead for the item code in the next few lines\n          for (let j = 1; j <= 3; j++) {\n            if (i + j >= lines.length) break;\n            const nextLine = lines[i + j].trim();\n            // Match both World Famous (WF) and Kuro Sumi (KS) items\n            const itemCodeMatch = nextLine.match(/(WF|KS)[A-Z0-9]+/);\n            if (itemCodeMatch) {\n              const itemCode = itemCodeMatch[0];\n              console.log(`Found item code: ${itemCode}`); // Debug log\n\n              // Combine the next few lines to get the full color description first\n              let color = '';\n              let descriptionLines = [];\n              for (let k = 0; k < 3; k++) {\n                if (i + j + k >= lines.length) break;\n                const colorLine = lines[i + j + k].trim();\n                if (colorLine && !colorLine.match(/(WF|KS)[A-Z0-9]+/) && !colorLine.match(/\\d+\\s+\\d+\\s+\\d+\\s+\\$[\\d,.]+\\s+\\$[\\d,.]+/)) {\n                  descriptionLines.push(colorLine);\n                }\n              }\n              color = descriptionLines.join(' ');\n              console.log(`Raw color description: ${color}`); // Debug log\n\n              // Extract size from the description or item code\n              let size = '1oz';\n              const sizeMatch = color.match(/(\\d+(?:\\.\\d+)?)\\s*(?:\\/\\s*\\d+)?\\s*oz/);\n              if (sizeMatch) {\n                size = `${sizeMatch[1]}oz`;\n              } else if (itemCode.match(/[24]$/)) {\n                // Fallback to item code size if no size in description\n                size = `${itemCode.slice(-1)}oz`;\n              }\n\n              // Special case for half ounce\n              if (itemCode.includes('1/2') || color.toLowerCase().includes('1/2 oz')) {\n                size = '1/2oz';\n              }\n\n              // Special case for Kuro Sumi sizes\n              if (itemCode.startsWith('KS')) {\n                if (itemCode.includes('OL6') || itemCode.includes('G6')) {\n                  size = '6oz';\n                } else if (itemCode.includes('OI12')) {\n                  size = '12oz';\n                } else if (itemCode.includes('SW3')) {\n                  size = '3oz';\n                } else if (itemCode.includes('SW1.5')) {\n                  size = '1.5oz';\n                }\n              }\n\n              // Clean up the color name\n              color = color.replace(itemCode, '').replace(/\\$[\\d,.]+/g, '') // Remove price information\n              .replace(/\\d+\\s*oz/g, '') // Remove size information first\n              .replace(/\\d+\\s*\\/\\s*\\d+\\s*oz/g, '') // Remove fractional sizes\n              .replace(/[-â€”]/g, ' ').replace(/World Famous/g, '').replace(/Tattoo Ink/g, '').replace(/Ink/g, '').replace(/Bottle/g, '').replace(/Set/g, '').replace(/\\s+/g, ' ') // Replace multiple spaces with single space\n              .trim();\n\n              // For Kuro Sumi items, keep the \"Kuro Sumi\" prefix\n              if (itemCode.startsWith('KS')) {\n                color = color.replace(/Kuro Sumi/g, '').trim();\n                color = `Kuro Sumi ${color}`;\n              }\n              if (!color) {\n                color = getColorFromItemCode(itemCode);\n              }\n\n              // Special case for Mid-tone Greywash to ensure consistent naming\n              if (color.includes('Mid-tone') || color.includes('Mid tone')) {\n                color = 'Mid-tone Greywash';\n              }\n\n              // Special case for Pancho Pastel to ensure consistent naming\n              if (itemCode.startsWith('WFADPP')) {\n                var _itemCode$match;\n                const num = ((_itemCode$match = itemCode.match(/(\\d+)/)) === null || _itemCode$match === void 0 ? void 0 : _itemCode$match[1]) || '';\n                color = `Pancho Pastel #${num}`;\n              }\n\n              // Special case for Must-Haves set\n              if (itemCode.startsWith('WFMHS')) {\n                color = 'Must-Haves Set';\n              }\n\n              // Special case for Santucci Skintone Set\n              if (itemCode.startsWith('WFSTSS')) {\n                color = 'Santucci Skintone Set';\n              }\n              const parsedItem = {\n                itemCode,\n                color,\n                size,\n                quantity: parseInt(quantity)\n              };\n              console.log(\"Parsed item:\", JSON.stringify(parsedItem)); // Debug log\n\n              if (itemCode && parseInt(quantity) > 0) {\n                items.push(parsedItem);\n              }\n              break;\n            }\n          }\n        }\n      }\n    }\n    if (items.length === 0) {\n      console.log(\"No items found in any page\"); // Debug log\n      throw new Error('No valid items found in the invoice');\n    }\n\n    // Sort items by item code for consistent ordering\n    items.sort((a, b) => a.itemCode.localeCompare(b.itemCode));\n    return items;\n  } catch (error) {\n    console.error('Error parsing World Famous PDF:', error);\n    throw new Error('Failed to parse World Famous invoice: ' + error.message);\n  }\n};\nfunction getColorFromItemCode(itemCode) {\n  // Special cases for specific product lines\n  if (itemCode.startsWith('WFFMW')) {\n    return 'Mt. Fuji Mixing White';\n  }\n  if (itemCode.startsWith('WFPW')) {\n    return 'Portrait White';\n  }\n  if (itemCode.startsWith('WFMDGW')) {\n    return 'Mid-tone Greywash';\n  }\n  if (itemCode.startsWith('WFMTGW')) {\n    return 'Mid-tone Greywash';\n  }\n  if (itemCode.startsWith('WFADPP')) {\n    var _itemCode$match2;\n    const num = ((_itemCode$match2 = itemCode.match(/\\d+/)) === null || _itemCode$match2 === void 0 ? void 0 : _itemCode$match2[0]) || '';\n    return `Pancho Pastel #${num}`;\n  }\n  if (itemCode.startsWith('WFP2H')) {\n    return 'Poch 2H';\n  }\n  if (itemCode.startsWith('WFMHS')) {\n    return 'Must-Haves';\n  }\n  if (itemCode.startsWith('WFILL')) {\n    return 'Illuminati Yellow';\n  }\n  if (itemCode.startsWith('WFLGW')) {\n    return 'Light Greywash';\n  }\n  if (itemCode.startsWith('WFDGW')) {\n    return 'Dark Greywash';\n  }\n  if (itemCode.startsWith('WFBW')) {\n    return 'Blackwash';\n  }\n  if (itemCode.startsWith('WFMW')) {\n    return 'Mixing White';\n  }\n  if (itemCode.startsWith('WFLW')) {\n    return 'Lining White';\n  }\n  if (itemCode.startsWith('WFHW')) {\n    return 'High White';\n  }\n  if (itemCode.startsWith('WFBB')) {\n    return 'Blue Black';\n  }\n  if (itemCode.startsWith('WFPB')) {\n    return 'Pure Black';\n  }\n  if (itemCode.startsWith('WFGB')) {\n    return 'Golden Black';\n  }\n  if (itemCode.startsWith('WFDB')) {\n    return 'Dark Black';\n  }\n  if (itemCode.startsWith('WFXB')) {\n    return 'Extreme Black';\n  }\n  if (itemCode.startsWith('WFUB')) {\n    return 'Ultimate Black';\n  }\n  if (itemCode.startsWith('WFMKSK')) {\n    return 'Maks Skintone';\n  }\n  if (itemCode.startsWith('WFSTSS')) {\n    return 'Saniderm Skintone Set';\n  }\n  if (itemCode.startsWith('KS')) {\n    // Handle Kuro Sumi items\n    const code = itemCode.replace('KS', '');\n    if (code === 'ZP') return 'Zhang Po Shading Set';\n    if (code === 'OL6') return 'Outlining';\n    if (code === 'OI12') return 'Outlining';\n    if (code === 'G6') return 'Greywash';\n    if (code === 'SW3') return 'Samurai White';\n    if (code === 'SW1.5') return 'Samurai White';\n  }\n\n  // If no specific match, try to extract a meaningful name from the code\n  const code = itemCode.replace(/^(WF|KS)/, '').split(/\\d+/)[0];\n  const words = code.split(/(?=[A-Z])/).filter(word => word.length > 0);\n  return words.join(' ');\n}\nconst parseItem = itemText => {\n  const lines = itemText.split('\\n');\n  const itemCodeMatch = lines[0].match(/Item Code:\\s*([^\\s]+)/);\n  const colorMatch = lines[0].match(/Color:\\s*([^\\n]+)/);\n  const sizeMatch = lines[0].match(/Size:\\s*([^\\n]+)/);\n  const quantityMatch = lines[0].match(/Quantity:\\s*(\\d+)/);\n  if (!itemCodeMatch || !colorMatch || !sizeMatch || !quantityMatch) {\n    return null;\n  }\n  return {\n    itemCode: itemCodeMatch[1].trim(),\n    color: colorMatch[1].trim(),\n    size: sizeMatch[1].trim(),\n    quantity: parseInt(quantityMatch[1])\n  };\n};","map":{"version":3,"names":["pdfjsLib","pdfWorker","GlobalWorkerOptions","workerSrc","parsePDFWorldFamous","buffer","pdf","getDocument","data","promise","items","pageNum","numPages","page","getPage","textContent","getTextContent","lineMap","Map","forEach","item","y","Math","round","transform","has","set","get","push","text","str","x","lines","Array","from","entries","sort","a","b","map","_","join","trim","filter","line","length","console","log","i","JSON","stringify","includes","quantityMatch","match","fulfilled","quantity","j","nextLine","itemCodeMatch","itemCode","color","descriptionLines","k","colorLine","size","sizeMatch","slice","toLowerCase","startsWith","replace","getColorFromItemCode","_itemCode$match","num","parsedItem","parseInt","Error","localeCompare","error","message","_itemCode$match2","code","split","words","word","parseItem","itemText","colorMatch"],"sources":["C:/Users/hongjie/Desktop/Warehouse Test/src/parsers/worldFamousParser.js"],"sourcesContent":["// src/parsers/worldFamousParser.js\nimport * as pdfjsLib from \"pdfjs-dist/build/pdf\";\nimport pdfWorker from \"pdfjs-dist/build/pdf.worker.entry\";\n\n// Ensure worker is properly configured\npdfjsLib.GlobalWorkerOptions.workerSrc = pdfWorker;\n\n/**\n * parsePDFWorldFamous(arrayBuffer)\n *  For World Famous / Ink Projects invoices\n */\nexport const parsePDFWorldFamous = async (buffer) => {\n  try {\n    const pdf = await pdfjsLib.getDocument({ data: buffer }).promise;\n    const items = [];\n\n    // Process all pages\n    for (let pageNum = 1; pageNum <= pdf.numPages; pageNum++) {\n      const page = await pdf.getPage(pageNum);\n      const textContent = await page.getTextContent();\n\n      // Group text items by their vertical position (y coordinate)\n      const lineMap = new Map();\n      textContent.items.forEach(item => {\n        const y = Math.round(item.transform[5]); // Get y coordinate\n        if (!lineMap.has(y)) {\n          lineMap.set(y, []);\n        }\n        lineMap.get(y).push({\n          text: item.str,\n          x: item.transform[4] // Store x coordinate\n        });\n      });\n\n      // Sort lines by y coordinate (top to bottom) and combine items in each line\n      const lines = Array.from(lineMap.entries())\n        .sort((a, b) => b[0] - a[0]) // Sort by y coordinate\n        .map(([_, items]) => {\n          // Sort items by x coordinate and join\n          return items\n            .sort((a, b) => a.x - b.x)\n            .map(item => item.text)\n            .join(' ')\n            .trim();\n        })\n        .filter(line => line.length > 0);\n\n      console.log(`Extracted lines from page ${pageNum}:`, lines); // Debug log\n\n      // Process each line looking for World Famous items\n      for (let i = 0; i < lines.length; i++) {\n        const line = lines[i].trim();\n        console.log(`Processing line ${i}:`, JSON.stringify(line)); // Debug log\n        \n        // Skip header lines or lines that don't contain item information\n        if (!line || \n            line.includes('Qty Fulfilled') || \n            line.includes('Page') || \n            line.includes('Total') || \n            line.includes('Subtotal') ||\n            line.includes('Order Information') ||\n            line.includes('Sales Order')) {\n          continue;\n        }\n\n        // Look for quantity line pattern (e.g., \"0 0 10 $9.25 $92.50\")\n        const quantityMatch = line.match(/(\\d+)\\s+\\d+\\s+(\\d+)\\s+\\$[\\d,.]+\\s+\\$[\\d,.]+/);\n        if (quantityMatch) {\n          const [_, fulfilled, quantity] = quantityMatch;\n          console.log(`Found quantity line - Fulfilled: ${fulfilled}, Quantity: ${quantity}`); // Debug log\n          \n          // Look ahead for the item code in the next few lines\n          for (let j = 1; j <= 3; j++) {\n            if (i + j >= lines.length) break;\n            \n            const nextLine = lines[i + j].trim();\n            // Match both World Famous (WF) and Kuro Sumi (KS) items\n            const itemCodeMatch = nextLine.match(/(WF|KS)[A-Z0-9]+/);\n            \n            if (itemCodeMatch) {\n              const itemCode = itemCodeMatch[0];\n              console.log(`Found item code: ${itemCode}`); // Debug log\n\n              // Combine the next few lines to get the full color description first\n              let color = '';\n              let descriptionLines = [];\n              for (let k = 0; k < 3; k++) {\n                if (i + j + k >= lines.length) break;\n                const colorLine = lines[i + j + k].trim();\n                if (colorLine && !colorLine.match(/(WF|KS)[A-Z0-9]+/) && !colorLine.match(/\\d+\\s+\\d+\\s+\\d+\\s+\\$[\\d,.]+\\s+\\$[\\d,.]+/)) {\n                  descriptionLines.push(colorLine);\n                }\n              }\n              color = descriptionLines.join(' ');\n              console.log(`Raw color description: ${color}`); // Debug log\n\n              // Extract size from the description or item code\n              let size = '1oz';\n              const sizeMatch = color.match(/(\\d+(?:\\.\\d+)?)\\s*(?:\\/\\s*\\d+)?\\s*oz/);\n              if (sizeMatch) {\n                size = `${sizeMatch[1]}oz`;\n              } else if (itemCode.match(/[24]$/)) {\n                // Fallback to item code size if no size in description\n                size = `${itemCode.slice(-1)}oz`;\n              }\n\n              // Special case for half ounce\n              if (itemCode.includes('1/2') || color.toLowerCase().includes('1/2 oz')) {\n                size = '1/2oz';\n              }\n\n              // Special case for Kuro Sumi sizes\n              if (itemCode.startsWith('KS')) {\n                if (itemCode.includes('OL6') || itemCode.includes('G6')) {\n                  size = '6oz';\n                } else if (itemCode.includes('OI12')) {\n                  size = '12oz';\n                } else if (itemCode.includes('SW3')) {\n                  size = '3oz';\n                } else if (itemCode.includes('SW1.5')) {\n                  size = '1.5oz';\n                }\n              }\n\n              // Clean up the color name\n              color = color\n                .replace(itemCode, '')\n                .replace(/\\$[\\d,.]+/g, '') // Remove price information\n                .replace(/\\d+\\s*oz/g, '') // Remove size information first\n                .replace(/\\d+\\s*\\/\\s*\\d+\\s*oz/g, '') // Remove fractional sizes\n                .replace(/[-â€”]/g, ' ')\n                .replace(/World Famous/g, '')\n                .replace(/Tattoo Ink/g, '')\n                .replace(/Ink/g, '')\n                .replace(/Bottle/g, '')\n                .replace(/Set/g, '')\n                .replace(/\\s+/g, ' ') // Replace multiple spaces with single space\n                .trim();\n\n              // For Kuro Sumi items, keep the \"Kuro Sumi\" prefix\n              if (itemCode.startsWith('KS')) {\n                color = color.replace(/Kuro Sumi/g, '').trim();\n                color = `Kuro Sumi ${color}`;\n              }\n\n              if (!color) {\n                color = getColorFromItemCode(itemCode);\n              }\n\n              // Special case for Mid-tone Greywash to ensure consistent naming\n              if (color.includes('Mid-tone') || color.includes('Mid tone')) {\n                color = 'Mid-tone Greywash';\n              }\n\n              // Special case for Pancho Pastel to ensure consistent naming\n              if (itemCode.startsWith('WFADPP')) {\n                const num = itemCode.match(/(\\d+)/)?.[1] || '';\n                color = `Pancho Pastel #${num}`;\n              }\n\n              // Special case for Must-Haves set\n              if (itemCode.startsWith('WFMHS')) {\n                color = 'Must-Haves Set';\n              }\n\n              // Special case for Santucci Skintone Set\n              if (itemCode.startsWith('WFSTSS')) {\n                color = 'Santucci Skintone Set';\n              }\n\n              const parsedItem = {\n                itemCode,\n                color,\n                size,\n                quantity: parseInt(quantity)\n              };\n              console.log(\"Parsed item:\", JSON.stringify(parsedItem)); // Debug log\n\n              if (itemCode && parseInt(quantity) > 0) {\n                items.push(parsedItem);\n              }\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    if (items.length === 0) {\n      console.log(\"No items found in any page\"); // Debug log\n      throw new Error('No valid items found in the invoice');\n    }\n\n    // Sort items by item code for consistent ordering\n    items.sort((a, b) => a.itemCode.localeCompare(b.itemCode));\n\n    return items;\n  } catch (error) {\n    console.error('Error parsing World Famous PDF:', error);\n    throw new Error('Failed to parse World Famous invoice: ' + error.message);\n  }\n};\n\nfunction getColorFromItemCode(itemCode) {\n  // Special cases for specific product lines\n  if (itemCode.startsWith('WFFMW')) {\n    return 'Mt. Fuji Mixing White';\n  }\n  if (itemCode.startsWith('WFPW')) {\n    return 'Portrait White';\n  }\n  if (itemCode.startsWith('WFMDGW')) {\n    return 'Mid-tone Greywash';\n  }\n  if (itemCode.startsWith('WFMTGW')) {\n    return 'Mid-tone Greywash';\n  }\n  if (itemCode.startsWith('WFADPP')) {\n    const num = itemCode.match(/\\d+/)?.[0] || '';\n    return `Pancho Pastel #${num}`;\n  }\n  if (itemCode.startsWith('WFP2H')) {\n    return 'Poch 2H';\n  }\n  if (itemCode.startsWith('WFMHS')) {\n    return 'Must-Haves';\n  }\n  if (itemCode.startsWith('WFILL')) {\n    return 'Illuminati Yellow';\n  }\n  if (itemCode.startsWith('WFLGW')) {\n    return 'Light Greywash';\n  }\n  if (itemCode.startsWith('WFDGW')) {\n    return 'Dark Greywash';\n  }\n  if (itemCode.startsWith('WFBW')) {\n    return 'Blackwash';\n  }\n  if (itemCode.startsWith('WFMW')) {\n    return 'Mixing White';\n  }\n  if (itemCode.startsWith('WFLW')) {\n    return 'Lining White';\n  }\n  if (itemCode.startsWith('WFHW')) {\n    return 'High White';\n  }\n  if (itemCode.startsWith('WFBB')) {\n    return 'Blue Black';\n  }\n  if (itemCode.startsWith('WFPB')) {\n    return 'Pure Black';\n  }\n  if (itemCode.startsWith('WFGB')) {\n    return 'Golden Black';\n  }\n  if (itemCode.startsWith('WFDB')) {\n    return 'Dark Black';\n  }\n  if (itemCode.startsWith('WFXB')) {\n    return 'Extreme Black';\n  }\n  if (itemCode.startsWith('WFUB')) {\n    return 'Ultimate Black';\n  }\n  if (itemCode.startsWith('WFMKSK')) {\n    return 'Maks Skintone';\n  }\n  if (itemCode.startsWith('WFSTSS')) {\n    return 'Saniderm Skintone Set';\n  }\n  if (itemCode.startsWith('KS')) {\n    // Handle Kuro Sumi items\n    const code = itemCode.replace('KS', '');\n    if (code === 'ZP') return 'Zhang Po Shading Set';\n    if (code === 'OL6') return 'Outlining';\n    if (code === 'OI12') return 'Outlining';\n    if (code === 'G6') return 'Greywash';\n    if (code === 'SW3') return 'Samurai White';\n    if (code === 'SW1.5') return 'Samurai White';\n  }\n  \n  // If no specific match, try to extract a meaningful name from the code\n  const code = itemCode.replace(/^(WF|KS)/, '').split(/\\d+/)[0];\n  const words = code.split(/(?=[A-Z])/).filter(word => word.length > 0);\n  return words.join(' ');\n}\n\nconst parseItem = (itemText) => {\n  const lines = itemText.split('\\n');\n  const itemCodeMatch = lines[0].match(/Item Code:\\s*([^\\s]+)/);\n  const colorMatch = lines[0].match(/Color:\\s*([^\\n]+)/);\n  const sizeMatch = lines[0].match(/Size:\\s*([^\\n]+)/);\n  const quantityMatch = lines[0].match(/Quantity:\\s*(\\d+)/);\n\n  if (!itemCodeMatch || !colorMatch || !sizeMatch || !quantityMatch) {\n    return null;\n  }\n\n  return {\n    itemCode: itemCodeMatch[1].trim(),\n    color: colorMatch[1].trim(),\n    size: sizeMatch[1].trim(),\n    quantity: parseInt(quantityMatch[1]),\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}