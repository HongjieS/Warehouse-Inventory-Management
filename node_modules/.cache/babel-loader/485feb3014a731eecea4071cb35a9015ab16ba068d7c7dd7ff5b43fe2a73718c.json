{"ast":null,"code":"// src/parsers/worldFamousParser.js\nimport * as pdfjsLib from \"pdfjs-dist/build/pdf\";\nimport pdfWorker from \"pdfjs-dist/build/pdf.worker.entry\";\n\n// Ensure worker is properly configured\npdfjsLib.GlobalWorkerOptions.workerSrc = pdfWorker;\n\n/**\n * parsePDFWorldFamous(arrayBuffer)\n *  For World Famous / Ink Projects invoices\n */\nexport const parsePDFWorldFamous = async buffer => {\n  try {\n    const pdf = await pdfjsLib.getDocument({\n      data: buffer\n    }).promise;\n    const page = await pdf.getPage(1);\n    const textContent = await page.getTextContent();\n    const items = [];\n\n    // Group text items by their vertical position (y coordinate)\n    const lineMap = new Map();\n    textContent.items.forEach(item => {\n      const y = Math.round(item.transform[5]); // Get y coordinate\n      if (!lineMap.has(y)) {\n        lineMap.set(y, []);\n      }\n      lineMap.get(y).push({\n        text: item.str,\n        x: item.transform[4] // Store x coordinate\n      });\n    });\n\n    // Sort lines by y coordinate (top to bottom) and combine items in each line\n    const lines = Array.from(lineMap.entries()).sort((a, b) => b[0] - a[0]) // Sort by y coordinate\n    .map(([_, items]) => {\n      // Sort items by x coordinate and join\n      return items.sort((a, b) => a.x - b.x).map(item => item.text).join(' ').trim();\n    }).filter(line => line.length > 0);\n    console.log(\"Extracted lines:\", lines); // Debug log\n\n    // Process each line looking for World Famous items\n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i].trim();\n\n      // Skip header lines or lines that don't contain item information\n      if (!line || line.includes('Qty Fulfilled') || line.includes('Page') || line.includes('Total') || line.includes('Subtotal') || line.includes('Order Information') || line.includes('Sales Order')) {\n        continue;\n      }\n\n      // Look for quantity line pattern (e.g., \"0 0 10 $9.25 $92.50\")\n      const quantityMatch = line.match(/\\d+\\s+\\d+\\s+(\\d+)\\s+\\$\\d+\\.\\d+\\s+\\$\\d+\\.\\d+/);\n      if (quantityMatch) {\n        const quantity = parseInt(quantityMatch[1]);\n\n        // Look ahead for the item code in the next few lines\n        for (let j = 1; j <= 3; j++) {\n          if (i + j >= lines.length) break;\n          const nextLine = lines[i + j].trim();\n          const itemCodeMatch = nextLine.match(/WF[A-Z0-9]+/);\n          if (itemCodeMatch) {\n            const itemCode = itemCodeMatch[0];\n            console.log(\"Found item code:\", itemCode); // Debug log\n\n            // Extract size from the item code\n            let size = '1oz';\n            if (itemCode.match(/[24]$/)) {\n              size = `${itemCode.slice(-1)}oz`;\n            }\n\n            // Combine the next few lines to get the full color description\n            let color = '';\n            for (let k = 0; k < 3; k++) {\n              if (i + j + k >= lines.length) break;\n              const colorLine = lines[i + j + k].trim();\n              if (colorLine && !colorLine.match(/WF[A-Z0-9]+/)) {\n                color += ' ' + colorLine;\n              }\n            }\n\n            // Clean up the color name\n            color = color.replace(itemCode, '').replace(/\\d+/g, '').replace(/[-â€”]/g, '').replace(/World Famous/g, '').replace(/Tattoo Ink/g, '').replace(/Ink/g, '').replace(/1oz/g, '').replace(/2oz/g, '').replace(/4oz/g, '').trim();\n            if (!color) {\n              color = getColorFromItemCode(itemCode);\n            }\n            console.log(\"Parsed item:\", {\n              itemCode,\n              color,\n              size,\n              quantity\n            }); // Debug log\n\n            if (itemCode && quantity > 0) {\n              items.push({\n                itemCode,\n                color,\n                size,\n                quantity\n              });\n            }\n            break;\n          }\n        }\n      }\n    }\n    if (items.length === 0) {\n      console.log(\"No items found. Full text content:\", lines); // Debug log\n      throw new Error('No valid items found in the invoice');\n    }\n    return items;\n  } catch (error) {\n    console.error('Error parsing World Famous PDF:', error);\n    throw new Error('Failed to parse World Famous invoice: ' + error.message);\n  }\n};\nfunction getColorFromItemCode(itemCode) {\n  // Special cases for specific product lines\n  if (itemCode.startsWith('WFFMW')) {\n    return 'Mt. Fuji Mixing White';\n  }\n  if (itemCode.startsWith('WFPW')) {\n    return 'Portrait White';\n  }\n  if (itemCode.startsWith('WFMDGW')) {\n    return 'World Famous Mid-tone Greywash';\n  }\n  if (itemCode.startsWith('WFMTGW')) {\n    return 'World Famous Mid-tone Greywash';\n  }\n  if (itemCode.startsWith('WFADPP')) {\n    var _itemCode$match, _itemCode$match$;\n    const num = ((_itemCode$match = itemCode.match(/\\d+/)) === null || _itemCode$match === void 0 ? void 0 : (_itemCode$match$ = _itemCode$match[0]) === null || _itemCode$match$ === void 0 ? void 0 : _itemCode$match$[0]) || '';\n    return `Pancho Pastel #${num}`;\n  }\n  if (itemCode.startsWith('WFP2H')) {\n    return 'Poch 2H';\n  }\n  if (itemCode.startsWith('WFMHS')) {\n    return 'Must-Haves';\n  }\n  if (itemCode.startsWith('WFILL')) {\n    return 'Illuminati Yellow';\n  }\n  if (itemCode.startsWith('WFLGW')) {\n    return 'World Famous Light Greywash';\n  }\n  if (itemCode.startsWith('WFDGW')) {\n    return 'World Famous Dark Greywash';\n  }\n  if (itemCode.startsWith('WFBW')) {\n    return 'Blackwash';\n  }\n  if (itemCode.startsWith('WFMW')) {\n    return 'Mixing White';\n  }\n  if (itemCode.startsWith('WFLW')) {\n    return 'Lining White';\n  }\n  if (itemCode.startsWith('WFHW')) {\n    return 'High White';\n  }\n  if (itemCode.startsWith('WFBB')) {\n    return 'Blue Black';\n  }\n  if (itemCode.startsWith('WFPB')) {\n    return 'Pure Black';\n  }\n  if (itemCode.startsWith('WFGB')) {\n    return 'Golden Black';\n  }\n  if (itemCode.startsWith('WFDB')) {\n    return 'Dark Black';\n  }\n  if (itemCode.startsWith('WFXB')) {\n    return 'Extreme Black';\n  }\n  if (itemCode.startsWith('WFUB')) {\n    return 'Ultimate Black';\n  }\n\n  // If no specific match, try to extract a meaningful name from the code\n  const code = itemCode.replace('WF', '').split(/\\d+/)[0];\n  const words = code.split(/(?=[A-Z])/).filter(word => word.length > 0);\n  return words.join(' ');\n}\nconst parseItem = itemText => {\n  const lines = itemText.split('\\n');\n  const itemCodeMatch = lines[0].match(/Item Code:\\s*([^\\s]+)/);\n  const colorMatch = lines[0].match(/Color:\\s*([^\\n]+)/);\n  const sizeMatch = lines[0].match(/Size:\\s*([^\\n]+)/);\n  const quantityMatch = lines[0].match(/Quantity:\\s*(\\d+)/);\n  if (!itemCodeMatch || !colorMatch || !sizeMatch || !quantityMatch) {\n    return null;\n  }\n  return {\n    itemCode: itemCodeMatch[1].trim(),\n    color: colorMatch[1].trim(),\n    size: sizeMatch[1].trim(),\n    quantity: parseInt(quantityMatch[1])\n  };\n};","map":{"version":3,"names":["pdfjsLib","pdfWorker","GlobalWorkerOptions","workerSrc","parsePDFWorldFamous","buffer","pdf","getDocument","data","promise","page","getPage","textContent","getTextContent","items","lineMap","Map","forEach","item","y","Math","round","transform","has","set","get","push","text","str","x","lines","Array","from","entries","sort","a","b","map","_","join","trim","filter","line","length","console","log","i","includes","quantityMatch","match","quantity","parseInt","j","nextLine","itemCodeMatch","itemCode","size","slice","color","k","colorLine","replace","getColorFromItemCode","Error","error","message","startsWith","_itemCode$match","_itemCode$match$","num","code","split","words","word","parseItem","itemText","colorMatch","sizeMatch"],"sources":["C:/Users/hongjie/Desktop/Warehouse Test/src/parsers/worldFamousParser.js"],"sourcesContent":["// src/parsers/worldFamousParser.js\nimport * as pdfjsLib from \"pdfjs-dist/build/pdf\";\nimport pdfWorker from \"pdfjs-dist/build/pdf.worker.entry\";\n\n// Ensure worker is properly configured\npdfjsLib.GlobalWorkerOptions.workerSrc = pdfWorker;\n\n/**\n * parsePDFWorldFamous(arrayBuffer)\n *  For World Famous / Ink Projects invoices\n */\nexport const parsePDFWorldFamous = async (buffer) => {\n  try {\n    const pdf = await pdfjsLib.getDocument({ data: buffer }).promise;\n    const page = await pdf.getPage(1);\n    const textContent = await page.getTextContent();\n    const items = [];\n\n    // Group text items by their vertical position (y coordinate)\n    const lineMap = new Map();\n    textContent.items.forEach(item => {\n      const y = Math.round(item.transform[5]); // Get y coordinate\n      if (!lineMap.has(y)) {\n        lineMap.set(y, []);\n      }\n      lineMap.get(y).push({\n        text: item.str,\n        x: item.transform[4] // Store x coordinate\n      });\n    });\n\n    // Sort lines by y coordinate (top to bottom) and combine items in each line\n    const lines = Array.from(lineMap.entries())\n      .sort((a, b) => b[0] - a[0]) // Sort by y coordinate\n      .map(([_, items]) => {\n        // Sort items by x coordinate and join\n        return items\n          .sort((a, b) => a.x - b.x)\n          .map(item => item.text)\n          .join(' ')\n          .trim();\n      })\n      .filter(line => line.length > 0);\n\n    console.log(\"Extracted lines:\", lines); // Debug log\n\n    // Process each line looking for World Famous items\n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i].trim();\n      \n      // Skip header lines or lines that don't contain item information\n      if (!line || \n          line.includes('Qty Fulfilled') || \n          line.includes('Page') || \n          line.includes('Total') || \n          line.includes('Subtotal') ||\n          line.includes('Order Information') ||\n          line.includes('Sales Order')) {\n        continue;\n      }\n\n      // Look for quantity line pattern (e.g., \"0 0 10 $9.25 $92.50\")\n      const quantityMatch = line.match(/\\d+\\s+\\d+\\s+(\\d+)\\s+\\$\\d+\\.\\d+\\s+\\$\\d+\\.\\d+/);\n      if (quantityMatch) {\n        const quantity = parseInt(quantityMatch[1]);\n        \n        // Look ahead for the item code in the next few lines\n        for (let j = 1; j <= 3; j++) {\n          if (i + j >= lines.length) break;\n          \n          const nextLine = lines[i + j].trim();\n          const itemCodeMatch = nextLine.match(/WF[A-Z0-9]+/);\n          \n          if (itemCodeMatch) {\n            const itemCode = itemCodeMatch[0];\n            console.log(\"Found item code:\", itemCode); // Debug log\n\n            // Extract size from the item code\n            let size = '1oz';\n            if (itemCode.match(/[24]$/)) {\n              size = `${itemCode.slice(-1)}oz`;\n            }\n\n            // Combine the next few lines to get the full color description\n            let color = '';\n            for (let k = 0; k < 3; k++) {\n              if (i + j + k >= lines.length) break;\n              const colorLine = lines[i + j + k].trim();\n              if (colorLine && !colorLine.match(/WF[A-Z0-9]+/)) {\n                color += ' ' + colorLine;\n              }\n            }\n\n            // Clean up the color name\n            color = color\n              .replace(itemCode, '')\n              .replace(/\\d+/g, '')\n              .replace(/[-â€”]/g, '')\n              .replace(/World Famous/g, '')\n              .replace(/Tattoo Ink/g, '')\n              .replace(/Ink/g, '')\n              .replace(/1oz/g, '')\n              .replace(/2oz/g, '')\n              .replace(/4oz/g, '')\n              .trim();\n\n            if (!color) {\n              color = getColorFromItemCode(itemCode);\n            }\n\n            console.log(\"Parsed item:\", { itemCode, color, size, quantity }); // Debug log\n\n            if (itemCode && quantity > 0) {\n              items.push({\n                itemCode,\n                color,\n                size,\n                quantity\n              });\n            }\n            break;\n          }\n        }\n      }\n    }\n\n    if (items.length === 0) {\n      console.log(\"No items found. Full text content:\", lines); // Debug log\n      throw new Error('No valid items found in the invoice');\n    }\n\n    return items;\n  } catch (error) {\n    console.error('Error parsing World Famous PDF:', error);\n    throw new Error('Failed to parse World Famous invoice: ' + error.message);\n  }\n};\n\nfunction getColorFromItemCode(itemCode) {\n  // Special cases for specific product lines\n  if (itemCode.startsWith('WFFMW')) {\n    return 'Mt. Fuji Mixing White';\n  }\n  if (itemCode.startsWith('WFPW')) {\n    return 'Portrait White';\n  }\n  if (itemCode.startsWith('WFMDGW')) {\n    return 'World Famous Mid-tone Greywash';\n  }\n  if (itemCode.startsWith('WFMTGW')) {\n    return 'World Famous Mid-tone Greywash';\n  }\n  if (itemCode.startsWith('WFADPP')) {\n    const num = itemCode.match(/\\d+/)?.[0]?.[0] || '';\n    return `Pancho Pastel #${num}`;\n  }\n  if (itemCode.startsWith('WFP2H')) {\n    return 'Poch 2H';\n  }\n  if (itemCode.startsWith('WFMHS')) {\n    return 'Must-Haves';\n  }\n  if (itemCode.startsWith('WFILL')) {\n    return 'Illuminati Yellow';\n  }\n  if (itemCode.startsWith('WFLGW')) {\n    return 'World Famous Light Greywash';\n  }\n  if (itemCode.startsWith('WFDGW')) {\n    return 'World Famous Dark Greywash';\n  }\n  if (itemCode.startsWith('WFBW')) {\n    return 'Blackwash';\n  }\n  if (itemCode.startsWith('WFMW')) {\n    return 'Mixing White';\n  }\n  if (itemCode.startsWith('WFLW')) {\n    return 'Lining White';\n  }\n  if (itemCode.startsWith('WFHW')) {\n    return 'High White';\n  }\n  if (itemCode.startsWith('WFBB')) {\n    return 'Blue Black';\n  }\n  if (itemCode.startsWith('WFPB')) {\n    return 'Pure Black';\n  }\n  if (itemCode.startsWith('WFGB')) {\n    return 'Golden Black';\n  }\n  if (itemCode.startsWith('WFDB')) {\n    return 'Dark Black';\n  }\n  if (itemCode.startsWith('WFXB')) {\n    return 'Extreme Black';\n  }\n  if (itemCode.startsWith('WFUB')) {\n    return 'Ultimate Black';\n  }\n  \n  // If no specific match, try to extract a meaningful name from the code\n  const code = itemCode.replace('WF', '').split(/\\d+/)[0];\n  const words = code.split(/(?=[A-Z])/).filter(word => word.length > 0);\n  return words.join(' ');\n}\n\nconst parseItem = (itemText) => {\n  const lines = itemText.split('\\n');\n  const itemCodeMatch = lines[0].match(/Item Code:\\s*([^\\s]+)/);\n  const colorMatch = lines[0].match(/Color:\\s*([^\\n]+)/);\n  const sizeMatch = lines[0].match(/Size:\\s*([^\\n]+)/);\n  const quantityMatch = lines[0].match(/Quantity:\\s*(\\d+)/);\n\n  if (!itemCodeMatch || !colorMatch || !sizeMatch || !quantityMatch) {\n    return null;\n  }\n\n  return {\n    itemCode: itemCodeMatch[1].trim(),\n    color: colorMatch[1].trim(),\n    size: sizeMatch[1].trim(),\n    quantity: parseInt(quantityMatch[1]),\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}