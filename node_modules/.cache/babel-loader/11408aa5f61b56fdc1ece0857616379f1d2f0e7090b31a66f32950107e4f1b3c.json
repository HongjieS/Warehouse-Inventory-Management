{"ast":null,"code":"// src/parsers/worldFamousParser.js\nimport * as pdfjsLib from \"pdfjs-dist/build/pdf\";\nimport pdfWorker from \"pdfjs-dist/build/pdf.worker.entry\";\n\n// Ensure worker is properly configured\npdfjsLib.GlobalWorkerOptions.workerSrc = pdfWorker;\n\n/**\n * parsePDFWorldFamous(arrayBuffer)\n *  For World Famous / Ink Projects invoices\n */\nexport const parsePDFWorldFamous = async buffer => {\n  try {\n    const pdf = await pdfjsLib.getDocument({\n      data: buffer\n    }).promise;\n    const page = await pdf.getPage(1);\n    const textContent = await page.getTextContent();\n    const items = [];\n\n    // Group text items by their vertical position (y coordinate)\n    const lineMap = new Map();\n    textContent.items.forEach(item => {\n      const y = Math.round(item.transform[5]); // Get y coordinate\n      if (!lineMap.has(y)) {\n        lineMap.set(y, []);\n      }\n      lineMap.get(y).push(item.str);\n    });\n\n    // Sort lines by y coordinate (top to bottom) and combine items in each line\n    const lines = Array.from(lineMap.entries()).sort((a, b) => b[0] - a[0]) // Sort by y coordinate\n    .map(([_, items]) => items.join(' ').trim()).filter(line => line.length > 0);\n\n    // Process each line looking for World Famous items\n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i].trim();\n\n      // Skip header lines or lines that don't contain item information\n      if (!line || line.includes('Qty Fulfilled') || line.includes('Page') || line.includes('Total') || line.includes('Subtotal') || line.includes('Order Information')) {\n        continue;\n      }\n\n      // Extract item code (look for WF followed by any characters)\n      const itemCodeMatch = line.match(/(WF[A-Z0-9]+)/i);\n      if (!itemCodeMatch) {\n        continue;\n      }\n      const itemCode = itemCodeMatch[1];\n\n      // Extract quantities (first three numbers in the line)\n      const numbers = line.match(/\\d+/g) || [];\n      const quantity = numbers.length >= 3 ? parseInt(numbers[2]) : 0;\n\n      // Extract color (text between item code and \"—\")\n      let color = line.substring(line.indexOf(itemCode) + itemCode.length).split('—')[0].trim();\n\n      // Extract size from the line\n      let size = '1oz';\n      const sizeMatch = line.match(/(\\d+(?:\\/\\d+)?)oz/i);\n      if (sizeMatch) {\n        size = sizeMatch[1] === '1/2' ? '0.5oz' : `${sizeMatch[1]}oz`;\n      }\n      items.push({\n        itemCode,\n        color,\n        size,\n        quantity\n      });\n    }\n    if (items.length === 0) {\n      throw new Error('No valid items found in the invoice. Please check the console for debugging information.');\n    }\n    return items;\n  } catch (error) {\n    console.error('Error parsing World Famous PDF:', error);\n    throw new Error('Failed to parse World Famous invoice: ' + error.message);\n  }\n};\nfunction getColorFromItemCode(itemCode) {\n  // Special cases for specific product lines\n  if (itemCode.startsWith('WFFMW')) {\n    return 'Mt. Fuji Mixing White';\n  }\n  if (itemCode.startsWith('WFPW')) {\n    return 'Portrait White';\n  }\n  if (itemCode.startsWith('WFMDGW')) {\n    return 'World Famous Mid-tone Greywash';\n  }\n  if (itemCode.startsWith('WFMTGW')) {\n    return 'World Famous Mid-tone Greywash';\n  }\n  if (itemCode.startsWith('WFADPP')) {\n    var _itemCode$match, _itemCode$match$;\n    const num = ((_itemCode$match = itemCode.match(/\\d+/)) === null || _itemCode$match === void 0 ? void 0 : (_itemCode$match$ = _itemCode$match[0]) === null || _itemCode$match$ === void 0 ? void 0 : _itemCode$match$[0]) || '';\n    return `Pancho Pastel #${num}`;\n  }\n  if (itemCode.startsWith('WFP2H')) {\n    return 'Poch 2H';\n  }\n  if (itemCode.startsWith('WFMHS')) {\n    return 'Must-Haves';\n  }\n  if (itemCode.startsWith('WFILL')) {\n    return 'Illuminati Yellow';\n  }\n  if (itemCode.startsWith('WFLGW')) {\n    return 'World Famous Light Greywash';\n  }\n  if (itemCode.startsWith('WFDGW')) {\n    return 'World Famous Dark Greywash';\n  }\n  if (itemCode.startsWith('WFBW')) {\n    return 'Blackwash';\n  }\n  if (itemCode.startsWith('WFMW')) {\n    return 'Mixing White';\n  }\n  if (itemCode.startsWith('WFLW')) {\n    return 'Lining White';\n  }\n  if (itemCode.startsWith('WFHW')) {\n    return 'High White';\n  }\n  if (itemCode.startsWith('WFBB')) {\n    return 'Blue Black';\n  }\n  if (itemCode.startsWith('WFPB')) {\n    return 'Pure Black';\n  }\n  if (itemCode.startsWith('WFGB')) {\n    return 'Golden Black';\n  }\n  if (itemCode.startsWith('WFDB')) {\n    return 'Dark Black';\n  }\n  if (itemCode.startsWith('WFXB')) {\n    return 'Extreme Black';\n  }\n  if (itemCode.startsWith('WFUB')) {\n    return 'Ultimate Black';\n  }\n\n  // If no specific match, try to extract a meaningful name from the code\n  const code = itemCode.replace('WF', '').split(/\\d+/)[0];\n  const words = code.split(/(?=[A-Z])/).filter(word => word.length > 0);\n  return words.join(' ');\n}\nconst parseItem = itemText => {\n  const lines = itemText.split('\\n');\n  const itemCodeMatch = lines[0].match(/Item Code:\\s*([^\\s]+)/);\n  const colorMatch = lines[0].match(/Color:\\s*([^\\n]+)/);\n  const sizeMatch = lines[0].match(/Size:\\s*([^\\n]+)/);\n  const quantityMatch = lines[0].match(/Quantity:\\s*(\\d+)/);\n  if (!itemCodeMatch || !colorMatch || !sizeMatch || !quantityMatch) {\n    return null;\n  }\n  return {\n    itemCode: itemCodeMatch[1].trim(),\n    color: colorMatch[1].trim(),\n    size: sizeMatch[1].trim(),\n    quantity: parseInt(quantityMatch[1])\n  };\n};","map":{"version":3,"names":["pdfjsLib","pdfWorker","GlobalWorkerOptions","workerSrc","parsePDFWorldFamous","buffer","pdf","getDocument","data","promise","page","getPage","textContent","getTextContent","items","lineMap","Map","forEach","item","y","Math","round","transform","has","set","get","push","str","lines","Array","from","entries","sort","a","b","map","_","join","trim","filter","line","length","i","includes","itemCodeMatch","match","itemCode","numbers","quantity","parseInt","color","substring","indexOf","split","size","sizeMatch","Error","error","console","message","getColorFromItemCode","startsWith","_itemCode$match","_itemCode$match$","num","code","replace","words","word","parseItem","itemText","colorMatch","quantityMatch"],"sources":["C:/Users/hongjie/Desktop/Warehouse Test/src/parsers/worldFamousParser.js"],"sourcesContent":["// src/parsers/worldFamousParser.js\nimport * as pdfjsLib from \"pdfjs-dist/build/pdf\";\nimport pdfWorker from \"pdfjs-dist/build/pdf.worker.entry\";\n\n// Ensure worker is properly configured\npdfjsLib.GlobalWorkerOptions.workerSrc = pdfWorker;\n\n/**\n * parsePDFWorldFamous(arrayBuffer)\n *  For World Famous / Ink Projects invoices\n */\nexport const parsePDFWorldFamous = async (buffer) => {\n  try {\n    const pdf = await pdfjsLib.getDocument({ data: buffer }).promise;\n    const page = await pdf.getPage(1);\n    const textContent = await page.getTextContent();\n    const items = [];\n\n    // Group text items by their vertical position (y coordinate)\n    const lineMap = new Map();\n    textContent.items.forEach(item => {\n      const y = Math.round(item.transform[5]); // Get y coordinate\n      if (!lineMap.has(y)) {\n        lineMap.set(y, []);\n      }\n      lineMap.get(y).push(item.str);\n    });\n\n    // Sort lines by y coordinate (top to bottom) and combine items in each line\n    const lines = Array.from(lineMap.entries())\n      .sort((a, b) => b[0] - a[0]) // Sort by y coordinate\n      .map(([_, items]) => items.join(' ').trim())\n      .filter(line => line.length > 0);\n\n    // Process each line looking for World Famous items\n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i].trim();\n      \n      // Skip header lines or lines that don't contain item information\n      if (!line || \n          line.includes('Qty Fulfilled') || \n          line.includes('Page') || \n          line.includes('Total') || \n          line.includes('Subtotal') ||\n          line.includes('Order Information')) {\n        continue;\n      }\n\n      // Extract item code (look for WF followed by any characters)\n      const itemCodeMatch = line.match(/(WF[A-Z0-9]+)/i);\n      if (!itemCodeMatch) {\n        continue;\n      }\n\n      const itemCode = itemCodeMatch[1];\n\n      // Extract quantities (first three numbers in the line)\n      const numbers = line.match(/\\d+/g) || [];\n      const quantity = numbers.length >= 3 ? parseInt(numbers[2]) : 0;\n\n      // Extract color (text between item code and \"—\")\n      let color = line\n        .substring(line.indexOf(itemCode) + itemCode.length)\n        .split('—')[0]\n        .trim();\n\n      // Extract size from the line\n      let size = '1oz';\n      const sizeMatch = line.match(/(\\d+(?:\\/\\d+)?)oz/i);\n      if (sizeMatch) {\n        size = sizeMatch[1] === '1/2' ? '0.5oz' : `${sizeMatch[1]}oz`;\n      }\n\n      items.push({\n        itemCode,\n        color,\n        size,\n        quantity\n      });\n    }\n\n    if (items.length === 0) {\n      throw new Error('No valid items found in the invoice. Please check the console for debugging information.');\n    }\n\n    return items;\n  } catch (error) {\n    console.error('Error parsing World Famous PDF:', error);\n    throw new Error('Failed to parse World Famous invoice: ' + error.message);\n  }\n};\n\nfunction getColorFromItemCode(itemCode) {\n  // Special cases for specific product lines\n  if (itemCode.startsWith('WFFMW')) {\n    return 'Mt. Fuji Mixing White';\n  }\n  if (itemCode.startsWith('WFPW')) {\n    return 'Portrait White';\n  }\n  if (itemCode.startsWith('WFMDGW')) {\n    return 'World Famous Mid-tone Greywash';\n  }\n  if (itemCode.startsWith('WFMTGW')) {\n    return 'World Famous Mid-tone Greywash';\n  }\n  if (itemCode.startsWith('WFADPP')) {\n    const num = itemCode.match(/\\d+/)?.[0]?.[0] || '';\n    return `Pancho Pastel #${num}`;\n  }\n  if (itemCode.startsWith('WFP2H')) {\n    return 'Poch 2H';\n  }\n  if (itemCode.startsWith('WFMHS')) {\n    return 'Must-Haves';\n  }\n  if (itemCode.startsWith('WFILL')) {\n    return 'Illuminati Yellow';\n  }\n  if (itemCode.startsWith('WFLGW')) {\n    return 'World Famous Light Greywash';\n  }\n  if (itemCode.startsWith('WFDGW')) {\n    return 'World Famous Dark Greywash';\n  }\n  if (itemCode.startsWith('WFBW')) {\n    return 'Blackwash';\n  }\n  if (itemCode.startsWith('WFMW')) {\n    return 'Mixing White';\n  }\n  if (itemCode.startsWith('WFLW')) {\n    return 'Lining White';\n  }\n  if (itemCode.startsWith('WFHW')) {\n    return 'High White';\n  }\n  if (itemCode.startsWith('WFBB')) {\n    return 'Blue Black';\n  }\n  if (itemCode.startsWith('WFPB')) {\n    return 'Pure Black';\n  }\n  if (itemCode.startsWith('WFGB')) {\n    return 'Golden Black';\n  }\n  if (itemCode.startsWith('WFDB')) {\n    return 'Dark Black';\n  }\n  if (itemCode.startsWith('WFXB')) {\n    return 'Extreme Black';\n  }\n  if (itemCode.startsWith('WFUB')) {\n    return 'Ultimate Black';\n  }\n  \n  // If no specific match, try to extract a meaningful name from the code\n  const code = itemCode.replace('WF', '').split(/\\d+/)[0];\n  const words = code.split(/(?=[A-Z])/).filter(word => word.length > 0);\n  return words.join(' ');\n}\n\nconst parseItem = (itemText) => {\n  const lines = itemText.split('\\n');\n  const itemCodeMatch = lines[0].match(/Item Code:\\s*([^\\s]+)/);\n  const colorMatch = lines[0].match(/Color:\\s*([^\\n]+)/);\n  const sizeMatch = lines[0].match(/Size:\\s*([^\\n]+)/);\n  const quantityMatch = lines[0].match(/Quantity:\\s*(\\d+)/);\n\n  if (!itemCodeMatch || !colorMatch || !sizeMatch || !quantityMatch) {\n    return null;\n  }\n\n  return {\n    itemCode: itemCodeMatch[1].trim(),\n    color: colorMatch[1].trim(),\n    size: sizeMatch[1].trim(),\n    quantity: parseInt(quantityMatch[1]),\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}