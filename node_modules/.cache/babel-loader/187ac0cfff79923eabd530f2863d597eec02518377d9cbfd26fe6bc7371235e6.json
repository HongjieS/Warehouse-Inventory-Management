{"ast":null,"code":"import * as pdfjsLib from \"pdfjs-dist/build/pdf\";\nimport pdfWorker from \"pdfjs-dist/build/pdf.worker.entry\";\n\n// Ensure worker is properly configured\npdfjsLib.GlobalWorkerOptions.workerSrc = pdfWorker;\n\n/**\r\n * parsePDFSolidInk(arrayBuffer)\r\n *  For Solid Ink style invoices\r\n */\nexport async function parsePDFSolidInk(arrayBuffer) {\n  try {\n    const pdf = await pdfjsLib.getDocument({\n      data: arrayBuffer\n    }).promise;\n    let allText = \"\";\n    for (let i = 1; i <= pdf.numPages; i++) {\n      const page = await pdf.getPage(i);\n      const content = await page.getTextContent();\n\n      // Extract text and transform data to preserve layout\n      const items = content.items.map(item => ({\n        text: item.str,\n        x: item.transform[4],\n        y: item.transform[5]\n      }));\n\n      // Sort items by their vertical position (y) and then horizontal position (x)\n      // For Solid Ink invoices, we need to preserve row structure\n      const sortedItems = items.sort((a, b) => {\n        // Compare y positions (higher y value = higher on page in PDF.js)\n        const yDiff = b.y - a.y;\n        // If y positions are close (same line), sort by x position\n        if (Math.abs(yDiff) < 2) {\n          return a.x - b.x;\n        }\n        return yDiff;\n      });\n\n      // Group items by their vertical position to form lines\n      let currentY = null;\n      let currentLine = [];\n      const lines = [];\n      for (const item of sortedItems) {\n        if (currentY === null || Math.abs(item.y - currentY) > 2) {\n          if (currentLine.length > 0) {\n            lines.push(currentLine.join(' '));\n          }\n          currentLine = [item.text];\n          currentY = item.y;\n        } else {\n          currentLine.push(item.text);\n        }\n      }\n      if (currentLine.length > 0) {\n        lines.push(currentLine.join(' '));\n      }\n      allText += lines.join('\\n') + '\\n';\n      console.log(`Page ${i} content:`, lines); // Debug logging\n    }\n\n    // Split into lines and filter out empty lines and headers\n    const lines = allText.split('\\n').filter(line => line.trim()).filter(line => !line.match(/^Page \\d+$/i)).filter(line => !line.match(/^(Item|Description|Ordered|Rate|Amount)$/i)).filter(line => !line.match(/^(Total|Subtotal|Invoice|Date|Ship To|Bill To)/i)).filter(line => !line.match(/^Sales Order/i)).filter(line => !line.match(/^Invoice \\d+$/i));\n    console.log('Filtered lines:', lines); // Debug logging\n\n    const results = [];\n\n    // Pattern for Solid Ink invoice items\n    // Example: SI-1730 Baby Blue 12 $9.99 $119.88\n    const itemPattern = /^([A-Z0-9]+(?:-[A-Z0-9]+)?)\\s+([^0-9]+?)\\s+(\\d+)\\s+\\$[\\d,.]+\\s+\\$[\\d,.]+$/i;\n    for (const line of lines) {\n      // Add debug logging to see exact line content with visible spaces\n      console.log('Processing line:', line.replace(/ /g, '·')); // Shows spaces as dots for debugging\n\n      const match = line.match(itemPattern);\n      if (match) {\n        const [, itemCode, description, quantity] = match;\n        console.log('Matched components:', {\n          itemCode,\n          description,\n          quantity\n        }); // Debug matched components\n\n        // Extract size from item code or description\n        let size = \"1 ounce\"; // default\n        if (itemCode.includes(\"-1/2\") || description.toLowerCase().includes(\"1/2 ounce\") || description.toLowerCase().includes(\"1/2oz\")) {\n          size = \"1/2 ounce\";\n        } else if (itemCode.includes(\"-4\") || description.toLowerCase().includes(\"4 ounce\") || description.toLowerCase().includes(\"4oz\")) {\n          size = \"4 ounce\";\n        } else if (itemCode.includes(\"-2\") || description.toLowerCase().includes(\"2 ounce\") || description.toLowerCase().includes(\"2oz\")) {\n          size = \"2 ounce\";\n        }\n\n        // Clean up color name by removing size references and other common text\n        const color = description.replace(/-1 ounce Bottle/i, \"\").replace(/-1\\/2 ounce/i, \"\").replace(/-4 ounce/i, \"\").replace(/-2 ounce/i, \"\").replace(/\\s*Bottle.*$/i, \"\") // Remove \"Bottle\" and anything after it\n        .replace(/\\s*Set.*$/i, \"\") // Remove \"Set\" and anything after it\n        .replace(/\\s*\\([^)]*\\)/g, \"\") // Remove any parenthetical notes\n        .replace(/\\s+1oz\\b/i, \"\").replace(/\\s+2oz\\b/i, \"\").replace(/\\s+4oz\\b/i, \"\").replace(/\\s+1\\/2oz\\b/i, \"\").replace(/\\s+1 ounce\\b/i, \"\").replace(/\\s+2 ounce\\b/i, \"\").replace(/\\s+4 ounce\\b/i, \"\").replace(/\\s+1\\/2 ounce\\b/i, \"\").trim();\n\n        // Skip discount lines and empty colors\n        if (!itemCode.includes(\"Discount\") && color && !color.match(/^(ounce|Bottle|Bottles)$/i)) {\n          results.push({\n            itemCode,\n            color,\n            quantity: parseInt(quantity, 10),\n            size\n          });\n          console.log('Successfully parsed item:', {\n            itemCode,\n            color,\n            quantity,\n            size\n          }); // Debug logging\n        }\n      } else {\n        console.log('Line did not match pattern:', line); // Debug logging\n      }\n    }\n    if (results.length === 0) {\n      console.error('No items could be parsed from the PDF');\n      throw new Error('No items could be parsed from the PDF');\n    }\n    console.log('Parsed results:', results); // Debug logging\n    return results;\n  } catch (error) {\n    console.error('Error parsing PDF:', error);\n    throw error;\n  }\n}","map":{"version":3,"names":["pdfjsLib","pdfWorker","GlobalWorkerOptions","workerSrc","parsePDFSolidInk","arrayBuffer","pdf","getDocument","data","promise","allText","i","numPages","page","getPage","content","getTextContent","items","map","item","text","str","x","transform","y","sortedItems","sort","a","b","yDiff","Math","abs","currentY","currentLine","lines","length","push","join","console","log","split","filter","line","trim","match","results","itemPattern","replace","itemCode","description","quantity","size","includes","toLowerCase","color","parseInt","error","Error"],"sources":["C:/Users/hongjie/Desktop/Warehouse Test/src/parsers/solidInkParser.js"],"sourcesContent":["import * as pdfjsLib from \"pdfjs-dist/build/pdf\";\r\nimport pdfWorker from \"pdfjs-dist/build/pdf.worker.entry\";\r\n\r\n// Ensure worker is properly configured\r\npdfjsLib.GlobalWorkerOptions.workerSrc = pdfWorker;\r\n\r\n/**\r\n * parsePDFSolidInk(arrayBuffer)\r\n *  For Solid Ink style invoices\r\n */\r\nexport async function parsePDFSolidInk(arrayBuffer) {\r\n  try {\r\n    const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;\r\n    let allText = \"\";\r\n\r\n    for (let i = 1; i <= pdf.numPages; i++) {\r\n      const page = await pdf.getPage(i);\r\n      const content = await page.getTextContent();\r\n      \r\n      // Extract text and transform data to preserve layout\r\n      const items = content.items.map(item => ({\r\n        text: item.str,\r\n        x: item.transform[4],\r\n        y: item.transform[5]\r\n      }));\r\n      \r\n      // Sort items by their vertical position (y) and then horizontal position (x)\r\n      // For Solid Ink invoices, we need to preserve row structure\r\n      const sortedItems = items.sort((a, b) => {\r\n        // Compare y positions (higher y value = higher on page in PDF.js)\r\n        const yDiff = b.y - a.y;\r\n        // If y positions are close (same line), sort by x position\r\n        if (Math.abs(yDiff) < 2) {\r\n          return a.x - b.x;\r\n        }\r\n        return yDiff;\r\n      });\r\n\r\n      // Group items by their vertical position to form lines\r\n      let currentY = null;\r\n      let currentLine = [];\r\n      const lines = [];\r\n\r\n      for (const item of sortedItems) {\r\n        if (currentY === null || Math.abs(item.y - currentY) > 2) {\r\n          if (currentLine.length > 0) {\r\n            lines.push(currentLine.join(' '));\r\n          }\r\n          currentLine = [item.text];\r\n          currentY = item.y;\r\n        } else {\r\n          currentLine.push(item.text);\r\n        }\r\n      }\r\n      \r\n      if (currentLine.length > 0) {\r\n        lines.push(currentLine.join(' '));\r\n      }\r\n\r\n      allText += lines.join('\\n') + '\\n';\r\n      console.log(`Page ${i} content:`, lines); // Debug logging\r\n    }\r\n\r\n    // Split into lines and filter out empty lines and headers\r\n    const lines = allText.split('\\n')\r\n      .filter(line => line.trim())\r\n      .filter(line => !line.match(/^Page \\d+$/i))\r\n      .filter(line => !line.match(/^(Item|Description|Ordered|Rate|Amount)$/i))\r\n      .filter(line => !line.match(/^(Total|Subtotal|Invoice|Date|Ship To|Bill To)/i))\r\n      .filter(line => !line.match(/^Sales Order/i))\r\n      .filter(line => !line.match(/^Invoice \\d+$/i));\r\n\r\n    console.log('Filtered lines:', lines); // Debug logging\r\n    \r\n    const results = [];\r\n    \r\n    // Pattern for Solid Ink invoice items\r\n    // Example: SI-1730 Baby Blue 12 $9.99 $119.88\r\n    const itemPattern = /^([A-Z0-9]+(?:-[A-Z0-9]+)?)\\s+([^0-9]+?)\\s+(\\d+)\\s+\\$[\\d,.]+\\s+\\$[\\d,.]+$/i;\r\n    \r\n    for (const line of lines) {\r\n      // Add debug logging to see exact line content with visible spaces\r\n      console.log('Processing line:', line.replace(/ /g, '·')); // Shows spaces as dots for debugging\r\n      \r\n      const match = line.match(itemPattern);\r\n      \r\n      if (match) {\r\n        const [, itemCode, description, quantity] = match;\r\n        console.log('Matched components:', { itemCode, description, quantity }); // Debug matched components\r\n\r\n        // Extract size from item code or description\r\n        let size = \"1 ounce\"; // default\r\n        if (itemCode.includes(\"-1/2\") || description.toLowerCase().includes(\"1/2 ounce\") || description.toLowerCase().includes(\"1/2oz\")) {\r\n          size = \"1/2 ounce\";\r\n        } else if (itemCode.includes(\"-4\") || description.toLowerCase().includes(\"4 ounce\") || description.toLowerCase().includes(\"4oz\")) {\r\n          size = \"4 ounce\";\r\n        } else if (itemCode.includes(\"-2\") || description.toLowerCase().includes(\"2 ounce\") || description.toLowerCase().includes(\"2oz\")) {\r\n          size = \"2 ounce\";\r\n        }\r\n\r\n        // Clean up color name by removing size references and other common text\r\n        const color = description\r\n          .replace(/-1 ounce Bottle/i, \"\")\r\n          .replace(/-1\\/2 ounce/i, \"\")\r\n          .replace(/-4 ounce/i, \"\")\r\n          .replace(/-2 ounce/i, \"\")\r\n          .replace(/\\s*Bottle.*$/i, \"\") // Remove \"Bottle\" and anything after it\r\n          .replace(/\\s*Set.*$/i, \"\") // Remove \"Set\" and anything after it\r\n          .replace(/\\s*\\([^)]*\\)/g, \"\") // Remove any parenthetical notes\r\n          .replace(/\\s+1oz\\b/i, \"\")\r\n          .replace(/\\s+2oz\\b/i, \"\")\r\n          .replace(/\\s+4oz\\b/i, \"\")\r\n          .replace(/\\s+1\\/2oz\\b/i, \"\")\r\n          .replace(/\\s+1 ounce\\b/i, \"\")\r\n          .replace(/\\s+2 ounce\\b/i, \"\")\r\n          .replace(/\\s+4 ounce\\b/i, \"\")\r\n          .replace(/\\s+1\\/2 ounce\\b/i, \"\")\r\n          .trim();\r\n\r\n        // Skip discount lines and empty colors\r\n        if (!itemCode.includes(\"Discount\") && color && !color.match(/^(ounce|Bottle|Bottles)$/i)) {\r\n          results.push({\r\n            itemCode,\r\n            color,\r\n            quantity: parseInt(quantity, 10),\r\n            size\r\n          });\r\n          console.log('Successfully parsed item:', { itemCode, color, quantity, size }); // Debug logging\r\n        }\r\n      } else {\r\n        console.log('Line did not match pattern:', line); // Debug logging\r\n      }\r\n    }\r\n\r\n    if (results.length === 0) {\r\n      console.error('No items could be parsed from the PDF');\r\n      throw new Error('No items could be parsed from the PDF');\r\n    }\r\n\r\n    console.log('Parsed results:', results); // Debug logging\r\n    return results;\r\n  } catch (error) {\r\n    console.error('Error parsing PDF:', error);\r\n    throw error;\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}