{"ast":null,"code":"// src/parsers/worldFamousParser.js\nimport * as pdfjsLib from \"pdfjs-dist/build/pdf\";\nimport pdfWorker from \"pdfjs-dist/build/pdf.worker.entry\";\npdfjsLib.GlobalWorkerOptions.workerSrc = pdfWorker;\n\n/**\r\n * parsePDFWorldFamous(arrayBuffer)\r\n *  For World Famous / Ink Projects invoices\r\n */\nexport async function parsePDFWorldFamous(arrayBuffer) {\n  const pdf = await pdfjsLib.getDocument({\n    data: arrayBuffer\n  }).promise;\n  let allText = \"\";\n  for (let i = 1; i <= pdf.numPages; i++) {\n    const page = await pdf.getPage(i);\n    const content = await page.getTextContent();\n    const pageText = content.items.map(item => item.str).join(\" \");\n    allText += pageText + \"\\n\";\n  }\n\n  // Example lines:\n  //   0 0 10 WFFMW1 Mt. Fuji Mixing White — World Famous Tattoo Ink — 1oz $9.25 $92.50\n  // We'll do a naive approach capturing that \"10\" (qty), \n  // ignoring first two zeros, then item code, then the rest with a size\n  const lineRegex = /^\\s*\\d+\\s+\\d+\\s+(\\d+)\\s+(\\S+)\\s+(.*)$/;\n  const sizeRegex = /\\b(\\d+(\\.\\d+)?) ?(oz|ounce|1.5oz|3oz|6oz|12oz)\\b/i;\n  const results = [];\n  const lines = allText.split(\"\\n\");\n  for (const line of lines) {\n    const match = line.trim().match(lineRegex);\n    if (!match) continue;\n    const [, qtyStr, itemCode, rest] = match;\n    const quantity = parseInt(qtyStr, 10);\n    let sizeMatch = rest.match(sizeRegex);\n    let size = sizeMatch ? sizeMatch[0] : \"\";\n    if (size.toLowerCase().includes(\"ounce\")) {\n      size = size.toLowerCase().replace(\"ounce\", \"oz\").trim();\n    }\n    if (!size) size = \"1oz\"; // fallback\n\n    let color = rest.replace(sizeRegex, \"\").trim();\n    color = color.replace(/— World Famous Tattoo Ink —/gi, \"\").trim();\n    results.push({\n      color,\n      quantity,\n      size\n    });\n  }\n  return results;\n}","map":{"version":3,"names":["pdfjsLib","pdfWorker","GlobalWorkerOptions","workerSrc","parsePDFWorldFamous","arrayBuffer","pdf","getDocument","data","promise","allText","i","numPages","page","getPage","content","getTextContent","pageText","items","map","item","str","join","lineRegex","sizeRegex","results","lines","split","line","match","trim","qtyStr","itemCode","rest","quantity","parseInt","sizeMatch","size","toLowerCase","includes","replace","color","push"],"sources":["C:/Users/hongjie/Desktop/Warehouse Test/src/parsers/worldFamousParser.js"],"sourcesContent":["// src/parsers/worldFamousParser.js\r\nimport * as pdfjsLib from \"pdfjs-dist/build/pdf\";\r\nimport pdfWorker from \"pdfjs-dist/build/pdf.worker.entry\";\r\n\r\npdfjsLib.GlobalWorkerOptions.workerSrc = pdfWorker;\r\n\r\n/**\r\n * parsePDFWorldFamous(arrayBuffer)\r\n *  For World Famous / Ink Projects invoices\r\n */\r\nexport async function parsePDFWorldFamous(arrayBuffer) {\r\n  const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;\r\n  let allText = \"\";\r\n\r\n  for (let i = 1; i <= pdf.numPages; i++) {\r\n    const page = await pdf.getPage(i);\r\n    const content = await page.getTextContent();\r\n    const pageText = content.items.map((item) => item.str).join(\" \");\r\n    allText += pageText + \"\\n\";\r\n  }\r\n\r\n  // Example lines:\r\n  //   0 0 10 WFFMW1 Mt. Fuji Mixing White — World Famous Tattoo Ink — 1oz $9.25 $92.50\r\n  // We'll do a naive approach capturing that \"10\" (qty), \r\n  // ignoring first two zeros, then item code, then the rest with a size\r\n  const lineRegex = /^\\s*\\d+\\s+\\d+\\s+(\\d+)\\s+(\\S+)\\s+(.*)$/;\r\n  const sizeRegex = /\\b(\\d+(\\.\\d+)?) ?(oz|ounce|1.5oz|3oz|6oz|12oz)\\b/i;\r\n\r\n  const results = [];\r\n  const lines = allText.split(\"\\n\");\r\n\r\n  for (const line of lines) {\r\n    const match = line.trim().match(lineRegex);\r\n    if (!match) continue;\r\n    const [, qtyStr, itemCode, rest] = match;\r\n\r\n    const quantity = parseInt(qtyStr, 10);\r\n\r\n    let sizeMatch = rest.match(sizeRegex);\r\n    let size = sizeMatch ? sizeMatch[0] : \"\";\r\n    if (size.toLowerCase().includes(\"ounce\")) {\r\n      size = size.toLowerCase().replace(\"ounce\", \"oz\").trim();\r\n    }\r\n    if (!size) size = \"1oz\"; // fallback\r\n\r\n    let color = rest.replace(sizeRegex, \"\").trim();\r\n    color = color.replace(/— World Famous Tattoo Ink —/gi, \"\").trim();\r\n\r\n    results.push({\r\n      color,\r\n      quantity,\r\n      size\r\n    });\r\n  }\r\n\r\n  return results;\r\n}\r\n"],"mappings":"AAAA;AACA,OAAO,KAAKA,QAAQ,MAAM,sBAAsB;AAChD,OAAOC,SAAS,MAAM,mCAAmC;AAEzDD,QAAQ,CAACE,mBAAmB,CAACC,SAAS,GAAGF,SAAS;;AAElD;AACA;AACA;AACA;AACA,OAAO,eAAeG,mBAAmBA,CAACC,WAAW,EAAE;EACrD,MAAMC,GAAG,GAAG,MAAMN,QAAQ,CAACO,WAAW,CAAC;IAAEC,IAAI,EAAEH;EAAY,CAAC,CAAC,CAACI,OAAO;EACrE,IAAIC,OAAO,GAAG,EAAE;EAEhB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIL,GAAG,CAACM,QAAQ,EAAED,CAAC,EAAE,EAAE;IACtC,MAAME,IAAI,GAAG,MAAMP,GAAG,CAACQ,OAAO,CAACH,CAAC,CAAC;IACjC,MAAMI,OAAO,GAAG,MAAMF,IAAI,CAACG,cAAc,CAAC,CAAC;IAC3C,MAAMC,QAAQ,GAAGF,OAAO,CAACG,KAAK,CAACC,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,GAAG,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;IAChEZ,OAAO,IAAIO,QAAQ,GAAG,IAAI;EAC5B;;EAEA;EACA;EACA;EACA;EACA,MAAMM,SAAS,GAAG,uCAAuC;EACzD,MAAMC,SAAS,GAAG,mDAAmD;EAErE,MAAMC,OAAO,GAAG,EAAE;EAClB,MAAMC,KAAK,GAAGhB,OAAO,CAACiB,KAAK,CAAC,IAAI,CAAC;EAEjC,KAAK,MAAMC,IAAI,IAAIF,KAAK,EAAE;IACxB,MAAMG,KAAK,GAAGD,IAAI,CAACE,IAAI,CAAC,CAAC,CAACD,KAAK,CAACN,SAAS,CAAC;IAC1C,IAAI,CAACM,KAAK,EAAE;IACZ,MAAM,GAAGE,MAAM,EAAEC,QAAQ,EAAEC,IAAI,CAAC,GAAGJ,KAAK;IAExC,MAAMK,QAAQ,GAAGC,QAAQ,CAACJ,MAAM,EAAE,EAAE,CAAC;IAErC,IAAIK,SAAS,GAAGH,IAAI,CAACJ,KAAK,CAACL,SAAS,CAAC;IACrC,IAAIa,IAAI,GAAGD,SAAS,GAAGA,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE;IACxC,IAAIC,IAAI,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,OAAO,CAAC,EAAE;MACxCF,IAAI,GAAGA,IAAI,CAACC,WAAW,CAAC,CAAC,CAACE,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,CAACV,IAAI,CAAC,CAAC;IACzD;IACA,IAAI,CAACO,IAAI,EAAEA,IAAI,GAAG,KAAK,CAAC,CAAC;;IAEzB,IAAII,KAAK,GAAGR,IAAI,CAACO,OAAO,CAAChB,SAAS,EAAE,EAAE,CAAC,CAACM,IAAI,CAAC,CAAC;IAC9CW,KAAK,GAAGA,KAAK,CAACD,OAAO,CAAC,+BAA+B,EAAE,EAAE,CAAC,CAACV,IAAI,CAAC,CAAC;IAEjEL,OAAO,CAACiB,IAAI,CAAC;MACXD,KAAK;MACLP,QAAQ;MACRG;IACF,CAAC,CAAC;EACJ;EAEA,OAAOZ,OAAO;AAChB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}