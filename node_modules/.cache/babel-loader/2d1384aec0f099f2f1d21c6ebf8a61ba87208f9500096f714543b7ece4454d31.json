{"ast":null,"code":"// src/parsers/eternalParser.js\nimport * as pdfjsLib from \"pdfjs-dist/build/pdf\";\nimport pdfWorker from \"pdfjs-dist/build/pdf.worker.entry\";\n\n// Ensure worker is properly configured\npdfjsLib.GlobalWorkerOptions.workerSrc = pdfWorker;\n\n/**\r\n * parsePDFEternal(arrayBuffer)\r\n *  For Eternal Ink style invoices\r\n */\nexport async function parsePDFEternal(arrayBuffer) {\n  try {\n    const pdf = await pdfjsLib.getDocument({\n      data: arrayBuffer\n    }).promise;\n    let allText = \"\";\n    for (let i = 1; i <= pdf.numPages; i++) {\n      const page = await pdf.getPage(i);\n      const content = await page.getTextContent();\n      const pageText = content.items.map(item => item.str).join(\" \");\n      allText += pageText + \"\\n\";\n      console.log(`Page ${i} text:`, pageText); // Debug logging\n    }\n\n    // Prompt for the first item code\n    const firstItemCode = prompt(\"Please enter the first item code from the Eternal invoice (e.g., EPSX-1NB):\");\n    if (!firstItemCode) {\n      throw new Error(\"No first item code provided\");\n    }\n\n    // Split into lines and filter out empty lines and page markers\n    const lines = allText.split('\\n').filter(line => line.trim()).filter(line => !line.match(/^Page \\d+$/));\n    console.log('Initial lines:', lines); // Debug logging\n\n    const results = [];\n    let foundFirstItem = false;\n\n    // Process each page's content\n    for (const pageContent of lines) {\n      // Find the position of the first item code\n      const firstItemIndex = pageContent.indexOf(firstItemCode);\n      if (firstItemIndex === -1) continue;\n\n      // Extract everything from the first item code onwards\n      const itemsSection = pageContent.substring(firstItemIndex);\n\n      // Split the items section into individual items\n      const itemLines = itemsSection.split(/(?=[A-Z][A-Z0-9]+(?:-[0-9]+(?:\\/[0-9]+)?(?:NB)?)?\\s+)/);\n      for (const line of itemLines) {\n        // Skip empty lines and non-item lines\n        if (!line.trim() || line.includes('Page') || line.includes('Discount.')) continue;\n\n        // More flexible pattern matching for Eternal invoice lines\n        const match = line.match(/^([A-Z0-9]+(?:-[0-9]+(?:\\/[0-9]+)?(?:NB)?)?)\\s+([^0-9]+?)\\s+(\\d+(?:,\\d+)?)\\s*(?:[\\d.,]+\\s*[\\d.,]+)?/);\n        if (match) {\n          const [, itemCode, description, qtyStr] = match;\n          const quantity = parseInt(qtyStr.replace(/,/g, ''), 10);\n\n          // Extract size from item code or description with more patterns\n          let size = \"1 ounce\"; // default\n          const sizePatterns = [{\n            pattern: /-1\\/2/,\n            size: \"1/2 ounce\"\n          }, {\n            pattern: /-4/,\n            size: \"4 ounce\"\n          }, {\n            pattern: /-2/,\n            size: \"2 ounce\"\n          }, {\n            pattern: /1\\s*ounce|1oz/i,\n            size: \"1 ounce\"\n          }, {\n            pattern: /1\\/2\\s*ounce|1\\/2oz/i,\n            size: \"1/2 ounce\"\n          }, {\n            pattern: /4\\s*ounce|4oz/i,\n            size: \"4 ounce\"\n          }, {\n            pattern: /2\\s*ounce|2oz/i,\n            size: \"2 ounce\"\n          }];\n          for (const {\n            pattern,\n            size: matchedSize\n          } of sizePatterns) {\n            if (itemCode.match(pattern) || description.match(pattern)) {\n              size = matchedSize;\n              break;\n            }\n          }\n\n          // Clean up color name with more patterns\n          const color = description.replace(/-1 ounce Bottle/i, \"\").replace(/-1\\/2 ounce/i, \"\").replace(/-4 ounce/i, \"\").replace(/-2 ounce/i, \"\").replace(/-1oz/i, \"\").replace(/-1\\/2oz/i, \"\").replace(/-4oz/i, \"\").replace(/-2oz/i, \"\").replace(/\\s*\\([^)]*\\)/g, \"\") // Remove any parenthetical notes\n          .replace(/\\s*Set.*$/i, \"\") // Remove \"Set\" and anything after it\n          .replace(/\\s*Bottle.*$/i, \"\") // Remove \"Bottle\" and anything after it\n          .replace(/\\s*-1 ounce$/i, \"\") // Remove size suffix\n          .replace(/\\s*-1\\/2 ounce$/i, \"\").replace(/\\s*-4 ounce$/i, \"\").replace(/\\s*-2 ounce$/i, \"\").replace(/\\s*\\(.*\\)/g, \"\") // Remove any remaining parenthetical notes\n          .replace(/\\s*\\[.*\\]/g, \"\") // Remove any bracketed notes\n          .trim();\n\n          // Skip discount lines and empty colors\n          if (!itemCode.includes(\"Discount\") && color && !color.match(/^(ounce|Bottle|Bottles)$/i)) {\n            results.push({\n              itemCode,\n              color,\n              quantity,\n              size\n            });\n            console.log('Successfully parsed item:', {\n              itemCode,\n              color,\n              quantity,\n              size\n            }); // Debug logging\n          }\n        } else {\n          console.log('Line did not match pattern:', line); // Debug logging\n        }\n      }\n    }\n    if (results.length === 0) {\n      console.error('No items could be parsed from the PDF');\n      throw new Error('No items could be parsed from the PDF');\n    }\n    console.log('Parsed results:', results); // Debug logging\n    return results;\n  } catch (error) {\n    console.error('Error parsing PDF:', error);\n    throw error;\n  }\n}","map":{"version":3,"names":["pdfjsLib","pdfWorker","GlobalWorkerOptions","workerSrc","parsePDFEternal","arrayBuffer","pdf","getDocument","data","promise","allText","i","numPages","page","getPage","content","getTextContent","pageText","items","map","item","str","join","console","log","firstItemCode","prompt","Error","lines","split","filter","line","trim","match","results","foundFirstItem","pageContent","firstItemIndex","indexOf","itemsSection","substring","itemLines","includes","itemCode","description","qtyStr","quantity","parseInt","replace","size","sizePatterns","pattern","matchedSize","color","push","length","error"],"sources":["C:/Users/hongjie/Desktop/Warehouse Test/src/parsers/eternalParser.js"],"sourcesContent":["// src/parsers/eternalParser.js\r\nimport * as pdfjsLib from \"pdfjs-dist/build/pdf\";\r\nimport pdfWorker from \"pdfjs-dist/build/pdf.worker.entry\";\r\n\r\n// Ensure worker is properly configured\r\npdfjsLib.GlobalWorkerOptions.workerSrc = pdfWorker;\r\n\r\n/**\r\n * parsePDFEternal(arrayBuffer)\r\n *  For Eternal Ink style invoices\r\n */\r\nexport async function parsePDFEternal(arrayBuffer) {\r\n  try {\r\n    const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;\r\n    let allText = \"\";\r\n\r\n    for (let i = 1; i <= pdf.numPages; i++) {\r\n      const page = await pdf.getPage(i);\r\n      const content = await page.getTextContent();\r\n      const pageText = content.items.map((item) => item.str).join(\" \");\r\n      allText += pageText + \"\\n\";\r\n      console.log(`Page ${i} text:`, pageText); // Debug logging\r\n    }\r\n\r\n    // Prompt for the first item code\r\n    const firstItemCode = prompt(\"Please enter the first item code from the Eternal invoice (e.g., EPSX-1NB):\");\r\n    if (!firstItemCode) {\r\n      throw new Error(\"No first item code provided\");\r\n    }\r\n\r\n    // Split into lines and filter out empty lines and page markers\r\n    const lines = allText.split('\\n')\r\n      .filter(line => line.trim())\r\n      .filter(line => !line.match(/^Page \\d+$/));\r\n    \r\n    console.log('Initial lines:', lines); // Debug logging\r\n    \r\n    const results = [];\r\n    let foundFirstItem = false;\r\n    \r\n    // Process each page's content\r\n    for (const pageContent of lines) {\r\n      // Find the position of the first item code\r\n      const firstItemIndex = pageContent.indexOf(firstItemCode);\r\n      if (firstItemIndex === -1) continue;\r\n      \r\n      // Extract everything from the first item code onwards\r\n      const itemsSection = pageContent.substring(firstItemIndex);\r\n      \r\n      // Split the items section into individual items\r\n      const itemLines = itemsSection.split(/(?=[A-Z][A-Z0-9]+(?:-[0-9]+(?:\\/[0-9]+)?(?:NB)?)?\\s+)/);\r\n      \r\n      for (const line of itemLines) {\r\n        // Skip empty lines and non-item lines\r\n        if (!line.trim() || line.includes('Page') || line.includes('Discount.')) continue;\r\n        \r\n        // More flexible pattern matching for Eternal invoice lines\r\n        const match = line.match(/^([A-Z0-9]+(?:-[0-9]+(?:\\/[0-9]+)?(?:NB)?)?)\\s+([^0-9]+?)\\s+(\\d+(?:,\\d+)?)\\s*(?:[\\d.,]+\\s*[\\d.,]+)?/);\r\n        \r\n        if (match) {\r\n          const [, itemCode, description, qtyStr] = match;\r\n          const quantity = parseInt(qtyStr.replace(/,/g, ''), 10);\r\n\r\n          // Extract size from item code or description with more patterns\r\n          let size = \"1 ounce\"; // default\r\n          const sizePatterns = [\r\n            { pattern: /-1\\/2/, size: \"1/2 ounce\" },\r\n            { pattern: /-4/, size: \"4 ounce\" },\r\n            { pattern: /-2/, size: \"2 ounce\" },\r\n            { pattern: /1\\s*ounce|1oz/i, size: \"1 ounce\" },\r\n            { pattern: /1\\/2\\s*ounce|1\\/2oz/i, size: \"1/2 ounce\" },\r\n            { pattern: /4\\s*ounce|4oz/i, size: \"4 ounce\" },\r\n            { pattern: /2\\s*ounce|2oz/i, size: \"2 ounce\" }\r\n          ];\r\n\r\n          for (const { pattern, size: matchedSize } of sizePatterns) {\r\n            if (itemCode.match(pattern) || description.match(pattern)) {\r\n              size = matchedSize;\r\n              break;\r\n            }\r\n          }\r\n\r\n          // Clean up color name with more patterns\r\n          const color = description\r\n            .replace(/-1 ounce Bottle/i, \"\")\r\n            .replace(/-1\\/2 ounce/i, \"\")\r\n            .replace(/-4 ounce/i, \"\")\r\n            .replace(/-2 ounce/i, \"\")\r\n            .replace(/-1oz/i, \"\")\r\n            .replace(/-1\\/2oz/i, \"\")\r\n            .replace(/-4oz/i, \"\")\r\n            .replace(/-2oz/i, \"\")\r\n            .replace(/\\s*\\([^)]*\\)/g, \"\") // Remove any parenthetical notes\r\n            .replace(/\\s*Set.*$/i, \"\") // Remove \"Set\" and anything after it\r\n            .replace(/\\s*Bottle.*$/i, \"\") // Remove \"Bottle\" and anything after it\r\n            .replace(/\\s*-1 ounce$/i, \"\") // Remove size suffix\r\n            .replace(/\\s*-1\\/2 ounce$/i, \"\")\r\n            .replace(/\\s*-4 ounce$/i, \"\")\r\n            .replace(/\\s*-2 ounce$/i, \"\")\r\n            .replace(/\\s*\\(.*\\)/g, \"\") // Remove any remaining parenthetical notes\r\n            .replace(/\\s*\\[.*\\]/g, \"\") // Remove any bracketed notes\r\n            .trim();\r\n\r\n          // Skip discount lines and empty colors\r\n          if (!itemCode.includes(\"Discount\") && color && !color.match(/^(ounce|Bottle|Bottles)$/i)) {\r\n            results.push({\r\n              itemCode,\r\n              color,\r\n              quantity,\r\n              size\r\n            });\r\n            console.log('Successfully parsed item:', { itemCode, color, quantity, size }); // Debug logging\r\n          }\r\n        } else {\r\n          console.log('Line did not match pattern:', line); // Debug logging\r\n        }\r\n      }\r\n    }\r\n\r\n    if (results.length === 0) {\r\n      console.error('No items could be parsed from the PDF');\r\n      throw new Error('No items could be parsed from the PDF');\r\n    }\r\n\r\n    console.log('Parsed results:', results); // Debug logging\r\n    return results;\r\n  } catch (error) {\r\n    console.error('Error parsing PDF:', error);\r\n    throw error;\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}