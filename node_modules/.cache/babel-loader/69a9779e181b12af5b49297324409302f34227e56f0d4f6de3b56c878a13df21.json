{"ast":null,"code":"// src/parsers/worldFamousParser.js\nimport * as pdfjsLib from \"pdfjs-dist/build/pdf\";\nimport pdfWorker from \"pdfjs-dist/build/pdf.worker.entry\";\n\n// Ensure worker is properly configured\npdfjsLib.GlobalWorkerOptions.workerSrc = pdfWorker;\n\n/**\n * parsePDFWorldFamous(arrayBuffer)\n *  For World Famous / Ink Projects invoices\n */\nexport async function parsePDFWorldFamous(arrayBuffer) {\n  try {\n    const pdf = await pdfjsLib.getDocument({\n      data: arrayBuffer\n    }).promise;\n    let allText = \"\";\n    for (let i = 1; i <= pdf.numPages; i++) {\n      const page = await pdf.getPage(i);\n      const content = await page.getTextContent();\n\n      // Sort items by their vertical position (y) and then horizontal position (x)\n      const items = content.items.sort((a, b) => {\n        const yDiff = b.transform[5] - a.transform[5];\n        if (Math.abs(yDiff) < 2) {\n          // If y positions are close, sort by x\n          return a.transform[4] - b.transform[4];\n        }\n        return yDiff;\n      });\n\n      // Group items by their vertical position to form lines\n      let currentY = null;\n      let currentLine = [];\n      const lines = [];\n      for (const item of items) {\n        if (currentY === null || Math.abs(item.transform[5] - currentY) > 2) {\n          if (currentLine.length > 0) {\n            lines.push(currentLine.join(' '));\n          }\n          currentLine = [item.str];\n          currentY = item.transform[5];\n        } else {\n          currentLine.push(item.str);\n        }\n      }\n      if (currentLine.length > 0) {\n        lines.push(currentLine.join(' '));\n      }\n      allText += lines.join('\\n') + '\\n';\n    }\n\n    // Split into lines and filter out empty lines and headers\n    const lines = allText.split('\\n').filter(line => line.trim()).filter(line => !line.match(/^Page \\d+$/)).filter(line => !line.match(/^Sales Order/)).filter(line => !line.match(/^Date/)).filter(line => !line.match(/^Ship To/)).filter(line => !line.match(/^Total/)).filter(line => !line.match(/^Bill To/)).filter(line => !line.match(/^Order Information/)).filter(line => !line.match(/^Qty Fulfilled/)).filter(line => !line.match(/^Qty Invoiced/));\n    console.log('Filtered lines:', lines);\n    const results = [];\n    for (const line of lines) {\n      // Add debug logging to see exact line content with visible spaces\n      console.log('Processing line:', line.replace(/ /g, '·')); // Shows spaces as dots for debugging\n\n      // Match World Famous invoice format\n      // Example: \"0 0 10 WFPWW1 Mt. Fuji Mixing White — World Famous Tattoo Ink — 1oz $9.25 $92.50\"\n      const match = line.match(/^\\s*(\\d+)\\s+(\\d+)\\s+(\\d+)\\s+(\\S+)\\s+(.*?)(?:\\s+\\$[\\d.,]+){1,2}\\s*$/);\n      if (match) {\n        const [, qtyFulfilled, qtyInvoiced, qtyOrdered, itemCode, description] = match;\n        console.log('Matched components:', {\n          qtyFulfilled,\n          qtyInvoiced,\n          qtyOrdered,\n          itemCode,\n          description\n        });\n\n        // Extract size from description\n        let size = \"1oz\"; // default\n        if (description.includes(\"— 1oz\")) {\n          size = \"1oz\";\n        } else if (description.includes(\"— 2oz\")) {\n          size = \"2oz\";\n        } else if (description.includes(\"— 4oz\")) {\n          size = \"4oz\";\n        } else if (description.includes(\"— 1/2oz\")) {\n          size = \"1/2oz\";\n        }\n\n        // Clean up color name by removing common suffixes\n        const color = description.replace(/— World Famous Tattoo Ink/gi, \"\").replace(/— 1oz$/gi, \"\").replace(/— 2oz$/gi, \"\").replace(/— 4oz$/gi, \"\").replace(/— 1\\/2oz$/gi, \"\").replace(/\\s*\\([^)]*\\)/g, \"\") // Remove any parenthetical notes\n        .replace(/\\s*\\[[^\\]]*\\]/g, \"\") // Remove any bracketed notes\n        .replace(/\\s*\\{[^}]*\\}/g, \"\") // Remove any curly braced notes\n        .replace(/\\s*\\$[\\d.,]+/g, \"\") // Remove price\n        .trim();\n\n        // Skip discount lines and empty colors\n        if (!itemCode.includes(\"Discount\") && color && !color.match(/^(ounce|oz|Bottle|Bottles)$/i)) {\n          results.push({\n            itemCode: itemCode.trim(),\n            color,\n            quantity: parseInt(qtyOrdered, 10),\n            size\n          });\n          console.log('Successfully parsed item:', {\n            itemCode,\n            color,\n            quantity: parseInt(qtyOrdered, 10),\n            size\n          });\n        }\n      } else {\n        console.log('Line did not match pattern:', line);\n      }\n    }\n    if (results.length === 0) {\n      console.error('No items could be parsed from the PDF');\n      throw new Error('No items could be parsed from the PDF');\n    }\n    console.log('Parsed results:', results);\n    return results;\n  } catch (error) {\n    console.error('Error parsing PDF:', error);\n    throw error;\n  }\n}","map":{"version":3,"names":["pdfjsLib","pdfWorker","GlobalWorkerOptions","workerSrc","parsePDFWorldFamous","arrayBuffer","pdf","getDocument","data","promise","allText","i","numPages","page","getPage","content","getTextContent","items","sort","a","b","yDiff","transform","Math","abs","currentY","currentLine","lines","item","length","push","join","str","split","filter","line","trim","match","console","log","results","replace","qtyFulfilled","qtyInvoiced","qtyOrdered","itemCode","description","size","includes","color","quantity","parseInt","error","Error"],"sources":["C:/Users/hongjie/Desktop/Warehouse Test/src/parsers/worldFamousParser.js"],"sourcesContent":["// src/parsers/worldFamousParser.js\nimport * as pdfjsLib from \"pdfjs-dist/build/pdf\";\nimport pdfWorker from \"pdfjs-dist/build/pdf.worker.entry\";\n\n// Ensure worker is properly configured\npdfjsLib.GlobalWorkerOptions.workerSrc = pdfWorker;\n\n/**\n * parsePDFWorldFamous(arrayBuffer)\n *  For World Famous / Ink Projects invoices\n */\nexport async function parsePDFWorldFamous(arrayBuffer) {\n  try {\n    const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;\n    let allText = \"\";\n\n    for (let i = 1; i <= pdf.numPages; i++) {\n      const page = await pdf.getPage(i);\n      const content = await page.getTextContent();\n      \n      // Sort items by their vertical position (y) and then horizontal position (x)\n      const items = content.items.sort((a, b) => {\n        const yDiff = b.transform[5] - a.transform[5];\n        if (Math.abs(yDiff) < 2) { // If y positions are close, sort by x\n          return a.transform[4] - b.transform[4];\n        }\n        return yDiff;\n      });\n\n      // Group items by their vertical position to form lines\n      let currentY = null;\n      let currentLine = [];\n      const lines = [];\n\n      for (const item of items) {\n        if (currentY === null || Math.abs(item.transform[5] - currentY) > 2) {\n          if (currentLine.length > 0) {\n            lines.push(currentLine.join(' '));\n          }\n          currentLine = [item.str];\n          currentY = item.transform[5];\n        } else {\n          currentLine.push(item.str);\n        }\n      }\n      if (currentLine.length > 0) {\n        lines.push(currentLine.join(' '));\n      }\n\n      allText += lines.join('\\n') + '\\n';\n    }\n\n    // Split into lines and filter out empty lines and headers\n    const lines = allText.split('\\n')\n      .filter(line => line.trim())\n      .filter(line => !line.match(/^Page \\d+$/))\n      .filter(line => !line.match(/^Sales Order/))\n      .filter(line => !line.match(/^Date/))\n      .filter(line => !line.match(/^Ship To/))\n      .filter(line => !line.match(/^Total/))\n      .filter(line => !line.match(/^Bill To/))\n      .filter(line => !line.match(/^Order Information/))\n      .filter(line => !line.match(/^Qty Fulfilled/))\n      .filter(line => !line.match(/^Qty Invoiced/));\n\n    console.log('Filtered lines:', lines);\n    \n    const results = [];\n    \n    for (const line of lines) {\n      // Add debug logging to see exact line content with visible spaces\n      console.log('Processing line:', line.replace(/ /g, '·')); // Shows spaces as dots for debugging\n      \n      // Match World Famous invoice format\n      // Example: \"0 0 10 WFPWW1 Mt. Fuji Mixing White — World Famous Tattoo Ink — 1oz $9.25 $92.50\"\n      const match = line.match(/^\\s*(\\d+)\\s+(\\d+)\\s+(\\d+)\\s+(\\S+)\\s+(.*?)(?:\\s+\\$[\\d.,]+){1,2}\\s*$/);\n      \n      if (match) {\n        const [, qtyFulfilled, qtyInvoiced, qtyOrdered, itemCode, description] = match;\n        console.log('Matched components:', { qtyFulfilled, qtyInvoiced, qtyOrdered, itemCode, description });\n        \n        // Extract size from description\n        let size = \"1oz\"; // default\n        if (description.includes(\"— 1oz\")) {\n          size = \"1oz\";\n        } else if (description.includes(\"— 2oz\")) {\n          size = \"2oz\";\n        } else if (description.includes(\"— 4oz\")) {\n          size = \"4oz\";\n        } else if (description.includes(\"— 1/2oz\")) {\n          size = \"1/2oz\";\n        }\n\n        // Clean up color name by removing common suffixes\n        const color = description\n          .replace(/— World Famous Tattoo Ink/gi, \"\")\n          .replace(/— 1oz$/gi, \"\")\n          .replace(/— 2oz$/gi, \"\")\n          .replace(/— 4oz$/gi, \"\")\n          .replace(/— 1\\/2oz$/gi, \"\")\n          .replace(/\\s*\\([^)]*\\)/g, \"\") // Remove any parenthetical notes\n          .replace(/\\s*\\[[^\\]]*\\]/g, \"\") // Remove any bracketed notes\n          .replace(/\\s*\\{[^}]*\\}/g, \"\") // Remove any curly braced notes\n          .replace(/\\s*\\$[\\d.,]+/g, \"\") // Remove price\n          .trim();\n\n        // Skip discount lines and empty colors\n        if (!itemCode.includes(\"Discount\") && color && !color.match(/^(ounce|oz|Bottle|Bottles)$/i)) {\n          results.push({\n            itemCode: itemCode.trim(),\n            color,\n            quantity: parseInt(qtyOrdered, 10),\n            size\n          });\n          console.log('Successfully parsed item:', { itemCode, color, quantity: parseInt(qtyOrdered, 10), size });\n        }\n      } else {\n        console.log('Line did not match pattern:', line);\n      }\n    }\n\n    if (results.length === 0) {\n      console.error('No items could be parsed from the PDF');\n      throw new Error('No items could be parsed from the PDF');\n    }\n\n    console.log('Parsed results:', results);\n    return results;\n  } catch (error) {\n    console.error('Error parsing PDF:', error);\n    throw error;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}