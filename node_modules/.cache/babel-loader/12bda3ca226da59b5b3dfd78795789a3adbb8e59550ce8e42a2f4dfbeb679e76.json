{"ast":null,"code":"const WORLD_FAMOUS_HISTORY_KEY = 'worldFamousHistory';\nconst ETERNAL_HISTORY_KEY = 'eternalHistory';\n\n// Action types for better categorization\nexport const ACTION_TYPES = {\n  IMPORT: 'IMPORT',\n  EDIT: 'EDIT',\n  DELETE: 'DELETE',\n  ADJUST: 'ADJUST',\n  CLEAR: 'CLEAR',\n  EXPORT: 'EXPORT',\n  BULK_UPDATE: 'BULK_UPDATE',\n  ADD: 'ADD'\n};\nexport const addToHistory = (type, action, items, metadata = {}) => {\n  const key = type === 'worldFamous' ? WORLD_FAMOUS_HISTORY_KEY : ETERNAL_HISTORY_KEY;\n  const history = getHistory(type);\n  const entry = {\n    action,\n    items,\n    timestamp: new Date().toISOString(),\n    user: metadata.user || 'System',\n    notes: metadata.notes || '',\n    changes: metadata.changes || null,\n    batchId: metadata.batchId || null,\n    location: metadata.location || null,\n    quantity: metadata.quantity || null,\n    previousState: metadata.previousState || null,\n    newState: metadata.newState || null\n  };\n  history.unshift(entry);\n\n  // Keep only last 1000 entries to prevent localStorage from getting too full\n  if (history.length > 1000) {\n    history.pop();\n  }\n  localStorage.setItem(key, JSON.stringify(history));\n  return history;\n};\nexport const getHistory = (type, filters = {}) => {\n  const key = type === 'worldFamous' ? WORLD_FAMOUS_HISTORY_KEY : ETERNAL_HISTORY_KEY;\n  try {\n    const history = localStorage.getItem(key);\n    let parsedHistory = history ? JSON.parse(history) : [];\n\n    // Apply filters if provided\n    if (Object.keys(filters).length > 0) {\n      parsedHistory = parsedHistory.filter(entry => {\n        return Object.entries(filters).every(([key, value]) => {\n          if (key === 'dateRange') {\n            const entryDate = new Date(entry.timestamp);\n            return entryDate >= value.start && entryDate <= value.end;\n          }\n          if (key === 'action') {\n            return entry.action === value;\n          }\n          if (key === 'user') {\n            return entry.user.toLowerCase().includes(value.toLowerCase());\n          }\n          if (key === 'search') {\n            var _entry$notes;\n            const searchStr = value.toLowerCase();\n            return ((_entry$notes = entry.notes) === null || _entry$notes === void 0 ? void 0 : _entry$notes.toLowerCase().includes(searchStr)) || JSON.stringify(entry.items).toLowerCase().includes(searchStr);\n          }\n          return entry[key] === value;\n        });\n      });\n    }\n    return parsedHistory;\n  } catch (error) {\n    console.error('Error reading history:', error);\n    return [];\n  }\n};\nexport const clearHistory = type => {\n  const key = type === 'worldFamous' ? WORLD_FAMOUS_HISTORY_KEY : ETERNAL_HISTORY_KEY;\n  localStorage.setItem(key, JSON.stringify([]));\n};\nexport const exportHistory = (type, format = 'json') => {\n  const history = getHistory(type);\n  if (format === 'json') {\n    return JSON.stringify(history, null, 2);\n  }\n  if (format === 'csv') {\n    const headers = ['Timestamp', 'Action', 'User', 'Notes', 'Items', 'Changes'];\n    const rows = history.map(entry => [new Date(entry.timestamp).toLocaleString(), entry.action, entry.user, entry.notes, JSON.stringify(entry.items), entry.changes ? JSON.stringify(entry.changes) : '']);\n    return [headers, ...rows].map(row => row.map(cell => `\"${cell}\"`).join(',')).join('\\n');\n  }\n  return null;\n};\nexport const getHistoryStats = type => {\n  var _history$;\n  const history = getHistory(type);\n  return {\n    totalEntries: history.length,\n    actionsByType: history.reduce((acc, entry) => {\n      acc[entry.action] = (acc[entry.action] || 0) + 1;\n      return acc;\n    }, {}),\n    lastUpdated: (_history$ = history[0]) === null || _history$ === void 0 ? void 0 : _history$.timestamp,\n    users: [...new Set(history.map(entry => entry.user))],\n    itemsAffected: history.reduce((acc, entry) => {\n      const items = Array.isArray(entry.items) ? entry.items : [entry.items];\n      return acc + items.length;\n    }, 0)\n  };\n};","map":{"version":3,"names":["WORLD_FAMOUS_HISTORY_KEY","ETERNAL_HISTORY_KEY","ACTION_TYPES","IMPORT","EDIT","DELETE","ADJUST","CLEAR","EXPORT","BULK_UPDATE","ADD","addToHistory","type","action","items","metadata","key","history","getHistory","entry","timestamp","Date","toISOString","user","notes","changes","batchId","location","quantity","previousState","newState","unshift","length","pop","localStorage","setItem","JSON","stringify","filters","getItem","parsedHistory","parse","Object","keys","filter","entries","every","value","entryDate","start","end","toLowerCase","includes","_entry$notes","searchStr","error","console","clearHistory","exportHistory","format","headers","rows","map","toLocaleString","row","cell","join","getHistoryStats","_history$","totalEntries","actionsByType","reduce","acc","lastUpdated","users","Set","itemsAffected","Array","isArray"],"sources":["C:/Users/hongjie/Desktop/Warehouse Test/src/services/historyService.js"],"sourcesContent":["const WORLD_FAMOUS_HISTORY_KEY = 'worldFamousHistory';\r\nconst ETERNAL_HISTORY_KEY = 'eternalHistory';\r\n\r\n// Action types for better categorization\r\nexport const ACTION_TYPES = {\r\n  IMPORT: 'IMPORT',\r\n  EDIT: 'EDIT',\r\n  DELETE: 'DELETE',\r\n  ADJUST: 'ADJUST',\r\n  CLEAR: 'CLEAR',\r\n  EXPORT: 'EXPORT',\r\n  BULK_UPDATE: 'BULK_UPDATE',\r\n  ADD: 'ADD'\r\n};\r\n\r\nexport const addToHistory = (type, action, items, metadata = {}) => {\r\n  const key = type === 'worldFamous' ? WORLD_FAMOUS_HISTORY_KEY : ETERNAL_HISTORY_KEY;\r\n  const history = getHistory(type);\r\n  \r\n  const entry = {\r\n    action,\r\n    items,\r\n    timestamp: new Date().toISOString(),\r\n    user: metadata.user || 'System',\r\n    notes: metadata.notes || '',\r\n    changes: metadata.changes || null,\r\n    batchId: metadata.batchId || null,\r\n    location: metadata.location || null,\r\n    quantity: metadata.quantity || null,\r\n    previousState: metadata.previousState || null,\r\n    newState: metadata.newState || null\r\n  };\r\n\r\n  history.unshift(entry);\r\n  \r\n  // Keep only last 1000 entries to prevent localStorage from getting too full\r\n  if (history.length > 1000) {\r\n    history.pop();\r\n  }\r\n\r\n  localStorage.setItem(key, JSON.stringify(history));\r\n  return history;\r\n};\r\n\r\nexport const getHistory = (type, filters = {}) => {\r\n  const key = type === 'worldFamous' ? WORLD_FAMOUS_HISTORY_KEY : ETERNAL_HISTORY_KEY;\r\n  try {\r\n    const history = localStorage.getItem(key);\r\n    let parsedHistory = history ? JSON.parse(history) : [];\r\n    \r\n    // Apply filters if provided\r\n    if (Object.keys(filters).length > 0) {\r\n      parsedHistory = parsedHistory.filter(entry => {\r\n        return Object.entries(filters).every(([key, value]) => {\r\n          if (key === 'dateRange') {\r\n            const entryDate = new Date(entry.timestamp);\r\n            return entryDate >= value.start && entryDate <= value.end;\r\n          }\r\n          if (key === 'action') {\r\n            return entry.action === value;\r\n          }\r\n          if (key === 'user') {\r\n            return entry.user.toLowerCase().includes(value.toLowerCase());\r\n          }\r\n          if (key === 'search') {\r\n            const searchStr = value.toLowerCase();\r\n            return (\r\n              entry.notes?.toLowerCase().includes(searchStr) ||\r\n              JSON.stringify(entry.items).toLowerCase().includes(searchStr)\r\n            );\r\n          }\r\n          return entry[key] === value;\r\n        });\r\n      });\r\n    }\r\n    \r\n    return parsedHistory;\r\n  } catch (error) {\r\n    console.error('Error reading history:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const clearHistory = (type) => {\r\n  const key = type === 'worldFamous' ? WORLD_FAMOUS_HISTORY_KEY : ETERNAL_HISTORY_KEY;\r\n  localStorage.setItem(key, JSON.stringify([]));\r\n};\r\n\r\nexport const exportHistory = (type, format = 'json') => {\r\n  const history = getHistory(type);\r\n  \r\n  if (format === 'json') {\r\n    return JSON.stringify(history, null, 2);\r\n  }\r\n  \r\n  if (format === 'csv') {\r\n    const headers = ['Timestamp', 'Action', 'User', 'Notes', 'Items', 'Changes'];\r\n    const rows = history.map(entry => [\r\n      new Date(entry.timestamp).toLocaleString(),\r\n      entry.action,\r\n      entry.user,\r\n      entry.notes,\r\n      JSON.stringify(entry.items),\r\n      entry.changes ? JSON.stringify(entry.changes) : ''\r\n    ]);\r\n    \r\n    return [headers, ...rows]\r\n      .map(row => row.map(cell => `\"${cell}\"`).join(','))\r\n      .join('\\n');\r\n  }\r\n  \r\n  return null;\r\n};\r\n\r\nexport const getHistoryStats = (type) => {\r\n  const history = getHistory(type);\r\n  \r\n  return {\r\n    totalEntries: history.length,\r\n    actionsByType: history.reduce((acc, entry) => {\r\n      acc[entry.action] = (acc[entry.action] || 0) + 1;\r\n      return acc;\r\n    }, {}),\r\n    lastUpdated: history[0]?.timestamp,\r\n    users: [...new Set(history.map(entry => entry.user))],\r\n    itemsAffected: history.reduce((acc, entry) => {\r\n      const items = Array.isArray(entry.items) ? entry.items : [entry.items];\r\n      return acc + items.length;\r\n    }, 0)\r\n  };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}