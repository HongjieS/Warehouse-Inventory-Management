{"ast":null,"code":"// src/parsers/worldFamousParser.js\nimport * as pdfjsLib from \"pdfjs-dist/build/pdf\";\nimport pdfWorker from \"pdfjs-dist/build/pdf.worker.entry\";\n\n// Ensure worker is properly configured\npdfjsLib.GlobalWorkerOptions.workerSrc = pdfWorker;\n\n/**\n * parsePDFWorldFamous(arrayBuffer)\n *  For World Famous / Ink Projects invoices\n */\nexport async function parsePDFWorldFamous(arrayBuffer) {\n  try {\n    const pdf = await pdfjsLib.getDocument({\n      data: arrayBuffer\n    }).promise;\n    let allText = \"\";\n    for (let i = 1; i <= pdf.numPages; i++) {\n      const page = await pdf.getPage(i);\n      const content = await page.getTextContent();\n\n      // Sort items by their vertical position (y) and then horizontal position (x)\n      const items = content.items.sort((a, b) => {\n        const yDiff = b.transform[5] - a.transform[5];\n        if (Math.abs(yDiff) < 2) {\n          // If y positions are close, sort by x\n          return a.transform[4] - b.transform[4];\n        }\n        return yDiff;\n      });\n\n      // Group items by their vertical position to form lines\n      let currentY = null;\n      let currentLine = [];\n      const lines = [];\n      for (const item of items) {\n        if (currentY === null || Math.abs(item.transform[5] - currentY) > 2) {\n          if (currentLine.length > 0) {\n            lines.push(currentLine.join(' '));\n          }\n          currentLine = [item.str];\n          currentY = item.transform[5];\n        } else {\n          currentLine.push(item.str);\n        }\n      }\n      if (currentLine.length > 0) {\n        lines.push(currentLine.join(' '));\n      }\n      allText += lines.join('\\n') + '\\n';\n    }\n\n    // Split into lines and filter out empty lines and headers\n    const lines = allText.split('\\n').filter(line => line.trim()).filter(line => !line.match(/^Page \\d+$/)).filter(line => !line.match(/^Sales Order/)).filter(line => !line.match(/^Date/)).filter(line => !line.match(/^Ship To/)).filter(line => !line.match(/^Total/)).filter(line => !line.match(/^Bill To/)).filter(line => !line.match(/^Order Information/)).filter(line => !line.match(/^Qty/)).filter(line => !line.match(/^\\d+ of \\d+$/)).filter(line => !line.match(/^Ink Projects/)).filter(line => !line.match(/^[0-9]{8,}$/)).filter(line => !line.match(/^Fort Mill/)).filter(line => !line.match(/^United States/)).filter(line => !line.match(/^Customer/)).filter(line => !line.match(/^Order Notes/)).filter(line => !line.match(/^Shipping/)).filter(line => !line.match(/^VAT/)).filter(line => !line.match(/^Payment/)).filter(line => !line.match(/^Discount/)).filter(line => !line.match(/^Subtotal/)).filter(line => !line.match(/^460A/));\n    console.log('Filtered lines:', lines);\n    const results = [];\n    let currentItem = null;\n    let colorBuffer = [];\n    for (const line of lines) {\n      console.log('Processing line:', line.replace(/ /g, '·'));\n\n      // Try to match the start of an item\n      const itemMatch = line.match(/^\\s*(\\d+)\\s+(\\d+)\\s+(\\d+)\\s+(\\S+)\\s+\\$[\\d.,]+\\s+\\$[\\d.,]+\\s*$/);\n      if (itemMatch) {\n        // If we have a previous item pending, process and save it\n        if (currentItem) {\n          if (colorBuffer.length > 0) {\n            currentItem.color = processColorName(colorBuffer.join(' '));\n            colorBuffer = [];\n          }\n          results.push(currentItem);\n        }\n        const [, qtyFulfilled, qtyInvoiced, qtyOrdered, itemCode] = itemMatch;\n\n        // Determine size from item code\n        let size = '1oz';\n        if (itemCode.includes('1/2')) {\n          size = '1/2oz';\n        } else if (itemCode.match(/[24]$/)) {\n          size = itemCode.match(/([24])$/)[1] + 'oz';\n        } else if (itemCode.match(/[24](?:-|$)/)) {\n          size = itemCode.match(/([24])(?:-|$)/)[1] + 'oz';\n        }\n        currentItem = {\n          itemCode: itemCode.trim(),\n          color: '',\n          quantity: parseInt(qtyOrdered, 10),\n          size\n        };\n      } else if (currentItem) {\n        // Skip lines that are just numbers or prices\n        if (!line.match(/^\\s*[\\d.,]+\\s*$/) && !line.match(/^\\s*\\$[\\d.,]+\\s*$/)) {\n          colorBuffer.push(line);\n\n          // Update size if found in the description\n          if (line.includes('— 1/2oz')) {\n            currentItem.size = '1/2oz';\n          } else if (line.includes('— 2oz')) {\n            currentItem.size = '2oz';\n          } else if (line.includes('— 4oz')) {\n            currentItem.size = '4oz';\n          }\n        }\n      }\n    }\n\n    // Don't forget to add the last item if there is one\n    if (currentItem && colorBuffer.length > 0) {\n      currentItem.color = processColorName(colorBuffer.join(' '));\n      results.push(currentItem);\n    }\n    if (results.length === 0) {\n      console.error('No items could be parsed from the PDF');\n      throw new Error('No items could be parsed from the PDF');\n    }\n\n    // Final cleanup of results\n    results.forEach(item => {\n      // Ensure no empty colors remain\n      if (!item.color) {\n        item.color = getColorFromItemCode(item.itemCode);\n      }\n      // Final cleanup of any remaining page numbers or unwanted text\n      item.color = item.color.replace(/\\s+\\d+\\s+of\\s+\\d+.*$/, '').trim();\n    });\n    console.log('Parsed results:', results);\n    return results;\n  } catch (error) {\n    console.error('Error parsing PDF:', error);\n    throw error;\n  }\n}\nfunction processColorName(colorText) {\n  // First remove any page header/footer information\n  let color = colorText.replace(/\\s+\\d+\\s+of\\s+\\d+(?:\\s+Sales\\s+Order.*)?$/gm, '') // Remove page numbers more aggressively\n  .replace(/\\s+Sales\\s+Order.*$/gm, '').replace(/\\s+Qty\\s+(?:Fulfilled|Invoiced).*$/gm, '').replace(/\\s+\\d+\\/\\d+\\/\\d+.*$/gm, '').replace(/Kuro\\s+Sumi\\s+Tattoo\\s+Ink.*$/gm, '') // Remove Kuro Sumi text\n\n  // Remove World Famous and related text\n  .replace(/— World Famous(?:\\s+Tattoo\\s+)?(?:Ink)?(?:\\s+—)?/gi, '').replace(/World Famous(?:\\s+Tattoo)?(?:\\s+—)?/gi, '').replace(/Tattoo Ink(?:\\s+—)?/gi, '')\n\n  // Remove size indicators\n  .replace(/—\\s*(?:1\\/2|1|2|4|6|12)oz(?:\\s+Bottle)?$/gi, '').replace(/\\s*(?:1\\/2|1|2|4|6|12)oz(?:\\s+Bottle)?$/gi, '').replace(/\\s+Bottle$/gi, '')\n\n  // Remove various suffixes and formatting\n  .replace(/\\s*—\\s*$/g, '').replace(/\\s*—\\s*/g, ' ').replace(/\\s+/g, ' ').replace(/\\s*\\([^)]*\\)/g, '').replace(/\\s*\\[[^\\]]*\\]/g, '').replace(/\\s*\\{[^}]*\\}/g, '').replace(/\\s*\\$[\\d.,]+/g, '').trim();\n\n  // Special case handling for specific product lines\n  if (color.includes('NBK')) {\n    color = color.replace(/Dima\\s+NBK\\s+/, 'Dima NBK ');\n  }\n  if (color.includes('Jay Freestyle')) {\n    color = color.replace(/Jay\\s+Freestyle\\s+/, 'Jay Freestyle ');\n  }\n  if (color.includes('Sarah Miller')) {\n    color = color.replace(/Sarah\\s+Miller\\s+/, 'Sarah Miller ');\n  }\n  if (color.includes('Ryan Smith')) {\n    color = color.replace(/Ryan\\s+Smith\\s+/, 'Ryan Smith ');\n  }\n  return color;\n}\nfunction getColorFromItemCode(itemCode) {\n  // Special cases for specific product lines\n  if (itemCode.startsWith('WFADPP')) {\n    const num = itemCode.match(/\\d+/)[0][0];\n    return `Pancho Pastel #${num}`;\n  }\n  if (itemCode.startsWith('WFP2H')) {\n    return 'Poch 2H';\n  }\n  if (itemCode.startsWith('WFMHS')) {\n    return 'Must-Haves';\n  }\n  if (itemCode.startsWith('WFILL')) {\n    return 'Illuminati Yellow';\n  }\n\n  // Extract color name from item code if no color was found\n  const parts = itemCode.split(/[0-9]/)[0].split('WF');\n  if (parts.length > 1) {\n    return parts[1].split('').map(char => {\n      if (char === char.toUpperCase()) {\n        return ' ' + char;\n      }\n      return char;\n    }).join('').trim();\n  }\n  return itemCode;\n}\nconst parseItem = itemText => {\n  const lines = itemText.split('\\n');\n  const itemCodeMatch = lines[0].match(/Item Code:\\s*([^\\s]+)/);\n  const colorMatch = lines[0].match(/Color:\\s*([^\\n]+)/);\n  const sizeMatch = lines[0].match(/Size:\\s*([^\\n]+)/);\n  const quantityMatch = lines[0].match(/Quantity:\\s*(\\d+)/);\n  if (!itemCodeMatch || !colorMatch || !sizeMatch || !quantityMatch) {\n    return null;\n  }\n  return {\n    itemCode: itemCodeMatch[1].trim(),\n    color: colorMatch[1].trim(),\n    size: sizeMatch[1].trim(),\n    quantity: parseInt(quantityMatch[1])\n  };\n};","map":{"version":3,"names":["pdfjsLib","pdfWorker","GlobalWorkerOptions","workerSrc","parsePDFWorldFamous","arrayBuffer","pdf","getDocument","data","promise","allText","i","numPages","page","getPage","content","getTextContent","items","sort","a","b","yDiff","transform","Math","abs","currentY","currentLine","lines","item","length","push","join","str","split","filter","line","trim","match","console","log","results","currentItem","colorBuffer","replace","itemMatch","color","processColorName","qtyFulfilled","qtyInvoiced","qtyOrdered","itemCode","size","includes","quantity","parseInt","error","Error","forEach","getColorFromItemCode","colorText","startsWith","num","parts","map","char","toUpperCase","parseItem","itemText","itemCodeMatch","colorMatch","sizeMatch","quantityMatch"],"sources":["C:/Users/hongjie/Desktop/Warehouse Test/src/parsers/worldFamousParser.js"],"sourcesContent":["// src/parsers/worldFamousParser.js\nimport * as pdfjsLib from \"pdfjs-dist/build/pdf\";\nimport pdfWorker from \"pdfjs-dist/build/pdf.worker.entry\";\n\n// Ensure worker is properly configured\npdfjsLib.GlobalWorkerOptions.workerSrc = pdfWorker;\n\n/**\n * parsePDFWorldFamous(arrayBuffer)\n *  For World Famous / Ink Projects invoices\n */\nexport async function parsePDFWorldFamous(arrayBuffer) {\n  try {\n    const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;\n    let allText = \"\";\n\n    for (let i = 1; i <= pdf.numPages; i++) {\n      const page = await pdf.getPage(i);\n      const content = await page.getTextContent();\n      \n      // Sort items by their vertical position (y) and then horizontal position (x)\n      const items = content.items.sort((a, b) => {\n        const yDiff = b.transform[5] - a.transform[5];\n        if (Math.abs(yDiff) < 2) { // If y positions are close, sort by x\n          return a.transform[4] - b.transform[4];\n        }\n        return yDiff;\n      });\n\n      // Group items by their vertical position to form lines\n      let currentY = null;\n      let currentLine = [];\n      const lines = [];\n\n      for (const item of items) {\n        if (currentY === null || Math.abs(item.transform[5] - currentY) > 2) {\n          if (currentLine.length > 0) {\n            lines.push(currentLine.join(' '));\n          }\n          currentLine = [item.str];\n          currentY = item.transform[5];\n        } else {\n          currentLine.push(item.str);\n        }\n      }\n      if (currentLine.length > 0) {\n        lines.push(currentLine.join(' '));\n      }\n\n      allText += lines.join('\\n') + '\\n';\n    }\n\n    // Split into lines and filter out empty lines and headers\n    const lines = allText.split('\\n')\n      .filter(line => line.trim())\n      .filter(line => !line.match(/^Page \\d+$/))\n      .filter(line => !line.match(/^Sales Order/))\n      .filter(line => !line.match(/^Date/))\n      .filter(line => !line.match(/^Ship To/))\n      .filter(line => !line.match(/^Total/))\n      .filter(line => !line.match(/^Bill To/))\n      .filter(line => !line.match(/^Order Information/))\n      .filter(line => !line.match(/^Qty/))\n      .filter(line => !line.match(/^\\d+ of \\d+$/))\n      .filter(line => !line.match(/^Ink Projects/))\n      .filter(line => !line.match(/^[0-9]{8,}$/))\n      .filter(line => !line.match(/^Fort Mill/))\n      .filter(line => !line.match(/^United States/))\n      .filter(line => !line.match(/^Customer/))\n      .filter(line => !line.match(/^Order Notes/))\n      .filter(line => !line.match(/^Shipping/))\n      .filter(line => !line.match(/^VAT/))\n      .filter(line => !line.match(/^Payment/))\n      .filter(line => !line.match(/^Discount/))\n      .filter(line => !line.match(/^Subtotal/))\n      .filter(line => !line.match(/^460A/));\n\n    console.log('Filtered lines:', lines);\n    \n    const results = [];\n    let currentItem = null;\n    let colorBuffer = [];\n    \n    for (const line of lines) {\n      console.log('Processing line:', line.replace(/ /g, '·'));\n      \n      // Try to match the start of an item\n      const itemMatch = line.match(/^\\s*(\\d+)\\s+(\\d+)\\s+(\\d+)\\s+(\\S+)\\s+\\$[\\d.,]+\\s+\\$[\\d.,]+\\s*$/);\n      \n      if (itemMatch) {\n        // If we have a previous item pending, process and save it\n        if (currentItem) {\n          if (colorBuffer.length > 0) {\n            currentItem.color = processColorName(colorBuffer.join(' '));\n            colorBuffer = [];\n          }\n          results.push(currentItem);\n        }\n        \n        const [, qtyFulfilled, qtyInvoiced, qtyOrdered, itemCode] = itemMatch;\n        \n        // Determine size from item code\n        let size = '1oz';\n        if (itemCode.includes('1/2')) {\n          size = '1/2oz';\n        } else if (itemCode.match(/[24]$/)) {\n          size = itemCode.match(/([24])$/)[1] + 'oz';\n        } else if (itemCode.match(/[24](?:-|$)/)) {\n          size = itemCode.match(/([24])(?:-|$)/)[1] + 'oz';\n        }\n        \n        currentItem = {\n          itemCode: itemCode.trim(),\n          color: '',\n          quantity: parseInt(qtyOrdered, 10),\n          size\n        };\n      } else if (currentItem) {\n        // Skip lines that are just numbers or prices\n        if (!line.match(/^\\s*[\\d.,]+\\s*$/) && !line.match(/^\\s*\\$[\\d.,]+\\s*$/)) {\n          colorBuffer.push(line);\n          \n          // Update size if found in the description\n          if (line.includes('— 1/2oz')) {\n            currentItem.size = '1/2oz';\n          } else if (line.includes('— 2oz')) {\n            currentItem.size = '2oz';\n          } else if (line.includes('— 4oz')) {\n            currentItem.size = '4oz';\n          }\n        }\n      }\n    }\n\n    // Don't forget to add the last item if there is one\n    if (currentItem && colorBuffer.length > 0) {\n      currentItem.color = processColorName(colorBuffer.join(' '));\n      results.push(currentItem);\n    }\n\n    if (results.length === 0) {\n      console.error('No items could be parsed from the PDF');\n      throw new Error('No items could be parsed from the PDF');\n    }\n\n    // Final cleanup of results\n    results.forEach(item => {\n      // Ensure no empty colors remain\n      if (!item.color) {\n        item.color = getColorFromItemCode(item.itemCode);\n      }\n      // Final cleanup of any remaining page numbers or unwanted text\n      item.color = item.color.replace(/\\s+\\d+\\s+of\\s+\\d+.*$/, '').trim();\n    });\n\n    console.log('Parsed results:', results);\n    return results;\n  } catch (error) {\n    console.error('Error parsing PDF:', error);\n    throw error;\n  }\n}\n\nfunction processColorName(colorText) {\n  // First remove any page header/footer information\n  let color = colorText\n    .replace(/\\s+\\d+\\s+of\\s+\\d+(?:\\s+Sales\\s+Order.*)?$/gm, '') // Remove page numbers more aggressively\n    .replace(/\\s+Sales\\s+Order.*$/gm, '')\n    .replace(/\\s+Qty\\s+(?:Fulfilled|Invoiced).*$/gm, '')\n    .replace(/\\s+\\d+\\/\\d+\\/\\d+.*$/gm, '')\n    .replace(/Kuro\\s+Sumi\\s+Tattoo\\s+Ink.*$/gm, '') // Remove Kuro Sumi text\n    \n    // Remove World Famous and related text\n    .replace(/— World Famous(?:\\s+Tattoo\\s+)?(?:Ink)?(?:\\s+—)?/gi, '')\n    .replace(/World Famous(?:\\s+Tattoo)?(?:\\s+—)?/gi, '')\n    .replace(/Tattoo Ink(?:\\s+—)?/gi, '')\n    \n    // Remove size indicators\n    .replace(/—\\s*(?:1\\/2|1|2|4|6|12)oz(?:\\s+Bottle)?$/gi, '')\n    .replace(/\\s*(?:1\\/2|1|2|4|6|12)oz(?:\\s+Bottle)?$/gi, '')\n    .replace(/\\s+Bottle$/gi, '')\n    \n    // Remove various suffixes and formatting\n    .replace(/\\s*—\\s*$/g, '')\n    .replace(/\\s*—\\s*/g, ' ')\n    .replace(/\\s+/g, ' ')\n    .replace(/\\s*\\([^)]*\\)/g, '')\n    .replace(/\\s*\\[[^\\]]*\\]/g, '')\n    .replace(/\\s*\\{[^}]*\\}/g, '')\n    .replace(/\\s*\\$[\\d.,]+/g, '')\n    .trim();\n\n  // Special case handling for specific product lines\n  if (color.includes('NBK')) {\n    color = color.replace(/Dima\\s+NBK\\s+/, 'Dima NBK ');\n  }\n  if (color.includes('Jay Freestyle')) {\n    color = color.replace(/Jay\\s+Freestyle\\s+/, 'Jay Freestyle ');\n  }\n  if (color.includes('Sarah Miller')) {\n    color = color.replace(/Sarah\\s+Miller\\s+/, 'Sarah Miller ');\n  }\n  if (color.includes('Ryan Smith')) {\n    color = color.replace(/Ryan\\s+Smith\\s+/, 'Ryan Smith ');\n  }\n\n  return color;\n}\n\nfunction getColorFromItemCode(itemCode) {\n  // Special cases for specific product lines\n  if (itemCode.startsWith('WFADPP')) {\n    const num = itemCode.match(/\\d+/)[0][0];\n    return `Pancho Pastel #${num}`;\n  }\n  \n  if (itemCode.startsWith('WFP2H')) {\n    return 'Poch 2H';\n  }\n  \n  if (itemCode.startsWith('WFMHS')) {\n    return 'Must-Haves';\n  }\n  \n  if (itemCode.startsWith('WFILL')) {\n    return 'Illuminati Yellow';\n  }\n  \n  // Extract color name from item code if no color was found\n  const parts = itemCode.split(/[0-9]/)[0].split('WF');\n  if (parts.length > 1) {\n    return parts[1].split('').map(char => {\n      if (char === char.toUpperCase()) {\n        return ' ' + char;\n      }\n      return char;\n    }).join('').trim();\n  }\n  return itemCode;\n}\n\nconst parseItem = (itemText) => {\n  const lines = itemText.split('\\n');\n  const itemCodeMatch = lines[0].match(/Item Code:\\s*([^\\s]+)/);\n  const colorMatch = lines[0].match(/Color:\\s*([^\\n]+)/);\n  const sizeMatch = lines[0].match(/Size:\\s*([^\\n]+)/);\n  const quantityMatch = lines[0].match(/Quantity:\\s*(\\d+)/);\n\n  if (!itemCodeMatch || !colorMatch || !sizeMatch || !quantityMatch) {\n    return null;\n  }\n\n  return {\n    itemCode: itemCodeMatch[1].trim(),\n    color: colorMatch[1].trim(),\n    size: sizeMatch[1].trim(),\n    quantity: parseInt(quantityMatch[1]),\n  };\n};\n"],"mappings":"AAAA;AACA,OAAO,KAAKA,QAAQ,MAAM,sBAAsB;AAChD,OAAOC,SAAS,MAAM,mCAAmC;;AAEzD;AACAD,QAAQ,CAACE,mBAAmB,CAACC,SAAS,GAAGF,SAAS;;AAElD;AACA;AACA;AACA;AACA,OAAO,eAAeG,mBAAmBA,CAACC,WAAW,EAAE;EACrD,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMN,QAAQ,CAACO,WAAW,CAAC;MAAEC,IAAI,EAAEH;IAAY,CAAC,CAAC,CAACI,OAAO;IACrE,IAAIC,OAAO,GAAG,EAAE;IAEhB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIL,GAAG,CAACM,QAAQ,EAAED,CAAC,EAAE,EAAE;MACtC,MAAME,IAAI,GAAG,MAAMP,GAAG,CAACQ,OAAO,CAACH,CAAC,CAAC;MACjC,MAAMI,OAAO,GAAG,MAAMF,IAAI,CAACG,cAAc,CAAC,CAAC;;MAE3C;MACA,MAAMC,KAAK,GAAGF,OAAO,CAACE,KAAK,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;QACzC,MAAMC,KAAK,GAAGD,CAAC,CAACE,SAAS,CAAC,CAAC,CAAC,GAAGH,CAAC,CAACG,SAAS,CAAC,CAAC,CAAC;QAC7C,IAAIC,IAAI,CAACC,GAAG,CAACH,KAAK,CAAC,GAAG,CAAC,EAAE;UAAE;UACzB,OAAOF,CAAC,CAACG,SAAS,CAAC,CAAC,CAAC,GAAGF,CAAC,CAACE,SAAS,CAAC,CAAC,CAAC;QACxC;QACA,OAAOD,KAAK;MACd,CAAC,CAAC;;MAEF;MACA,IAAII,QAAQ,GAAG,IAAI;MACnB,IAAIC,WAAW,GAAG,EAAE;MACpB,MAAMC,KAAK,GAAG,EAAE;MAEhB,KAAK,MAAMC,IAAI,IAAIX,KAAK,EAAE;QACxB,IAAIQ,QAAQ,KAAK,IAAI,IAAIF,IAAI,CAACC,GAAG,CAACI,IAAI,CAACN,SAAS,CAAC,CAAC,CAAC,GAAGG,QAAQ,CAAC,GAAG,CAAC,EAAE;UACnE,IAAIC,WAAW,CAACG,MAAM,GAAG,CAAC,EAAE;YAC1BF,KAAK,CAACG,IAAI,CAACJ,WAAW,CAACK,IAAI,CAAC,GAAG,CAAC,CAAC;UACnC;UACAL,WAAW,GAAG,CAACE,IAAI,CAACI,GAAG,CAAC;UACxBP,QAAQ,GAAGG,IAAI,CAACN,SAAS,CAAC,CAAC,CAAC;QAC9B,CAAC,MAAM;UACLI,WAAW,CAACI,IAAI,CAACF,IAAI,CAACI,GAAG,CAAC;QAC5B;MACF;MACA,IAAIN,WAAW,CAACG,MAAM,GAAG,CAAC,EAAE;QAC1BF,KAAK,CAACG,IAAI,CAACJ,WAAW,CAACK,IAAI,CAAC,GAAG,CAAC,CAAC;MACnC;MAEArB,OAAO,IAAIiB,KAAK,CAACI,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI;IACpC;;IAEA;IACA,MAAMJ,KAAK,GAAGjB,OAAO,CAACuB,KAAK,CAAC,IAAI,CAAC,CAC9BC,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC,CAC3BF,MAAM,CAACC,IAAI,IAAI,CAACA,IAAI,CAACE,KAAK,CAAC,YAAY,CAAC,CAAC,CACzCH,MAAM,CAACC,IAAI,IAAI,CAACA,IAAI,CAACE,KAAK,CAAC,cAAc,CAAC,CAAC,CAC3CH,MAAM,CAACC,IAAI,IAAI,CAACA,IAAI,CAACE,KAAK,CAAC,OAAO,CAAC,CAAC,CACpCH,MAAM,CAACC,IAAI,IAAI,CAACA,IAAI,CAACE,KAAK,CAAC,UAAU,CAAC,CAAC,CACvCH,MAAM,CAACC,IAAI,IAAI,CAACA,IAAI,CAACE,KAAK,CAAC,QAAQ,CAAC,CAAC,CACrCH,MAAM,CAACC,IAAI,IAAI,CAACA,IAAI,CAACE,KAAK,CAAC,UAAU,CAAC,CAAC,CACvCH,MAAM,CAACC,IAAI,IAAI,CAACA,IAAI,CAACE,KAAK,CAAC,oBAAoB,CAAC,CAAC,CACjDH,MAAM,CAACC,IAAI,IAAI,CAACA,IAAI,CAACE,KAAK,CAAC,MAAM,CAAC,CAAC,CACnCH,MAAM,CAACC,IAAI,IAAI,CAACA,IAAI,CAACE,KAAK,CAAC,cAAc,CAAC,CAAC,CAC3CH,MAAM,CAACC,IAAI,IAAI,CAACA,IAAI,CAACE,KAAK,CAAC,eAAe,CAAC,CAAC,CAC5CH,MAAM,CAACC,IAAI,IAAI,CAACA,IAAI,CAACE,KAAK,CAAC,aAAa,CAAC,CAAC,CAC1CH,MAAM,CAACC,IAAI,IAAI,CAACA,IAAI,CAACE,KAAK,CAAC,YAAY,CAAC,CAAC,CACzCH,MAAM,CAACC,IAAI,IAAI,CAACA,IAAI,CAACE,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAC7CH,MAAM,CAACC,IAAI,IAAI,CAACA,IAAI,CAACE,KAAK,CAAC,WAAW,CAAC,CAAC,CACxCH,MAAM,CAACC,IAAI,IAAI,CAACA,IAAI,CAACE,KAAK,CAAC,cAAc,CAAC,CAAC,CAC3CH,MAAM,CAACC,IAAI,IAAI,CAACA,IAAI,CAACE,KAAK,CAAC,WAAW,CAAC,CAAC,CACxCH,MAAM,CAACC,IAAI,IAAI,CAACA,IAAI,CAACE,KAAK,CAAC,MAAM,CAAC,CAAC,CACnCH,MAAM,CAACC,IAAI,IAAI,CAACA,IAAI,CAACE,KAAK,CAAC,UAAU,CAAC,CAAC,CACvCH,MAAM,CAACC,IAAI,IAAI,CAACA,IAAI,CAACE,KAAK,CAAC,WAAW,CAAC,CAAC,CACxCH,MAAM,CAACC,IAAI,IAAI,CAACA,IAAI,CAACE,KAAK,CAAC,WAAW,CAAC,CAAC,CACxCH,MAAM,CAACC,IAAI,IAAI,CAACA,IAAI,CAACE,KAAK,CAAC,OAAO,CAAC,CAAC;IAEvCC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEZ,KAAK,CAAC;IAErC,MAAMa,OAAO,GAAG,EAAE;IAClB,IAAIC,WAAW,GAAG,IAAI;IACtB,IAAIC,WAAW,GAAG,EAAE;IAEpB,KAAK,MAAMP,IAAI,IAAIR,KAAK,EAAE;MACxBW,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEJ,IAAI,CAACQ,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;;MAExD;MACA,MAAMC,SAAS,GAAGT,IAAI,CAACE,KAAK,CAAC,+DAA+D,CAAC;MAE7F,IAAIO,SAAS,EAAE;QACb;QACA,IAAIH,WAAW,EAAE;UACf,IAAIC,WAAW,CAACb,MAAM,GAAG,CAAC,EAAE;YAC1BY,WAAW,CAACI,KAAK,GAAGC,gBAAgB,CAACJ,WAAW,CAACX,IAAI,CAAC,GAAG,CAAC,CAAC;YAC3DW,WAAW,GAAG,EAAE;UAClB;UACAF,OAAO,CAACV,IAAI,CAACW,WAAW,CAAC;QAC3B;QAEA,MAAM,GAAGM,YAAY,EAAEC,WAAW,EAAEC,UAAU,EAAEC,QAAQ,CAAC,GAAGN,SAAS;;QAErE;QACA,IAAIO,IAAI,GAAG,KAAK;QAChB,IAAID,QAAQ,CAACE,QAAQ,CAAC,KAAK,CAAC,EAAE;UAC5BD,IAAI,GAAG,OAAO;QAChB,CAAC,MAAM,IAAID,QAAQ,CAACb,KAAK,CAAC,OAAO,CAAC,EAAE;UAClCc,IAAI,GAAGD,QAAQ,CAACb,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI;QAC5C,CAAC,MAAM,IAAIa,QAAQ,CAACb,KAAK,CAAC,aAAa,CAAC,EAAE;UACxCc,IAAI,GAAGD,QAAQ,CAACb,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI;QAClD;QAEAI,WAAW,GAAG;UACZS,QAAQ,EAAEA,QAAQ,CAACd,IAAI,CAAC,CAAC;UACzBS,KAAK,EAAE,EAAE;UACTQ,QAAQ,EAAEC,QAAQ,CAACL,UAAU,EAAE,EAAE,CAAC;UAClCE;QACF,CAAC;MACH,CAAC,MAAM,IAAIV,WAAW,EAAE;QACtB;QACA,IAAI,CAACN,IAAI,CAACE,KAAK,CAAC,iBAAiB,CAAC,IAAI,CAACF,IAAI,CAACE,KAAK,CAAC,mBAAmB,CAAC,EAAE;UACtEK,WAAW,CAACZ,IAAI,CAACK,IAAI,CAAC;;UAEtB;UACA,IAAIA,IAAI,CAACiB,QAAQ,CAAC,SAAS,CAAC,EAAE;YAC5BX,WAAW,CAACU,IAAI,GAAG,OAAO;UAC5B,CAAC,MAAM,IAAIhB,IAAI,CAACiB,QAAQ,CAAC,OAAO,CAAC,EAAE;YACjCX,WAAW,CAACU,IAAI,GAAG,KAAK;UAC1B,CAAC,MAAM,IAAIhB,IAAI,CAACiB,QAAQ,CAAC,OAAO,CAAC,EAAE;YACjCX,WAAW,CAACU,IAAI,GAAG,KAAK;UAC1B;QACF;MACF;IACF;;IAEA;IACA,IAAIV,WAAW,IAAIC,WAAW,CAACb,MAAM,GAAG,CAAC,EAAE;MACzCY,WAAW,CAACI,KAAK,GAAGC,gBAAgB,CAACJ,WAAW,CAACX,IAAI,CAAC,GAAG,CAAC,CAAC;MAC3DS,OAAO,CAACV,IAAI,CAACW,WAAW,CAAC;IAC3B;IAEA,IAAID,OAAO,CAACX,MAAM,KAAK,CAAC,EAAE;MACxBS,OAAO,CAACiB,KAAK,CAAC,uCAAuC,CAAC;MACtD,MAAM,IAAIC,KAAK,CAAC,uCAAuC,CAAC;IAC1D;;IAEA;IACAhB,OAAO,CAACiB,OAAO,CAAC7B,IAAI,IAAI;MACtB;MACA,IAAI,CAACA,IAAI,CAACiB,KAAK,EAAE;QACfjB,IAAI,CAACiB,KAAK,GAAGa,oBAAoB,CAAC9B,IAAI,CAACsB,QAAQ,CAAC;MAClD;MACA;MACAtB,IAAI,CAACiB,KAAK,GAAGjB,IAAI,CAACiB,KAAK,CAACF,OAAO,CAAC,sBAAsB,EAAE,EAAE,CAAC,CAACP,IAAI,CAAC,CAAC;IACpE,CAAC,CAAC;IAEFE,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEC,OAAO,CAAC;IACvC,OAAOA,OAAO;EAChB,CAAC,CAAC,OAAOe,KAAK,EAAE;IACdjB,OAAO,CAACiB,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC1C,MAAMA,KAAK;EACb;AACF;AAEA,SAAST,gBAAgBA,CAACa,SAAS,EAAE;EACnC;EACA,IAAId,KAAK,GAAGc,SAAS,CAClBhB,OAAO,CAAC,6CAA6C,EAAE,EAAE,CAAC,CAAC;EAAA,CAC3DA,OAAO,CAAC,uBAAuB,EAAE,EAAE,CAAC,CACpCA,OAAO,CAAC,sCAAsC,EAAE,EAAE,CAAC,CACnDA,OAAO,CAAC,uBAAuB,EAAE,EAAE,CAAC,CACpCA,OAAO,CAAC,iCAAiC,EAAE,EAAE,CAAC,CAAC;;EAEhD;EAAA,CACCA,OAAO,CAAC,oDAAoD,EAAE,EAAE,CAAC,CACjEA,OAAO,CAAC,uCAAuC,EAAE,EAAE,CAAC,CACpDA,OAAO,CAAC,uBAAuB,EAAE,EAAE;;EAEpC;EAAA,CACCA,OAAO,CAAC,4CAA4C,EAAE,EAAE,CAAC,CACzDA,OAAO,CAAC,2CAA2C,EAAE,EAAE,CAAC,CACxDA,OAAO,CAAC,cAAc,EAAE,EAAE;;EAE3B;EAAA,CACCA,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CACxBA,OAAO,CAAC,UAAU,EAAE,GAAG,CAAC,CACxBA,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CACpBA,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC,CAC5BA,OAAO,CAAC,gBAAgB,EAAE,EAAE,CAAC,CAC7BA,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC,CAC5BA,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC,CAC5BP,IAAI,CAAC,CAAC;;EAET;EACA,IAAIS,KAAK,CAACO,QAAQ,CAAC,KAAK,CAAC,EAAE;IACzBP,KAAK,GAAGA,KAAK,CAACF,OAAO,CAAC,eAAe,EAAE,WAAW,CAAC;EACrD;EACA,IAAIE,KAAK,CAACO,QAAQ,CAAC,eAAe,CAAC,EAAE;IACnCP,KAAK,GAAGA,KAAK,CAACF,OAAO,CAAC,oBAAoB,EAAE,gBAAgB,CAAC;EAC/D;EACA,IAAIE,KAAK,CAACO,QAAQ,CAAC,cAAc,CAAC,EAAE;IAClCP,KAAK,GAAGA,KAAK,CAACF,OAAO,CAAC,mBAAmB,EAAE,eAAe,CAAC;EAC7D;EACA,IAAIE,KAAK,CAACO,QAAQ,CAAC,YAAY,CAAC,EAAE;IAChCP,KAAK,GAAGA,KAAK,CAACF,OAAO,CAAC,iBAAiB,EAAE,aAAa,CAAC;EACzD;EAEA,OAAOE,KAAK;AACd;AAEA,SAASa,oBAAoBA,CAACR,QAAQ,EAAE;EACtC;EACA,IAAIA,QAAQ,CAACU,UAAU,CAAC,QAAQ,CAAC,EAAE;IACjC,MAAMC,GAAG,GAAGX,QAAQ,CAACb,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACvC,OAAO,kBAAkBwB,GAAG,EAAE;EAChC;EAEA,IAAIX,QAAQ,CAACU,UAAU,CAAC,OAAO,CAAC,EAAE;IAChC,OAAO,SAAS;EAClB;EAEA,IAAIV,QAAQ,CAACU,UAAU,CAAC,OAAO,CAAC,EAAE;IAChC,OAAO,YAAY;EACrB;EAEA,IAAIV,QAAQ,CAACU,UAAU,CAAC,OAAO,CAAC,EAAE;IAChC,OAAO,mBAAmB;EAC5B;;EAEA;EACA,MAAME,KAAK,GAAGZ,QAAQ,CAACjB,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,IAAI,CAAC;EACpD,IAAI6B,KAAK,CAACjC,MAAM,GAAG,CAAC,EAAE;IACpB,OAAOiC,KAAK,CAAC,CAAC,CAAC,CAAC7B,KAAK,CAAC,EAAE,CAAC,CAAC8B,GAAG,CAACC,IAAI,IAAI;MACpC,IAAIA,IAAI,KAAKA,IAAI,CAACC,WAAW,CAAC,CAAC,EAAE;QAC/B,OAAO,GAAG,GAAGD,IAAI;MACnB;MACA,OAAOA,IAAI;IACb,CAAC,CAAC,CAACjC,IAAI,CAAC,EAAE,CAAC,CAACK,IAAI,CAAC,CAAC;EACpB;EACA,OAAOc,QAAQ;AACjB;AAEA,MAAMgB,SAAS,GAAIC,QAAQ,IAAK;EAC9B,MAAMxC,KAAK,GAAGwC,QAAQ,CAAClC,KAAK,CAAC,IAAI,CAAC;EAClC,MAAMmC,aAAa,GAAGzC,KAAK,CAAC,CAAC,CAAC,CAACU,KAAK,CAAC,uBAAuB,CAAC;EAC7D,MAAMgC,UAAU,GAAG1C,KAAK,CAAC,CAAC,CAAC,CAACU,KAAK,CAAC,mBAAmB,CAAC;EACtD,MAAMiC,SAAS,GAAG3C,KAAK,CAAC,CAAC,CAAC,CAACU,KAAK,CAAC,kBAAkB,CAAC;EACpD,MAAMkC,aAAa,GAAG5C,KAAK,CAAC,CAAC,CAAC,CAACU,KAAK,CAAC,mBAAmB,CAAC;EAEzD,IAAI,CAAC+B,aAAa,IAAI,CAACC,UAAU,IAAI,CAACC,SAAS,IAAI,CAACC,aAAa,EAAE;IACjE,OAAO,IAAI;EACb;EAEA,OAAO;IACLrB,QAAQ,EAAEkB,aAAa,CAAC,CAAC,CAAC,CAAChC,IAAI,CAAC,CAAC;IACjCS,KAAK,EAAEwB,UAAU,CAAC,CAAC,CAAC,CAACjC,IAAI,CAAC,CAAC;IAC3Be,IAAI,EAAEmB,SAAS,CAAC,CAAC,CAAC,CAAClC,IAAI,CAAC,CAAC;IACzBiB,QAAQ,EAAEC,QAAQ,CAACiB,aAAa,CAAC,CAAC,CAAC;EACrC,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}