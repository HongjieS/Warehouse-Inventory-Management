{"ast":null,"code":"// src/parsers/eternalParser.js\nimport * as pdfjsLib from \"pdfjs-dist/build/pdf\";\nimport pdfWorker from \"pdfjs-dist/build/pdf.worker.entry\";\n\n// Ensure worker is properly configured\npdfjsLib.GlobalWorkerOptions.workerSrc = pdfWorker;\n\n/**\r\n * parsePDFEternal(arrayBuffer)\r\n *  For Eternal Ink style invoices\r\n */\nexport async function parsePDFEternal(arrayBuffer) {\n  try {\n    const pdf = await pdfjsLib.getDocument({\n      data: arrayBuffer\n    }).promise;\n    let allText = \"\";\n    for (let i = 1; i <= pdf.numPages; i++) {\n      const page = await pdf.getPage(i);\n      const content = await page.getTextContent();\n\n      // Sort items by their vertical position (y) and then horizontal position (x)\n      const items = content.items.sort((a, b) => {\n        const yDiff = b.transform[5] - a.transform[5];\n        if (Math.abs(yDiff) < 2) {\n          // If y positions are close, sort by x\n          return a.transform[4] - b.transform[4];\n        }\n        return yDiff;\n      });\n\n      // Group items by their vertical position to form lines\n      let currentY = null;\n      let currentLine = [];\n      const lines = [];\n      for (const item of items) {\n        if (currentY === null || Math.abs(item.transform[5] - currentY) > 2) {\n          if (currentLine.length > 0) {\n            lines.push(currentLine.join(' '));\n          }\n          currentLine = [item.str];\n          currentY = item.transform[5];\n        } else {\n          currentLine.push(item.str);\n        }\n      }\n      if (currentLine.length > 0) {\n        lines.push(currentLine.join(' '));\n      }\n      allText += lines.join('\\n') + '\\n';\n    }\n\n    // Split into lines and filter out empty lines and headers\n    const lines = allText.split('\\n').filter(line => line.trim()).filter(line => !line.match(/^Page \\d+$/)).filter(line => !line.match(/^(Item|Description|Ordered|Rate|Amount)$/)).filter(line => !line.match(/^Total$/));\n    console.log('Filtered lines:', lines); // Debug logging\n\n    const results = [];\n    for (const line of lines) {\n      // Add debug logging to see exact line content with visible spaces\n      console.log('Processing line:', line.replace(/ /g, '·')); // Shows spaces as dots for debugging\n\n      // Match the exact invoice format: Item Code, Description, Quantity, Rate, Amount\n      // Even more flexible pattern that allows for variable spacing and optional spaces around numbers\n      const match = line.match(/^\\s*([A-Z0-9]+(?:-[0-9]+(?:\\/[0-9]+)?(?:NB)?)?)\\s+(.*?)\\s+(\\d+(?:,\\d+)?)\\s+[\\d,.]+\\s+[\\d,.]+\\s*$/);\n      if (match) {\n        const [, itemCode, description, qtyStr] = match;\n        console.log('Matched components:', {\n          itemCode,\n          description,\n          qtyStr\n        }); // Debug matched components\n        const quantity = parseInt(qtyStr.replace(/,/g, ''), 10);\n\n        // Extract size from item code or description\n        let size = \"1 ounce\"; // default\n        if (itemCode.includes(\"-1/2\") || description.includes(\"1/2 ounce\")) {\n          size = \"1/2 ounce\";\n        } else if (itemCode.includes(\"-4\") || description.includes(\"4 ounce\")) {\n          size = \"4 ounce\";\n        } else if (itemCode.includes(\"-2\") || description.includes(\"2 ounce\")) {\n          size = \"2 ounce\";\n        }\n\n        // Clean up color name\n        const color = description.replace(/-1 ounce Bottle/i, \"\").replace(/-1\\/2 ounce/i, \"\").replace(/-4 ounce/i, \"\").replace(/-2 ounce/i, \"\").replace(/\\s*Bottle.*$/i, \"\") // Remove \"Bottle\" and anything after it\n        .replace(/\\s*Set.*$/i, \"\") // Remove \"Set\" and anything after it\n        .trim();\n\n        // Skip discount lines and empty colors\n        if (!itemCode.includes(\"Discount\") && color && !color.match(/^(ounce|Bottle|Bottles)$/i)) {\n          results.push({\n            itemCode,\n            color,\n            quantity,\n            size\n          });\n          console.log('Successfully parsed item:', {\n            itemCode,\n            color,\n            quantity,\n            size\n          }); // Debug logging\n        }\n      } else {\n        console.log('Line did not match pattern:', line); // Debug logging\n      }\n    }\n    if (results.length === 0) {\n      console.error('No items could be parsed from the PDF');\n      throw new Error('No items could be parsed from the PDF');\n    }\n    console.log('Parsed results:', results); // Debug logging\n    return results;\n  } catch (error) {\n    console.error('Error parsing PDF:', error);\n    throw error;\n  }\n}","map":{"version":3,"names":["pdfjsLib","pdfWorker","GlobalWorkerOptions","workerSrc","parsePDFEternal","arrayBuffer","pdf","getDocument","data","promise","allText","i","numPages","page","getPage","content","getTextContent","items","sort","a","b","yDiff","transform","Math","abs","currentY","currentLine","lines","item","length","push","join","str","split","filter","line","trim","match","console","log","results","replace","itemCode","description","qtyStr","quantity","parseInt","size","includes","color","error","Error"],"sources":["C:/Users/hongjie/Desktop/Warehouse Test/src/parsers/eternalParser.js"],"sourcesContent":["// src/parsers/eternalParser.js\r\nimport * as pdfjsLib from \"pdfjs-dist/build/pdf\";\r\nimport pdfWorker from \"pdfjs-dist/build/pdf.worker.entry\";\r\n\r\n// Ensure worker is properly configured\r\npdfjsLib.GlobalWorkerOptions.workerSrc = pdfWorker;\r\n\r\n/**\r\n * parsePDFEternal(arrayBuffer)\r\n *  For Eternal Ink style invoices\r\n */\r\nexport async function parsePDFEternal(arrayBuffer) {\r\n  try {\r\n    const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;\r\n    let allText = \"\";\r\n\r\n    for (let i = 1; i <= pdf.numPages; i++) {\r\n      const page = await pdf.getPage(i);\r\n      const content = await page.getTextContent();\r\n      \r\n      // Sort items by their vertical position (y) and then horizontal position (x)\r\n      const items = content.items.sort((a, b) => {\r\n        const yDiff = b.transform[5] - a.transform[5];\r\n        if (Math.abs(yDiff) < 2) { // If y positions are close, sort by x\r\n          return a.transform[4] - b.transform[4];\r\n        }\r\n        return yDiff;\r\n      });\r\n\r\n      // Group items by their vertical position to form lines\r\n      let currentY = null;\r\n      let currentLine = [];\r\n      const lines = [];\r\n\r\n      for (const item of items) {\r\n        if (currentY === null || Math.abs(item.transform[5] - currentY) > 2) {\r\n          if (currentLine.length > 0) {\r\n            lines.push(currentLine.join(' '));\r\n          }\r\n          currentLine = [item.str];\r\n          currentY = item.transform[5];\r\n        } else {\r\n          currentLine.push(item.str);\r\n        }\r\n      }\r\n      if (currentLine.length > 0) {\r\n        lines.push(currentLine.join(' '));\r\n      }\r\n\r\n      allText += lines.join('\\n') + '\\n';\r\n    }\r\n\r\n    // Split into lines and filter out empty lines and headers\r\n    const lines = allText.split('\\n')\r\n      .filter(line => line.trim())\r\n      .filter(line => !line.match(/^Page \\d+$/))\r\n      .filter(line => !line.match(/^(Item|Description|Ordered|Rate|Amount)$/))\r\n      .filter(line => !line.match(/^Total$/));\r\n\r\n    console.log('Filtered lines:', lines); // Debug logging\r\n    \r\n    const results = [];\r\n    \r\n    for (const line of lines) {\r\n      // Add debug logging to see exact line content with visible spaces\r\n      console.log('Processing line:', line.replace(/ /g, '·')); // Shows spaces as dots for debugging\r\n      \r\n      // Match the exact invoice format: Item Code, Description, Quantity, Rate, Amount\r\n      // Even more flexible pattern that allows for variable spacing and optional spaces around numbers\r\n      const match = line.match(/^\\s*([A-Z0-9]+(?:-[0-9]+(?:\\/[0-9]+)?(?:NB)?)?)\\s+(.*?)\\s+(\\d+(?:,\\d+)?)\\s+[\\d,.]+\\s+[\\d,.]+\\s*$/);\r\n      \r\n      if (match) {\r\n        const [, itemCode, description, qtyStr] = match;\r\n        console.log('Matched components:', { itemCode, description, qtyStr }); // Debug matched components\r\n        const quantity = parseInt(qtyStr.replace(/,/g, ''), 10);\r\n\r\n        // Extract size from item code or description\r\n        let size = \"1 ounce\"; // default\r\n        if (itemCode.includes(\"-1/2\") || description.includes(\"1/2 ounce\")) {\r\n          size = \"1/2 ounce\";\r\n        } else if (itemCode.includes(\"-4\") || description.includes(\"4 ounce\")) {\r\n          size = \"4 ounce\";\r\n        } else if (itemCode.includes(\"-2\") || description.includes(\"2 ounce\")) {\r\n          size = \"2 ounce\";\r\n        }\r\n\r\n        // Clean up color name\r\n        const color = description\r\n          .replace(/-1 ounce Bottle/i, \"\")\r\n          .replace(/-1\\/2 ounce/i, \"\")\r\n          .replace(/-4 ounce/i, \"\")\r\n          .replace(/-2 ounce/i, \"\")\r\n          .replace(/\\s*Bottle.*$/i, \"\") // Remove \"Bottle\" and anything after it\r\n          .replace(/\\s*Set.*$/i, \"\") // Remove \"Set\" and anything after it\r\n          .trim();\r\n\r\n        // Skip discount lines and empty colors\r\n        if (!itemCode.includes(\"Discount\") && color && !color.match(/^(ounce|Bottle|Bottles)$/i)) {\r\n          results.push({\r\n            itemCode,\r\n            color,\r\n            quantity,\r\n            size\r\n          });\r\n          console.log('Successfully parsed item:', { itemCode, color, quantity, size }); // Debug logging\r\n        }\r\n      } else {\r\n        console.log('Line did not match pattern:', line); // Debug logging\r\n      }\r\n    }\r\n\r\n    if (results.length === 0) {\r\n      console.error('No items could be parsed from the PDF');\r\n      throw new Error('No items could be parsed from the PDF');\r\n    }\r\n\r\n    console.log('Parsed results:', results); // Debug logging\r\n    return results;\r\n  } catch (error) {\r\n    console.error('Error parsing PDF:', error);\r\n    throw error;\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}