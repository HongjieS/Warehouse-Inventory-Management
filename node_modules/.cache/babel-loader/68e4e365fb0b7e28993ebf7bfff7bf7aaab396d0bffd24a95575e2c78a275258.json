{"ast":null,"code":"// src/parsers/eternalParser.js\nimport*as pdfjsLib from\"pdfjs-dist/build/pdf\";import pdfWorker from\"pdfjs-dist/build/pdf.worker.entry\";// Ensure worker is properly configured\npdfjsLib.GlobalWorkerOptions.workerSrc=pdfWorker;/**\r\n * parsePDFEternal(arrayBuffer)\r\n *  For Eternal Ink style invoices\r\n */export async function parsePDFEternal(arrayBuffer){try{const pdf=await pdfjsLib.getDocument({data:arrayBuffer}).promise;let allText=\"\";for(let i=1;i<=pdf.numPages;i++){const page=await pdf.getPage(i);const content=await page.getTextContent();// Sort items by their vertical position (y) and then horizontal position (x)\nconst items=content.items.sort((a,b)=>{const yDiff=b.transform[5]-a.transform[5];if(Math.abs(yDiff)<2){// If y positions are close, sort by x\nreturn a.transform[4]-b.transform[4];}return yDiff;});// Group items by their vertical position to form lines\nlet currentY=null;let currentLine=[];const lines=[];for(const item of items){if(currentY===null||Math.abs(item.transform[5]-currentY)>2){if(currentLine.length>0){lines.push(currentLine.join(' '));}currentLine=[item.str];currentY=item.transform[5];}else{currentLine.push(item.str);}}if(currentLine.length>0){lines.push(currentLine.join(' '));}allText+=lines.join('\\n')+'\\n';}// Split into lines and filter out empty lines and headers\nconst lines=allText.split('\\n').filter(line=>line.trim()).filter(line=>!line.match(/^Page \\d+$/)).filter(line=>!line.match(/^(Item|Description|Ordered|Rate|Amount)$/)).filter(line=>!line.match(/^Total$/));console.log('Filtered lines:',lines);// Debug logging\nconst results=[];for(const line of lines){// Add debug logging to see exact line content with visible spaces\nconsole.log('Processing line:',line.replace(/ /g,'·'));// Shows spaces as dots for debugging\n// Match the exact invoice format: Item Code, Description, Quantity, Rate, Amount\n// Even more flexible pattern that allows for variable spacing and optional spaces around numbers\nconst match=line.match(/^\\s*([A-Z0-9]+(?:-[0-9]+(?:\\/[0-9]+)?(?:NB)?)?)\\s+(.*?)\\s+(\\d+(?:,\\d+)?)\\s+[\\d,.]+\\s+[\\d,.]+\\s*$/);if(match){const[,itemCode,description,qtyStr]=match;console.log('Matched components:',{itemCode,description,qtyStr});// Debug matched components\nconst quantity=parseInt(qtyStr.replace(/,/g,''),10);// Extract size from item code or description\nlet size=\"1 ounce\";// default\nif(itemCode.includes(\"-1/2\")||description.includes(\"1/2 ounce\")){size=\"1/2 ounce\";}else if(itemCode.includes(\"-4\")||description.includes(\"4 ounce\")){size=\"4 ounce\";}else if(itemCode.includes(\"-2\")||description.includes(\"2 ounce\")){size=\"2 ounce\";}// Clean up color name\nconst color=description.replace(/-1 ounce Bottle/i,\"\").replace(/-1\\/2 ounce/i,\"\").replace(/-4 ounce/i,\"\").replace(/-2 ounce/i,\"\").replace(/\\s*Bottle.*$/i,\"\")// Remove \"Bottle\" and anything after it\n.replace(/\\s*Set.*$/i,\"\")// Remove \"Set\" and anything after it\n.trim();// Skip discount lines and empty colors\nif(!itemCode.includes(\"Discount\")&&color&&!color.match(/^(ounce|Bottle|Bottles)$/i)){results.push({itemCode,color,quantity,size});console.log('Successfully parsed item:',{itemCode,color,quantity,size});// Debug logging\n}}else{console.log('Line did not match pattern:',line);// Debug logging\n}}if(results.length===0){console.error('No items could be parsed from the PDF');throw new Error('No items could be parsed from the PDF');}console.log('Parsed results:',results);// Debug logging\nreturn results;}catch(error){console.error('Error parsing PDF:',error);throw error;}}","map":{"version":3,"names":["pdfjsLib","pdfWorker","GlobalWorkerOptions","workerSrc","parsePDFEternal","arrayBuffer","pdf","getDocument","data","promise","allText","i","numPages","page","getPage","content","getTextContent","items","sort","a","b","yDiff","transform","Math","abs","currentY","currentLine","lines","item","length","push","join","str","split","filter","line","trim","match","console","log","results","replace","itemCode","description","qtyStr","quantity","parseInt","size","includes","color","error","Error"],"sources":["C:/Users/hongjie/Desktop/Warehouse Test/src/parsers/eternalParser.js"],"sourcesContent":["// src/parsers/eternalParser.js\r\nimport * as pdfjsLib from \"pdfjs-dist/build/pdf\";\r\nimport pdfWorker from \"pdfjs-dist/build/pdf.worker.entry\";\r\n\r\n// Ensure worker is properly configured\r\npdfjsLib.GlobalWorkerOptions.workerSrc = pdfWorker;\r\n\r\n/**\r\n * parsePDFEternal(arrayBuffer)\r\n *  For Eternal Ink style invoices\r\n */\r\nexport async function parsePDFEternal(arrayBuffer) {\r\n  try {\r\n    const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;\r\n    let allText = \"\";\r\n\r\n    for (let i = 1; i <= pdf.numPages; i++) {\r\n      const page = await pdf.getPage(i);\r\n      const content = await page.getTextContent();\r\n      \r\n      // Sort items by their vertical position (y) and then horizontal position (x)\r\n      const items = content.items.sort((a, b) => {\r\n        const yDiff = b.transform[5] - a.transform[5];\r\n        if (Math.abs(yDiff) < 2) { // If y positions are close, sort by x\r\n          return a.transform[4] - b.transform[4];\r\n        }\r\n        return yDiff;\r\n      });\r\n\r\n      // Group items by their vertical position to form lines\r\n      let currentY = null;\r\n      let currentLine = [];\r\n      const lines = [];\r\n\r\n      for (const item of items) {\r\n        if (currentY === null || Math.abs(item.transform[5] - currentY) > 2) {\r\n          if (currentLine.length > 0) {\r\n            lines.push(currentLine.join(' '));\r\n          }\r\n          currentLine = [item.str];\r\n          currentY = item.transform[5];\r\n        } else {\r\n          currentLine.push(item.str);\r\n        }\r\n      }\r\n      if (currentLine.length > 0) {\r\n        lines.push(currentLine.join(' '));\r\n      }\r\n\r\n      allText += lines.join('\\n') + '\\n';\r\n    }\r\n\r\n    // Split into lines and filter out empty lines and headers\r\n    const lines = allText.split('\\n')\r\n      .filter(line => line.trim())\r\n      .filter(line => !line.match(/^Page \\d+$/))\r\n      .filter(line => !line.match(/^(Item|Description|Ordered|Rate|Amount)$/))\r\n      .filter(line => !line.match(/^Total$/));\r\n\r\n    console.log('Filtered lines:', lines); // Debug logging\r\n    \r\n    const results = [];\r\n    \r\n    for (const line of lines) {\r\n      // Add debug logging to see exact line content with visible spaces\r\n      console.log('Processing line:', line.replace(/ /g, '·')); // Shows spaces as dots for debugging\r\n      \r\n      // Match the exact invoice format: Item Code, Description, Quantity, Rate, Amount\r\n      // Even more flexible pattern that allows for variable spacing and optional spaces around numbers\r\n      const match = line.match(/^\\s*([A-Z0-9]+(?:-[0-9]+(?:\\/[0-9]+)?(?:NB)?)?)\\s+(.*?)\\s+(\\d+(?:,\\d+)?)\\s+[\\d,.]+\\s+[\\d,.]+\\s*$/);\r\n      \r\n      if (match) {\r\n        const [, itemCode, description, qtyStr] = match;\r\n        console.log('Matched components:', { itemCode, description, qtyStr }); // Debug matched components\r\n        const quantity = parseInt(qtyStr.replace(/,/g, ''), 10);\r\n\r\n        // Extract size from item code or description\r\n        let size = \"1 ounce\"; // default\r\n        if (itemCode.includes(\"-1/2\") || description.includes(\"1/2 ounce\")) {\r\n          size = \"1/2 ounce\";\r\n        } else if (itemCode.includes(\"-4\") || description.includes(\"4 ounce\")) {\r\n          size = \"4 ounce\";\r\n        } else if (itemCode.includes(\"-2\") || description.includes(\"2 ounce\")) {\r\n          size = \"2 ounce\";\r\n        }\r\n\r\n        // Clean up color name\r\n        const color = description\r\n          .replace(/-1 ounce Bottle/i, \"\")\r\n          .replace(/-1\\/2 ounce/i, \"\")\r\n          .replace(/-4 ounce/i, \"\")\r\n          .replace(/-2 ounce/i, \"\")\r\n          .replace(/\\s*Bottle.*$/i, \"\") // Remove \"Bottle\" and anything after it\r\n          .replace(/\\s*Set.*$/i, \"\") // Remove \"Set\" and anything after it\r\n          .trim();\r\n\r\n        // Skip discount lines and empty colors\r\n        if (!itemCode.includes(\"Discount\") && color && !color.match(/^(ounce|Bottle|Bottles)$/i)) {\r\n          results.push({\r\n            itemCode,\r\n            color,\r\n            quantity,\r\n            size\r\n          });\r\n          console.log('Successfully parsed item:', { itemCode, color, quantity, size }); // Debug logging\r\n        }\r\n      } else {\r\n        console.log('Line did not match pattern:', line); // Debug logging\r\n      }\r\n    }\r\n\r\n    if (results.length === 0) {\r\n      console.error('No items could be parsed from the PDF');\r\n      throw new Error('No items could be parsed from the PDF');\r\n    }\r\n\r\n    console.log('Parsed results:', results); // Debug logging\r\n    return results;\r\n  } catch (error) {\r\n    console.error('Error parsing PDF:', error);\r\n    throw error;\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}