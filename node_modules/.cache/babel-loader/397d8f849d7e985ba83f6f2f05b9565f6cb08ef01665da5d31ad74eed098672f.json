{"ast":null,"code":"// src/parsers/worldFamousParser.js\nimport * as pdfjsLib from \"pdfjs-dist/build/pdf\";\nimport pdfWorker from \"pdfjs-dist/build/pdf.worker.entry\";\n\n// Ensure worker is properly configured\npdfjsLib.GlobalWorkerOptions.workerSrc = pdfWorker;\n\n/**\n * parsePDFWorldFamous(arrayBuffer)\n *  For World Famous / Ink Projects invoices\n */\nexport const parsePDFWorldFamous = async buffer => {\n  try {\n    const pdf = await pdfjsLib.getDocument({\n      data: buffer\n    }).promise;\n    const page = await pdf.getPage(1);\n    const textContent = await page.getTextContent();\n    const items = [];\n\n    // Debug: Log the raw text content\n    console.log('Raw text content:', textContent.items.map(item => item.str).join(' '));\n\n    // Combine all text items into a single string with proper spacing\n    const fullText = textContent.items.map(item => {\n      const str = item.str;\n      // Add space between items if they're not already separated\n      const prevItem = textContent.items[textContent.items.indexOf(item) - 1];\n      if (prevItem && !prevItem.str.endsWith(' ') && !str.startsWith(' ')) {\n        return ' ' + str;\n      }\n      return str;\n    }).join('');\n\n    // Debug: Log the combined text\n    console.log('Combined text:', fullText);\n\n    // Find the start of the items section\n    const itemsStartIndex = fullText.indexOf('Qty Fulfilled Qty Invoiced Qty');\n    if (itemsStartIndex === -1) {\n      throw new Error('Could not find items section in the invoice');\n    }\n\n    // Extract the items section\n    const itemsSection = fullText.substring(itemsStartIndex);\n\n    // Split into lines and clean them up\n    const lines = itemsSection.split(/\\s{2,}/).map(line => line.trim()).filter(line => line.length > 0);\n\n    // Debug: Log all lines\n    console.log('All lines:', lines);\n\n    // Process each line looking for World Famous items\n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i].trim();\n\n      // Skip header lines or lines that don't contain item information\n      if (!line || line.includes('Qty Fulfilled') || line.includes('Page') || line.includes('Total') || line.includes('Subtotal')) {\n        continue;\n      }\n\n      // Debug: Log the current line being processed\n      console.log('Processing line:', line);\n\n      // Extract item code (look for WF followed by any characters)\n      const itemCodeMatch = line.match(/(WF[A-Z0-9]+)/i);\n      if (!itemCodeMatch) {\n        continue;\n      }\n      const itemCode = itemCodeMatch[1];\n\n      // Debug: Log found item code\n      console.log('Found item code:', itemCode);\n\n      // Extract quantity (look for numbers at the start of the line)\n      const quantityMatch = line.match(/^(\\d+)/);\n      const quantity = quantityMatch ? parseInt(quantityMatch[1]) : 1;\n\n      // Extract color (text between item code and size)\n      let color = line.replace(itemCode, '').replace(/\\d+oz.*$/, '') // Remove size and everything after\n      .replace(/\\$[\\d.]+.*$/, '') // Remove price and everything after\n      .trim();\n\n      // Clean up color name\n      color = processColorName(color);\n\n      // Extract size\n      let size = '1oz';\n      const sizeMatch = line.match(/(\\d+(?:\\/\\d+)?)oz/i);\n      if (sizeMatch) {\n        size = sizeMatch[1] === '1/2' ? '0.5oz' : `${sizeMatch[1]}oz`;\n      }\n\n      // Remove size from color name\n      color = color.replace(/\\d+(?:\\/\\d+)?oz/i, '').trim();\n\n      // If color is empty, try to get it from the item code\n      if (!color) {\n        color = getColorFromItemCode(itemCode);\n      }\n      items.push({\n        itemCode,\n        color: color || 'Unknown Color',\n        size,\n        quantity\n      });\n    }\n\n    // Debug: Log found items\n    console.log('Found items:', items);\n    if (items.length === 0) {\n      throw new Error('No valid items found in the invoice. Please check the console for debugging information.');\n    }\n    return items;\n  } catch (error) {\n    console.error('Error parsing World Famous PDF:', error);\n    throw new Error('Failed to parse World Famous invoice: ' + error.message);\n  }\n};\nfunction processColorName(colorText) {\n  // Remove any page header/footer information\n  let color = colorText.replace(/\\s+\\d+\\s+of\\s+\\d+(?:\\s+Sales\\s+Order.*)?$/gm, '').replace(/\\s+Sales\\s+Order.*$/gm, '').replace(/\\s+Qty\\s+(?:Fulfilled|Invoiced).*$/gm, '').replace(/\\s+\\d+\\/\\d+\\/\\d+.*$/gm, '').replace(/Kuro\\s+Sumi\\s+Tattoo\\s+Ink.*$/gm, '').replace(/— World Famous(?:\\s+Tattoo\\s+)?(?:Ink)?(?:\\s+—)?/gi, '').replace(/World Famous(?:\\s+Tattoo)?(?:\\s+—)?/gi, '').replace(/Tattoo Ink(?:\\s+—)?/gi, '').replace(/\\s*—\\s*$/g, '').replace(/\\s*—\\s*/g, ' ').replace(/\\s+/g, ' ').replace(/\\s*\\([^)]*\\)/g, '').replace(/\\s*\\[[^\\]]*\\]/g, '').replace(/\\s*\\{[^}]*\\}/g, '').replace(/\\s*\\$[\\d.,]+/g, '').trim();\n\n  // Special case handling for specific product lines\n  if (color.includes('NBK')) {\n    color = color.replace(/Dima\\s+NBK\\s+/, 'Dima NBK ');\n  }\n  if (color.includes('Jay Freestyle')) {\n    color = color.replace(/Jay\\s+Freestyle\\s+/, 'Jay Freestyle ');\n  }\n  if (color.includes('Sarah Miller')) {\n    color = color.replace(/Sarah\\s+Miller\\s+/, 'Sarah Miller ');\n  }\n  if (color.includes('Ryan Smith')) {\n    color = color.replace(/Ryan\\s+Smith\\s+/, 'Ryan Smith ');\n  }\n  return color;\n}\nfunction getColorFromItemCode(itemCode) {\n  // Special cases for specific product lines\n  if (itemCode.startsWith('WFADPP')) {\n    var _itemCode$match, _itemCode$match$;\n    const num = ((_itemCode$match = itemCode.match(/\\d+/)) === null || _itemCode$match === void 0 ? void 0 : (_itemCode$match$ = _itemCode$match[0]) === null || _itemCode$match$ === void 0 ? void 0 : _itemCode$match$[0]) || '';\n    return `Pancho Pastel #${num}`;\n  }\n  if (itemCode.startsWith('WFP2H')) {\n    return 'Poch 2H';\n  }\n  if (itemCode.startsWith('WFMHS')) {\n    return 'Must-Haves';\n  }\n  if (itemCode.startsWith('WFILL')) {\n    return 'Illuminati Yellow';\n  }\n\n  // Extract color name from item code if no color was found\n  const parts = itemCode.split(/[0-9]/)[0].split('WF');\n  if (parts.length > 1) {\n    return parts[1].split('').map(char => {\n      if (char === char.toUpperCase()) {\n        return ' ' + char;\n      }\n      return char;\n    }).join('').trim();\n  }\n  return itemCode;\n}\nconst parseItem = itemText => {\n  const lines = itemText.split('\\n');\n  const itemCodeMatch = lines[0].match(/Item Code:\\s*([^\\s]+)/);\n  const colorMatch = lines[0].match(/Color:\\s*([^\\n]+)/);\n  const sizeMatch = lines[0].match(/Size:\\s*([^\\n]+)/);\n  const quantityMatch = lines[0].match(/Quantity:\\s*(\\d+)/);\n  if (!itemCodeMatch || !colorMatch || !sizeMatch || !quantityMatch) {\n    return null;\n  }\n  return {\n    itemCode: itemCodeMatch[1].trim(),\n    color: colorMatch[1].trim(),\n    size: sizeMatch[1].trim(),\n    quantity: parseInt(quantityMatch[1])\n  };\n};","map":{"version":3,"names":["pdfjsLib","pdfWorker","GlobalWorkerOptions","workerSrc","parsePDFWorldFamous","buffer","pdf","getDocument","data","promise","page","getPage","textContent","getTextContent","items","console","log","map","item","str","join","fullText","prevItem","indexOf","endsWith","startsWith","itemsStartIndex","Error","itemsSection","substring","lines","split","line","trim","filter","length","i","includes","itemCodeMatch","match","itemCode","quantityMatch","quantity","parseInt","color","replace","processColorName","size","sizeMatch","getColorFromItemCode","push","error","message","colorText","_itemCode$match","_itemCode$match$","num","parts","char","toUpperCase","parseItem","itemText","colorMatch"],"sources":["C:/Users/hongjie/Desktop/Warehouse Test/src/parsers/worldFamousParser.js"],"sourcesContent":["// src/parsers/worldFamousParser.js\nimport * as pdfjsLib from \"pdfjs-dist/build/pdf\";\nimport pdfWorker from \"pdfjs-dist/build/pdf.worker.entry\";\n\n// Ensure worker is properly configured\npdfjsLib.GlobalWorkerOptions.workerSrc = pdfWorker;\n\n/**\n * parsePDFWorldFamous(arrayBuffer)\n *  For World Famous / Ink Projects invoices\n */\nexport const parsePDFWorldFamous = async (buffer) => {\n  try {\n    const pdf = await pdfjsLib.getDocument({ data: buffer }).promise;\n    const page = await pdf.getPage(1);\n    const textContent = await page.getTextContent();\n    const items = [];\n\n    // Debug: Log the raw text content\n    console.log('Raw text content:', textContent.items.map(item => item.str).join(' '));\n\n    // Combine all text items into a single string with proper spacing\n    const fullText = textContent.items.map(item => {\n      const str = item.str;\n      // Add space between items if they're not already separated\n      const prevItem = textContent.items[textContent.items.indexOf(item) - 1];\n      if (prevItem && !prevItem.str.endsWith(' ') && !str.startsWith(' ')) {\n        return ' ' + str;\n      }\n      return str;\n    }).join('');\n\n    // Debug: Log the combined text\n    console.log('Combined text:', fullText);\n\n    // Find the start of the items section\n    const itemsStartIndex = fullText.indexOf('Qty Fulfilled Qty Invoiced Qty');\n    if (itemsStartIndex === -1) {\n      throw new Error('Could not find items section in the invoice');\n    }\n\n    // Extract the items section\n    const itemsSection = fullText.substring(itemsStartIndex);\n    \n    // Split into lines and clean them up\n    const lines = itemsSection.split(/\\s{2,}/).map(line => line.trim()).filter(line => line.length > 0);\n    \n    // Debug: Log all lines\n    console.log('All lines:', lines);\n\n    // Process each line looking for World Famous items\n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i].trim();\n      \n      // Skip header lines or lines that don't contain item information\n      if (!line || line.includes('Qty Fulfilled') || line.includes('Page') || line.includes('Total') || line.includes('Subtotal')) {\n        continue;\n      }\n\n      // Debug: Log the current line being processed\n      console.log('Processing line:', line);\n\n      // Extract item code (look for WF followed by any characters)\n      const itemCodeMatch = line.match(/(WF[A-Z0-9]+)/i);\n      if (!itemCodeMatch) {\n        continue;\n      }\n\n      const itemCode = itemCodeMatch[1];\n      \n      // Debug: Log found item code\n      console.log('Found item code:', itemCode);\n\n      // Extract quantity (look for numbers at the start of the line)\n      const quantityMatch = line.match(/^(\\d+)/);\n      const quantity = quantityMatch ? parseInt(quantityMatch[1]) : 1;\n\n      // Extract color (text between item code and size)\n      let color = line\n        .replace(itemCode, '')\n        .replace(/\\d+oz.*$/, '') // Remove size and everything after\n        .replace(/\\$[\\d.]+.*$/, '') // Remove price and everything after\n        .trim();\n\n      // Clean up color name\n      color = processColorName(color);\n\n      // Extract size\n      let size = '1oz';\n      const sizeMatch = line.match(/(\\d+(?:\\/\\d+)?)oz/i);\n      if (sizeMatch) {\n        size = sizeMatch[1] === '1/2' ? '0.5oz' : `${sizeMatch[1]}oz`;\n      }\n\n      // Remove size from color name\n      color = color.replace(/\\d+(?:\\/\\d+)?oz/i, '').trim();\n\n      // If color is empty, try to get it from the item code\n      if (!color) {\n        color = getColorFromItemCode(itemCode);\n      }\n\n      items.push({\n        itemCode,\n        color: color || 'Unknown Color',\n        size,\n        quantity\n      });\n    }\n\n    // Debug: Log found items\n    console.log('Found items:', items);\n\n    if (items.length === 0) {\n      throw new Error('No valid items found in the invoice. Please check the console for debugging information.');\n    }\n\n    return items;\n  } catch (error) {\n    console.error('Error parsing World Famous PDF:', error);\n    throw new Error('Failed to parse World Famous invoice: ' + error.message);\n  }\n};\n\nfunction processColorName(colorText) {\n  // Remove any page header/footer information\n  let color = colorText\n    .replace(/\\s+\\d+\\s+of\\s+\\d+(?:\\s+Sales\\s+Order.*)?$/gm, '')\n    .replace(/\\s+Sales\\s+Order.*$/gm, '')\n    .replace(/\\s+Qty\\s+(?:Fulfilled|Invoiced).*$/gm, '')\n    .replace(/\\s+\\d+\\/\\d+\\/\\d+.*$/gm, '')\n    .replace(/Kuro\\s+Sumi\\s+Tattoo\\s+Ink.*$/gm, '')\n    .replace(/— World Famous(?:\\s+Tattoo\\s+)?(?:Ink)?(?:\\s+—)?/gi, '')\n    .replace(/World Famous(?:\\s+Tattoo)?(?:\\s+—)?/gi, '')\n    .replace(/Tattoo Ink(?:\\s+—)?/gi, '')\n    .replace(/\\s*—\\s*$/g, '')\n    .replace(/\\s*—\\s*/g, ' ')\n    .replace(/\\s+/g, ' ')\n    .replace(/\\s*\\([^)]*\\)/g, '')\n    .replace(/\\s*\\[[^\\]]*\\]/g, '')\n    .replace(/\\s*\\{[^}]*\\}/g, '')\n    .replace(/\\s*\\$[\\d.,]+/g, '')\n    .trim();\n\n  // Special case handling for specific product lines\n  if (color.includes('NBK')) {\n    color = color.replace(/Dima\\s+NBK\\s+/, 'Dima NBK ');\n  }\n  if (color.includes('Jay Freestyle')) {\n    color = color.replace(/Jay\\s+Freestyle\\s+/, 'Jay Freestyle ');\n  }\n  if (color.includes('Sarah Miller')) {\n    color = color.replace(/Sarah\\s+Miller\\s+/, 'Sarah Miller ');\n  }\n  if (color.includes('Ryan Smith')) {\n    color = color.replace(/Ryan\\s+Smith\\s+/, 'Ryan Smith ');\n  }\n\n  return color;\n}\n\nfunction getColorFromItemCode(itemCode) {\n  // Special cases for specific product lines\n  if (itemCode.startsWith('WFADPP')) {\n    const num = itemCode.match(/\\d+/)?.[0]?.[0] || '';\n    return `Pancho Pastel #${num}`;\n  }\n  \n  if (itemCode.startsWith('WFP2H')) {\n    return 'Poch 2H';\n  }\n  \n  if (itemCode.startsWith('WFMHS')) {\n    return 'Must-Haves';\n  }\n  \n  if (itemCode.startsWith('WFILL')) {\n    return 'Illuminati Yellow';\n  }\n  \n  // Extract color name from item code if no color was found\n  const parts = itemCode.split(/[0-9]/)[0].split('WF');\n  if (parts.length > 1) {\n    return parts[1].split('').map(char => {\n      if (char === char.toUpperCase()) {\n        return ' ' + char;\n      }\n      return char;\n    }).join('').trim();\n  }\n  return itemCode;\n}\n\nconst parseItem = (itemText) => {\n  const lines = itemText.split('\\n');\n  const itemCodeMatch = lines[0].match(/Item Code:\\s*([^\\s]+)/);\n  const colorMatch = lines[0].match(/Color:\\s*([^\\n]+)/);\n  const sizeMatch = lines[0].match(/Size:\\s*([^\\n]+)/);\n  const quantityMatch = lines[0].match(/Quantity:\\s*(\\d+)/);\n\n  if (!itemCodeMatch || !colorMatch || !sizeMatch || !quantityMatch) {\n    return null;\n  }\n\n  return {\n    itemCode: itemCodeMatch[1].trim(),\n    color: colorMatch[1].trim(),\n    size: sizeMatch[1].trim(),\n    quantity: parseInt(quantityMatch[1]),\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}