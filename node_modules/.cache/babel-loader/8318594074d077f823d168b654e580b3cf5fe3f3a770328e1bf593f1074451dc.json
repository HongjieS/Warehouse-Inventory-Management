{"ast":null,"code":"import * as pdfjsLib from \"pdfjs-dist/build/pdf\";\nimport pdfWorker from \"pdfjs-dist/build/pdf.worker.entry\";\n\n// Ensure worker is properly configured\npdfjsLib.GlobalWorkerOptions.workerSrc = pdfWorker;\n\n/**\r\n * Simple, direct parsing approach for Solid Ink invoices\r\n */\nexport async function parsePDFSolidInk(arrayBuffer) {\n  try {\n    const pdf = await pdfjsLib.getDocument({\n      data: arrayBuffer\n    }).promise;\n    const numPages = pdf.numPages;\n    let allLines = [];\n    for (let i = 1; i <= numPages; i++) {\n      const page = await pdf.getPage(i);\n      const textContent = await page.getTextContent();\n      // Group items by vertical position (approximate lines)\n      const lineMap = new Map();\n      textContent.items.forEach(item => {\n        const y = Math.round(item.transform[5]);\n        if (!lineMap.has(y)) lineMap.set(y, []);\n        lineMap.get(y).push({\n          text: item.str,\n          x: item.transform[4]\n        });\n      });\n      // Sort lines by y coordinate and combine items in each line\n      const lines = Array.from(lineMap.entries()).sort((a, b) => b[0] - a[0]).map(([_, items]) => items.sort((a, b) => a.x - b.x).map(item => item.text).join(' ').trim()).filter(line => line.length > 0);\n      allLines = allLines.concat(lines);\n    }\n\n    // Regex: SKU (4-5 uppercase letters/numbers), description, price, quantity, amount\n    // Example: LIN1 Black Label | Lining Black - Size: 1oz $3.60 1,650 $5,940.00\n    const itemPattern = /^(\\w{3,5})\\s+(.+?)\\s+\\$?([\\d,.]+)\\s+(\\d{1,5})\\s+\\$?([\\d,.]+)$/;\n    const items = [];\n    for (const line of allLines) {\n      const match = line.match(itemPattern);\n      if (match) {\n        const [, itemCode, description,, quantityStr] = match;\n        // Try to extract size from description\n        let size = '1 ounce';\n        const sizeMatch = description.match(/(\\d+\\s*oz|ounce)/i);\n        if (sizeMatch) size = sizeMatch[0].replace(/\\s+/g, '');\n        // Clean up color/description\n        let color = description.replace(/-?\\s*Size:?\\s*\\d+\\s*oz|ounce/i, '').replace(/\\|/g, '').trim();\n        items.push({\n          itemCode,\n          color,\n          quantity: parseInt(quantityStr.replace(/,/g, '')),\n          size\n        });\n      }\n    }\n    if (items.length === 0) throw new Error('No items could be parsed from the PDF');\n    return items;\n  } catch (error) {\n    console.error('Error in Solid Ink parser:', error);\n    throw error;\n  }\n}","map":{"version":3,"names":["pdfjsLib","pdfWorker","GlobalWorkerOptions","workerSrc","parsePDFSolidInk","arrayBuffer","pdf","getDocument","data","promise","numPages","allLines","i","page","getPage","textContent","getTextContent","lineMap","Map","items","forEach","item","y","Math","round","transform","has","set","get","push","text","str","x","lines","Array","from","entries","sort","a","b","map","_","join","trim","filter","line","length","concat","itemPattern","match","itemCode","description","quantityStr","size","sizeMatch","replace","color","quantity","parseInt","Error","error","console"],"sources":["C:/Users/hongjie/Desktop/Warehouse Test/src/parsers/solidInkParser.js"],"sourcesContent":["import * as pdfjsLib from \"pdfjs-dist/build/pdf\";\r\nimport pdfWorker from \"pdfjs-dist/build/pdf.worker.entry\";\r\n\r\n// Ensure worker is properly configured\r\npdfjsLib.GlobalWorkerOptions.workerSrc = pdfWorker;\r\n\r\n/**\r\n * Simple, direct parsing approach for Solid Ink invoices\r\n */\r\nexport async function parsePDFSolidInk(arrayBuffer) {\r\n  try {\r\n    const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;\r\n    const numPages = pdf.numPages;\r\n    let allLines = [];\r\n\r\n    for (let i = 1; i <= numPages; i++) {\r\n      const page = await pdf.getPage(i);\r\n      const textContent = await page.getTextContent();\r\n      // Group items by vertical position (approximate lines)\r\n      const lineMap = new Map();\r\n      textContent.items.forEach(item => {\r\n        const y = Math.round(item.transform[5]);\r\n        if (!lineMap.has(y)) lineMap.set(y, []);\r\n        lineMap.get(y).push({ text: item.str, x: item.transform[4] });\r\n      });\r\n      // Sort lines by y coordinate and combine items in each line\r\n      const lines = Array.from(lineMap.entries())\r\n        .sort((a, b) => b[0] - a[0])\r\n        .map(([_, items]) => items.sort((a, b) => a.x - b.x).map(item => item.text).join(' ').trim())\r\n        .filter(line => line.length > 0);\r\n      allLines = allLines.concat(lines);\r\n    }\r\n\r\n    // Regex: SKU (4-5 uppercase letters/numbers), description, price, quantity, amount\r\n    // Example: LIN1 Black Label | Lining Black - Size: 1oz $3.60 1,650 $5,940.00\r\n    const itemPattern = /^(\\w{3,5})\\s+(.+?)\\s+\\$?([\\d,.]+)\\s+(\\d{1,5})\\s+\\$?([\\d,.]+)$/;\r\n    const items = [];\r\n    for (const line of allLines) {\r\n      const match = line.match(itemPattern);\r\n      if (match) {\r\n        const [, itemCode, description, , quantityStr] = match;\r\n        // Try to extract size from description\r\n        let size = '1 ounce';\r\n        const sizeMatch = description.match(/(\\d+\\s*oz|ounce)/i);\r\n        if (sizeMatch) size = sizeMatch[0].replace(/\\s+/g, '');\r\n        // Clean up color/description\r\n        let color = description.replace(/-?\\s*Size:?\\s*\\d+\\s*oz|ounce/i, '').replace(/\\|/g, '').trim();\r\n        items.push({\r\n          itemCode,\r\n          color,\r\n          quantity: parseInt(quantityStr.replace(/,/g, '')), \r\n          size\r\n        });\r\n      }\r\n    }\r\n    if (items.length === 0) throw new Error('No items could be parsed from the PDF');\r\n    return items;\r\n  } catch (error) {\r\n    console.error('Error in Solid Ink parser:', error);\r\n    throw error;\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}