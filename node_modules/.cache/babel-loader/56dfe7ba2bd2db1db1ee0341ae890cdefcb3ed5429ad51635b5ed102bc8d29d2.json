{"ast":null,"code":"// src/parsers/eternalParser.js\nimport * as pdfjsLib from \"pdfjs-dist/build/pdf\";\nimport pdfWorker from \"pdfjs-dist/build/pdf.worker.entry\";\n\n// Ensure worker is properly configured\npdfjsLib.GlobalWorkerOptions.workerSrc = pdfWorker;\n\n/**\r\n * parsePDFEternal(arrayBuffer)\r\n *  For Eternal Ink style invoices\r\n */\nexport async function parsePDFEternal(arrayBuffer) {\n  try {\n    const pdf = await pdfjsLib.getDocument({\n      data: arrayBuffer\n    }).promise;\n    let allText = \"\";\n    for (let i = 1; i <= pdf.numPages; i++) {\n      const page = await pdf.getPage(i);\n      const content = await page.getTextContent();\n      const pageText = content.items.map(item => item.str).join(\" \");\n      allText += pageText + \"\\n\";\n      console.log(`Page ${i} text:`, pageText); // Debug logging\n    }\n\n    // Regex for lines like: E41-4 Lipstick Red 15 38.00 570.00\n    const lineRegex = /^(\\S+)\\s+(.+?)(\\d+)\\s+([\\d.,]+)\\s+([\\d.,]+)$/;\n    const results = [];\n    const lines = allText.split(\"\\n\");\n    for (const line of lines) {\n      const match = line.trim().match(lineRegex);\n      if (!match) {\n        console.log('No match for line:', line); // Debug logging\n        continue;\n      }\n      const [, itemCode, colorNameRaw, qtyStr] = match;\n      const quantity = parseInt(qtyStr, 10);\n\n      // Guess size\n      let size = \"\";\n      if (itemCode.includes(\"-1/2\")) {\n        size = \"1/2 ounce\";\n      } else if (itemCode.includes(\"-4\")) {\n        size = \"4 ounce\";\n      } else if (itemCode.includes(\"-2\")) {\n        size = \"2 ounce\";\n      } else if (itemCode.includes(\"-1\")) {\n        size = \"1 ounce\";\n      }\n      if (/1 ounce Bottle/i.test(colorNameRaw)) {\n        size = \"1 ounce\";\n      }\n      if (!size) size = \"1 ounce\"; // fallback\n\n      const color = colorNameRaw.replace(/-1 ounce Bottle/i, \"\").trim();\n      results.push({\n        itemCode: itemCode.trim(),\n        color,\n        quantity,\n        size\n      });\n    }\n    return results;\n  } catch (error) {\n    console.error('Error parsing PDF:', error);\n    throw error;\n  }\n}","map":{"version":3,"names":["pdfjsLib","pdfWorker","GlobalWorkerOptions","workerSrc","parsePDFEternal","arrayBuffer","pdf","getDocument","data","promise","allText","i","numPages","page","getPage","content","getTextContent","pageText","items","map","item","str","join","console","log","lineRegex","results","lines","split","line","match","trim","itemCode","colorNameRaw","qtyStr","quantity","parseInt","size","includes","test","color","replace","push","error"],"sources":["C:/Users/hongjie/Desktop/Warehouse Test/src/parsers/eternalParser.js"],"sourcesContent":["// src/parsers/eternalParser.js\r\nimport * as pdfjsLib from \"pdfjs-dist/build/pdf\";\r\nimport pdfWorker from \"pdfjs-dist/build/pdf.worker.entry\";\r\n\r\n// Ensure worker is properly configured\r\npdfjsLib.GlobalWorkerOptions.workerSrc = pdfWorker;\r\n\r\n/**\r\n * parsePDFEternal(arrayBuffer)\r\n *  For Eternal Ink style invoices\r\n */\r\nexport async function parsePDFEternal(arrayBuffer) {\r\n  try {\r\n    const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;\r\n    let allText = \"\";\r\n\r\n    for (let i = 1; i <= pdf.numPages; i++) {\r\n      const page = await pdf.getPage(i);\r\n      const content = await page.getTextContent();\r\n      const pageText = content.items.map((item) => item.str).join(\" \");\r\n      allText += pageText + \"\\n\";\r\n      console.log(`Page ${i} text:`, pageText); // Debug logging\r\n    }\r\n\r\n    // Regex for lines like: E41-4 Lipstick Red 15 38.00 570.00\r\n    const lineRegex = /^(\\S+)\\s+(.+?)(\\d+)\\s+([\\d.,]+)\\s+([\\d.,]+)$/;\r\n\r\n    const results = [];\r\n    const lines = allText.split(\"\\n\");\r\n\r\n    for (const line of lines) {\r\n      const match = line.trim().match(lineRegex);\r\n      if (!match) {\r\n        console.log('No match for line:', line); // Debug logging\r\n        continue;\r\n      }\r\n\r\n      const [, itemCode, colorNameRaw, qtyStr] = match;\r\n      const quantity = parseInt(qtyStr, 10);\r\n\r\n      // Guess size\r\n      let size = \"\";\r\n      if (itemCode.includes(\"-1/2\")) {\r\n        size = \"1/2 ounce\";\r\n      } else if (itemCode.includes(\"-4\")) {\r\n        size = \"4 ounce\";\r\n      } else if (itemCode.includes(\"-2\")) {\r\n        size = \"2 ounce\";\r\n      } else if (itemCode.includes(\"-1\")) {\r\n        size = \"1 ounce\";\r\n      }\r\n      if (/1 ounce Bottle/i.test(colorNameRaw)) {\r\n        size = \"1 ounce\";\r\n      }\r\n      if (!size) size = \"1 ounce\"; // fallback\r\n\r\n      const color = colorNameRaw.replace(/-1 ounce Bottle/i, \"\").trim();\r\n\r\n      results.push({\r\n        itemCode: itemCode.trim(),\r\n        color,\r\n        quantity,\r\n        size\r\n      });\r\n    }\r\n\r\n    return results;\r\n  } catch (error) {\r\n    console.error('Error parsing PDF:', error);\r\n    throw error;\r\n  }\r\n}\r\n"],"mappings":"AAAA;AACA,OAAO,KAAKA,QAAQ,MAAM,sBAAsB;AAChD,OAAOC,SAAS,MAAM,mCAAmC;;AAEzD;AACAD,QAAQ,CAACE,mBAAmB,CAACC,SAAS,GAAGF,SAAS;;AAElD;AACA;AACA;AACA;AACA,OAAO,eAAeG,eAAeA,CAACC,WAAW,EAAE;EACjD,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMN,QAAQ,CAACO,WAAW,CAAC;MAAEC,IAAI,EAAEH;IAAY,CAAC,CAAC,CAACI,OAAO;IACrE,IAAIC,OAAO,GAAG,EAAE;IAEhB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIL,GAAG,CAACM,QAAQ,EAAED,CAAC,EAAE,EAAE;MACtC,MAAME,IAAI,GAAG,MAAMP,GAAG,CAACQ,OAAO,CAACH,CAAC,CAAC;MACjC,MAAMI,OAAO,GAAG,MAAMF,IAAI,CAACG,cAAc,CAAC,CAAC;MAC3C,MAAMC,QAAQ,GAAGF,OAAO,CAACG,KAAK,CAACC,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,GAAG,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;MAChEZ,OAAO,IAAIO,QAAQ,GAAG,IAAI;MAC1BM,OAAO,CAACC,GAAG,CAAC,QAAQb,CAAC,QAAQ,EAAEM,QAAQ,CAAC,CAAC,CAAC;IAC5C;;IAEA;IACA,MAAMQ,SAAS,GAAG,8CAA8C;IAEhE,MAAMC,OAAO,GAAG,EAAE;IAClB,MAAMC,KAAK,GAAGjB,OAAO,CAACkB,KAAK,CAAC,IAAI,CAAC;IAEjC,KAAK,MAAMC,IAAI,IAAIF,KAAK,EAAE;MACxB,MAAMG,KAAK,GAAGD,IAAI,CAACE,IAAI,CAAC,CAAC,CAACD,KAAK,CAACL,SAAS,CAAC;MAC1C,IAAI,CAACK,KAAK,EAAE;QACVP,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEK,IAAI,CAAC,CAAC,CAAC;QACzC;MACF;MAEA,MAAM,GAAGG,QAAQ,EAAEC,YAAY,EAAEC,MAAM,CAAC,GAAGJ,KAAK;MAChD,MAAMK,QAAQ,GAAGC,QAAQ,CAACF,MAAM,EAAE,EAAE,CAAC;;MAErC;MACA,IAAIG,IAAI,GAAG,EAAE;MACb,IAAIL,QAAQ,CAACM,QAAQ,CAAC,MAAM,CAAC,EAAE;QAC7BD,IAAI,GAAG,WAAW;MACpB,CAAC,MAAM,IAAIL,QAAQ,CAACM,QAAQ,CAAC,IAAI,CAAC,EAAE;QAClCD,IAAI,GAAG,SAAS;MAClB,CAAC,MAAM,IAAIL,QAAQ,CAACM,QAAQ,CAAC,IAAI,CAAC,EAAE;QAClCD,IAAI,GAAG,SAAS;MAClB,CAAC,MAAM,IAAIL,QAAQ,CAACM,QAAQ,CAAC,IAAI,CAAC,EAAE;QAClCD,IAAI,GAAG,SAAS;MAClB;MACA,IAAI,iBAAiB,CAACE,IAAI,CAACN,YAAY,CAAC,EAAE;QACxCI,IAAI,GAAG,SAAS;MAClB;MACA,IAAI,CAACA,IAAI,EAAEA,IAAI,GAAG,SAAS,CAAC,CAAC;;MAE7B,MAAMG,KAAK,GAAGP,YAAY,CAACQ,OAAO,CAAC,kBAAkB,EAAE,EAAE,CAAC,CAACV,IAAI,CAAC,CAAC;MAEjEL,OAAO,CAACgB,IAAI,CAAC;QACXV,QAAQ,EAAEA,QAAQ,CAACD,IAAI,CAAC,CAAC;QACzBS,KAAK;QACLL,QAAQ;QACRE;MACF,CAAC,CAAC;IACJ;IAEA,OAAOX,OAAO;EAChB,CAAC,CAAC,OAAOiB,KAAK,EAAE;IACdpB,OAAO,CAACoB,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC1C,MAAMA,KAAK;EACb;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}