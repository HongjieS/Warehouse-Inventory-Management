{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hongjie\\\\Desktop\\\\Warehouse Test\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// src/App.js\nimport React, { useState } from \"react\";\nimport * as XLSX from \"xlsx\";\nimport pdfjsLib from \"pdfjs-dist\";\nimport { parsePDFEternal, parsePDFWorldFamous } from \"./parsers\";\nimport StockTable from \"./components/StockTable\";\nimport ImportPreview from \"./components/ImportPreview\";\nimport HistoryTable from \"./components/HistoryTable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [currentBrand, setCurrentBrand] = useState(\"World Famous\");\n  const [worldFamousStock, setWorldFamousStock] = useState([]);\n  const [eternalStock, setEternalStock] = useState([]);\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [importData, setImportData] = useState([]);\n  const [history, setHistory] = useState([]);\n  const [showHistory, setShowHistory] = useState(false);\n  const [showImportPreview, setShowImportPreview] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // For searching & filtering\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedSize, setSelectedSize] = useState(\"\");\n  const [showInStockOnly, setShowInStockOnly] = useState(false);\n\n  // Edit mode\n  const [isEditMode, setIsEditMode] = useState(false);\n\n  // History\n  const [currentView, setCurrentView] = useState(\"Stock\");\n\n  // 1. HISTORY HELPERS\n  const updateHistory = (actionType, details) => {\n    setHistory(prev => [...prev, {\n      date: new Date().toLocaleString(),\n      actionType,\n      brand: currentBrand,\n      details,\n      selected: false\n    }]);\n  };\n  const toggleHistorySelection = i => {\n    setHistory(prev => prev.map((entry, idx) => idx === i ? {\n      ...entry,\n      selected: !entry.selected\n    } : entry));\n  };\n  const exportSelectedHistoryToTextFile = () => {\n    const selected = history.filter(h => h.selected);\n    if (selected.length === 0) {\n      alert(\"No history selected.\");\n      return;\n    }\n    selected.forEach(entry => {\n      const text = `${entry.date} - ${entry.actionType}: ${JSON.stringify(entry.details)}`;\n      const blob = new Blob([text], {\n        type: \"text/plain\"\n      });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement(\"a\");\n      link.href = url;\n      link.download = `${entry.actionType}_history.txt`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n    });\n  };\n\n  // 2. FILE IMPORT\n  const handleFileChange = event => {\n    setSelectedFile(event.target.files[0]);\n    setImportData([]);\n    setShowImportPreview(false);\n    setError(null);\n  };\n  const handleImport = async () => {\n    if (!selectedFile) {\n      alert(\"Please select a file first\");\n      return;\n    }\n    setIsLoading(true);\n    setError(null);\n    try {\n      const fileType = selectedFile.name.split(\".\").pop().toLowerCase();\n      let parsedData = [];\n      if (fileType === \"pdf\") {\n        const arrayBuffer = await selectedFile.arrayBuffer();\n\n        // First check if it's an Eternal invoice\n        try {\n          // Check for Eternal-specific content in the PDF\n          const pdf = await pdfjsLib.getDocument({\n            data: arrayBuffer\n          }).promise;\n          const firstPage = await pdf.getPage(1);\n          const content = await firstPage.getTextContent();\n          const text = content.items.map(item => item.str).join(\" \");\n\n          // Check for Eternal-specific markers\n          const isEternal = text.includes(\"Eternal Ink\") || text.includes(\"Eternal, LLC\") || text.includes(\"Eternal Ink, LLC\");\n          if (isEternal) {\n            parsedData = await parsePDFEternal(arrayBuffer);\n          } else {\n            // If not Eternal, try World Famous\n            parsedData = await parsePDFWorldFamous(arrayBuffer);\n          }\n        } catch (error) {\n          console.error(\"Error determining PDF type:\", error);\n          throw new Error(\"Could not determine the type of PDF invoice\");\n        }\n      } else if (fileType === \"xlsx\" || fileType === \"xls\") {\n        const data = await selectedFile.arrayBuffer();\n        const workbook = XLSX.read(data);\n        const firstSheet = workbook.Sheets[workbook.SheetNames[0]];\n        const jsonData = XLSX.utils.sheet_to_json(firstSheet, {\n          header: 1\n        });\n        if (jsonData.length < 2) {\n          throw new Error(\"Excel file is empty or improperly formatted\");\n        }\n\n        // Find header row by looking for common column names\n        let headerRowIndex = 0;\n        for (let i = 0; i < jsonData.length; i++) {\n          const row = jsonData[i];\n          if (row.some(cell => cell && typeof cell === \"string\" && (cell.toLowerCase().includes(\"color\") || cell.toLowerCase().includes(\"quantity\") || cell.toLowerCase().includes(\"size\")))) {\n            headerRowIndex = i;\n            break;\n          }\n        }\n        const headers = jsonData[headerRowIndex];\n        const colorIndex = headers.findIndex(h => h && typeof h === \"string\" && h.toLowerCase().includes(\"color\"));\n        const quantityIndex = headers.findIndex(h => h && typeof h === \"string\" && h.toLowerCase().includes(\"quantity\"));\n        const sizeIndex = headers.findIndex(h => h && typeof h === \"string\" && h.toLowerCase().includes(\"size\"));\n        const itemCodeIndex = headers.findIndex(h => h && typeof h === \"string\" && h.toLowerCase().includes(\"item\"));\n        if (colorIndex === -1 || quantityIndex === -1) {\n          throw new Error(\"Excel file must contain at least 'Color' and 'Quantity' columns\");\n        }\n\n        // Process data starting from the row after headers\n        parsedData = jsonData.slice(headerRowIndex + 1).filter(row => row.some(cell => cell !== null && cell !== \"\")).map(row => {\n          const color = String(row[colorIndex] || \"\").trim();\n          const quantity = parseInt(row[quantityIndex]) || 0;\n          const size = sizeIndex !== -1 ? String(row[sizeIndex] || \"\").trim() : \"1oz\";\n          const itemCode = itemCodeIndex !== -1 ? String(row[itemCodeIndex] || \"\").trim() : \"\";\n          if (!color || isNaN(quantity)) {\n            return null;\n          }\n          return {\n            itemCode,\n            color,\n            quantity,\n            size: size || \"1oz\"\n          };\n        }).filter(Boolean);\n      } else {\n        throw new Error(\"Unsupported file type\");\n      }\n      if (parsedData.length === 0) {\n        throw new Error(\"No valid data found in the file\");\n      }\n      setImportData(parsedData);\n      setShowImportPreview(true);\n    } catch (error) {\n      console.error(\"Error processing file:\", error);\n      setError(error.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const confirmImport = () => {\n    if (importData.length === 0) return;\n    const updateStock = stock => {\n      const updated = [...stock];\n      importData.forEach(imp => {\n        const foundIdx = updated.findIndex(s => s.color === imp.color && s.size === imp.size);\n        if (foundIdx >= 0) {\n          updated[foundIdx].quantity += imp.quantity;\n        } else {\n          updated.push(imp);\n        }\n      });\n      return updated;\n    };\n    if (currentBrand === \"World Famous\") {\n      setWorldFamousStock(prev => updateStock(prev));\n    } else {\n      setEternalStock(prev => updateStock(prev));\n    }\n    setImportData([]);\n  };\n\n  // 3. EXPORT (OPTIONAL)\n  const handleExport = () => {\n    // Example: deduct from stock based on importData\n    if (importData.length === 0) {\n      alert(\"No items to export (importData is empty).\");\n      return;\n    }\n    let updated = currentBrand === \"World Famous\" ? [...worldFamousStock] : [...eternalStock];\n    let allGood = true;\n    importData.forEach(expItem => {\n      const idx = updated.findIndex(s => s.color === expItem.color && s.size === expItem.size);\n      if (idx >= 0) {\n        if (updated[idx].quantity >= expItem.quantity) {\n          updated[idx].quantity -= expItem.quantity;\n        } else {\n          allGood = false;\n          alert(`Not enough stock for ${expItem.color} (${expItem.size}). Need ${expItem.quantity}, have ${updated[idx].quantity}`);\n        }\n      } else {\n        allGood = false;\n        alert(`Cannot export unknown item: ${expItem.color} (${expItem.size})`);\n      }\n    });\n    if (allGood) {\n      if (currentBrand === \"World Famous\") {\n        setWorldFamousStock(updated);\n      } else {\n        setEternalStock(updated);\n      }\n      alert(\"Export complete!\");\n      updateHistory(\"Export\", importData);\n    }\n  };\n\n  // 4. STOCK FILTERS\n  const getCurrentStock = () => {\n    const stock = currentBrand === \"World Famous\" ? worldFamousStock : eternalStock;\n    return stock.filter(item => {\n      const colorMatch = item.color.toLowerCase().includes(searchQuery.toLowerCase());\n      const sizeMatch = selectedSize ? item.size === selectedSize : true;\n      const inStockMatch = !showInStockOnly || item.quantity > 0;\n      return colorMatch && sizeMatch && inStockMatch;\n    });\n  };\n  const totalBottles = getCurrentStock().reduce((acc, i) => acc + i.quantity, 0);\n\n  // 5. EDIT MODE\n  const enterEditMode = () => setIsEditMode(true);\n  const finalizeEditing = () => setIsEditMode(false);\n  const handleStockChange = (index, field, value) => {\n    const isWF = currentBrand === \"World Famous\";\n    const stock = isWF ? [...worldFamousStock] : [...eternalStock];\n    stock[index][field] = value;\n    if (isWF) {\n      setWorldFamousStock(stock);\n    } else {\n      setEternalStock(stock);\n    }\n  };\n  const addNewItem = () => {\n    const newItem = {\n      color: \"\",\n      quantity: 0,\n      size: \"\"\n    };\n    if (currentBrand === \"World Famous\") {\n      setWorldFamousStock(prev => [...prev, newItem]);\n    } else {\n      setEternalStock(prev => [...prev, newItem]);\n    }\n    updateHistory(\"Add New Item\", newItem);\n  };\n  const deleteItem = index => {\n    const confirmDelete = window.confirm(\"Delete this item?\");\n    if (!confirmDelete) return;\n    const isWF = currentBrand === \"World Famous\";\n    const stock = isWF ? [...worldFamousStock] : [...eternalStock];\n    const removed = stock[index];\n    stock.splice(index, 1);\n    if (isWF) setWorldFamousStock(stock);else setEternalStock(stock);\n    updateHistory(\"Delete Item\", removed);\n  };\n\n  // 6. RENDER\n  if (currentView === \"History\") {\n    // Show the History table\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"top-bar\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Warehouse Inventory\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCurrentView(\"Stock\"),\n        children: \"Back to Stock\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(HistoryTable, {\n        history: history,\n        onToggleSelect: toggleHistorySelection\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: exportSelectedHistoryToTextFile,\n        children: \"Export Selected History\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Otherwise, show the main Stock view\n  const stockToDisplay = getCurrentStock();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"top-bar\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Warehouse Inventory\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCurrentBrand(\"World Famous\"),\n        children: \"World Famous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCurrentBrand(\"Eternal\"),\n        children: \"Eternal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [isEditMode ? /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: finalizeEditing,\n          children: \"Finish Editing\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: enterEditMode,\n          children: \"Edit Stock\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setCurrentView(\"History\"),\n          children: \"History\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".xlsx,.xls,.pdf\",\n          onChange: handleFileChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleImport,\n          children: \"Preview File\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: confirmImport,\n          children: \"Confirm Import\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleExport,\n          children: \"Confirm Export\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: \"1rem\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: searchQuery,\n          onChange: e => setSearchQuery(e.target.value),\n          placeholder: \"Search color...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedSize,\n          onChange: e => setSelectedSize(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"All Sizes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 403,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"1/2 ounce\",\n            children: \"1/2 ounce\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"1 ounce\",\n            children: \"1 ounce\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 405,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"2 ounce\",\n            children: \"2 ounce\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 406,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"4 ounce\",\n            children: \"4 ounce\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 407,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"1oz\",\n            children: \"1oz\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 408,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"3oz\",\n            children: \"3oz\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 409,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"6oz\",\n            children: \"6oz\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 410,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"12oz\",\n            children: \"12oz\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 411,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          style: {\n            marginLeft: \"1rem\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: showInStockOnly,\n            onChange: e => setShowInStockOnly(e.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 414,\n            columnNumber: 13\n          }, this), \"In Stock Only\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: \"0.5rem\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [\"Total Bottles: \", totalBottles]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        style: {\n          marginTop: \"1rem\"\n        },\n        children: [\"Current Stock (\", currentBrand, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StockTable, {\n        stockItems: stockToDisplay,\n        isEditMode: isEditMode,\n        onChangeItem: handleStockChange,\n        onDeleteItem: deleteItem\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 9\n      }, this), isEditMode && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addNewItem,\n        style: {\n          marginTop: \"1rem\"\n        },\n        children: \"Add New Item\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ImportPreview, {\n        importData: importData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 361,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"uAvFAQmPfJHb/YWyCs7vErrABQU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","XLSX","pdfjsLib","parsePDFEternal","parsePDFWorldFamous","StockTable","ImportPreview","HistoryTable","jsxDEV","_jsxDEV","App","_s","currentBrand","setCurrentBrand","worldFamousStock","setWorldFamousStock","eternalStock","setEternalStock","selectedFile","setSelectedFile","importData","setImportData","history","setHistory","showHistory","setShowHistory","showImportPreview","setShowImportPreview","isLoading","setIsLoading","error","setError","searchQuery","setSearchQuery","selectedSize","setSelectedSize","showInStockOnly","setShowInStockOnly","isEditMode","setIsEditMode","currentView","setCurrentView","updateHistory","actionType","details","prev","date","Date","toLocaleString","brand","selected","toggleHistorySelection","i","map","entry","idx","exportSelectedHistoryToTextFile","filter","h","length","alert","forEach","text","JSON","stringify","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","handleFileChange","event","target","files","handleImport","fileType","name","split","pop","toLowerCase","parsedData","arrayBuffer","pdf","getDocument","data","promise","firstPage","getPage","content","getTextContent","items","item","str","join","isEternal","includes","console","Error","workbook","read","firstSheet","Sheets","SheetNames","jsonData","utils","sheet_to_json","header","headerRowIndex","row","some","cell","headers","colorIndex","findIndex","quantityIndex","sizeIndex","itemCodeIndex","slice","color","String","trim","quantity","parseInt","size","itemCode","isNaN","Boolean","message","confirmImport","updateStock","stock","updated","imp","foundIdx","s","push","handleExport","allGood","expItem","getCurrentStock","colorMatch","sizeMatch","inStockMatch","totalBottles","reduce","acc","enterEditMode","finalizeEditing","handleStockChange","index","field","value","isWF","addNewItem","newItem","deleteItem","confirmDelete","window","confirm","removed","splice","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onToggleSelect","stockToDisplay","accept","onChange","style","marginTop","e","placeholder","marginLeft","checked","stockItems","onChangeItem","onDeleteItem","_c","$RefreshReg$"],"sources":["C:/Users/hongjie/Desktop/Warehouse Test/src/App.js"],"sourcesContent":["// src/App.js\r\nimport React, { useState } from \"react\";\r\nimport * as XLSX from \"xlsx\";\r\nimport pdfjsLib from \"pdfjs-dist\";\r\n\r\nimport { parsePDFEternal, parsePDFWorldFamous } from \"./parsers\";\r\nimport StockTable from \"./components/StockTable\";\r\nimport ImportPreview from \"./components/ImportPreview\";\r\nimport HistoryTable from \"./components/HistoryTable\";\r\n\r\nfunction App() {\r\n  const [currentBrand, setCurrentBrand] = useState(\"World Famous\");\r\n  const [worldFamousStock, setWorldFamousStock] = useState([]);\r\n  const [eternalStock, setEternalStock] = useState([]);\r\n\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n  const [importData, setImportData] = useState([]);\r\n  const [history, setHistory] = useState([]);\r\n  const [showHistory, setShowHistory] = useState(false);\r\n  const [showImportPreview, setShowImportPreview] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // For searching & filtering\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n  const [selectedSize, setSelectedSize] = useState(\"\");\r\n  const [showInStockOnly, setShowInStockOnly] = useState(false);\r\n\r\n  // Edit mode\r\n  const [isEditMode, setIsEditMode] = useState(false);\r\n\r\n  // History\r\n  const [currentView, setCurrentView] = useState(\"Stock\");\r\n\r\n  // 1. HISTORY HELPERS\r\n  const updateHistory = (actionType, details) => {\r\n    setHistory((prev) => [\r\n      ...prev,\r\n      {\r\n        date: new Date().toLocaleString(),\r\n        actionType,\r\n        brand: currentBrand,\r\n        details,\r\n        selected: false\r\n      }\r\n    ]);\r\n  };\r\n\r\n  const toggleHistorySelection = (i) => {\r\n    setHistory((prev) =>\r\n      prev.map((entry, idx) =>\r\n        idx === i ? { ...entry, selected: !entry.selected } : entry\r\n      )\r\n    );\r\n  };\r\n\r\n  const exportSelectedHistoryToTextFile = () => {\r\n    const selected = history.filter((h) => h.selected);\r\n    if (selected.length === 0) {\r\n      alert(\"No history selected.\");\r\n      return;\r\n    }\r\n    selected.forEach((entry) => {\r\n      const text = `${entry.date} - ${entry.actionType}: ${JSON.stringify(\r\n        entry.details\r\n      )}`;\r\n      const blob = new Blob([text], { type: \"text/plain\" });\r\n      const url = URL.createObjectURL(blob);\r\n      const link = document.createElement(\"a\");\r\n      link.href = url;\r\n      link.download = `${entry.actionType}_history.txt`;\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n      URL.revokeObjectURL(url);\r\n    });\r\n  };\r\n\r\n  // 2. FILE IMPORT\r\n  const handleFileChange = (event) => {\r\n    setSelectedFile(event.target.files[0]);\r\n    setImportData([]);\r\n    setShowImportPreview(false);\r\n    setError(null);\r\n  };\r\n\r\n  const handleImport = async () => {\r\n    if (!selectedFile) {\r\n      alert(\"Please select a file first\");\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const fileType = selectedFile.name.split(\".\").pop().toLowerCase();\r\n      let parsedData = [];\r\n\r\n      if (fileType === \"pdf\") {\r\n        const arrayBuffer = await selectedFile.arrayBuffer();\r\n        \r\n        // First check if it's an Eternal invoice\r\n        try {\r\n          // Check for Eternal-specific content in the PDF\r\n          const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;\r\n          const firstPage = await pdf.getPage(1);\r\n          const content = await firstPage.getTextContent();\r\n          const text = content.items.map((item) => item.str).join(\" \");\r\n          \r\n          // Check for Eternal-specific markers\r\n          const isEternal = text.includes(\"Eternal Ink\") || \r\n                          text.includes(\"Eternal, LLC\") || \r\n                          text.includes(\"Eternal Ink, LLC\");\r\n          \r\n          if (isEternal) {\r\n            parsedData = await parsePDFEternal(arrayBuffer);\r\n          } else {\r\n            // If not Eternal, try World Famous\r\n            parsedData = await parsePDFWorldFamous(arrayBuffer);\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error determining PDF type:\", error);\r\n          throw new Error(\"Could not determine the type of PDF invoice\");\r\n        }\r\n      } else if (fileType === \"xlsx\" || fileType === \"xls\") {\r\n        const data = await selectedFile.arrayBuffer();\r\n        const workbook = XLSX.read(data);\r\n        const firstSheet = workbook.Sheets[workbook.SheetNames[0]];\r\n        const jsonData = XLSX.utils.sheet_to_json(firstSheet, { header: 1 });\r\n\r\n        if (jsonData.length < 2) {\r\n          throw new Error(\"Excel file is empty or improperly formatted\");\r\n        }\r\n\r\n        // Find header row by looking for common column names\r\n        let headerRowIndex = 0;\r\n        for (let i = 0; i < jsonData.length; i++) {\r\n          const row = jsonData[i];\r\n          if (\r\n            row.some(\r\n              (cell) =>\r\n                cell &&\r\n                typeof cell === \"string\" &&\r\n                (cell.toLowerCase().includes(\"color\") ||\r\n                  cell.toLowerCase().includes(\"quantity\") ||\r\n                  cell.toLowerCase().includes(\"size\"))\r\n            )\r\n          ) {\r\n            headerRowIndex = i;\r\n            break;\r\n          }\r\n        }\r\n\r\n        const headers = jsonData[headerRowIndex];\r\n        const colorIndex = headers.findIndex(\r\n          (h) => h && typeof h === \"string\" && h.toLowerCase().includes(\"color\")\r\n        );\r\n        const quantityIndex = headers.findIndex(\r\n          (h) => h && typeof h === \"string\" && h.toLowerCase().includes(\"quantity\")\r\n        );\r\n        const sizeIndex = headers.findIndex(\r\n          (h) => h && typeof h === \"string\" && h.toLowerCase().includes(\"size\")\r\n        );\r\n        const itemCodeIndex = headers.findIndex(\r\n          (h) => h && typeof h === \"string\" && h.toLowerCase().includes(\"item\")\r\n        );\r\n\r\n        if (colorIndex === -1 || quantityIndex === -1) {\r\n          throw new Error(\r\n            \"Excel file must contain at least 'Color' and 'Quantity' columns\"\r\n          );\r\n        }\r\n\r\n        // Process data starting from the row after headers\r\n        parsedData = jsonData\r\n          .slice(headerRowIndex + 1)\r\n          .filter((row) => row.some((cell) => cell !== null && cell !== \"\"))\r\n          .map((row) => {\r\n            const color = String(row[colorIndex] || \"\").trim();\r\n            const quantity = parseInt(row[quantityIndex]) || 0;\r\n            const size = sizeIndex !== -1 ? String(row[sizeIndex] || \"\").trim() : \"1oz\";\r\n            const itemCode =\r\n              itemCodeIndex !== -1 ? String(row[itemCodeIndex] || \"\").trim() : \"\";\r\n\r\n            if (!color || isNaN(quantity)) {\r\n              return null;\r\n            }\r\n\r\n            return {\r\n              itemCode,\r\n              color,\r\n              quantity,\r\n              size: size || \"1oz\",\r\n            };\r\n          })\r\n          .filter(Boolean);\r\n      } else {\r\n        throw new Error(\"Unsupported file type\");\r\n      }\r\n\r\n      if (parsedData.length === 0) {\r\n        throw new Error(\"No valid data found in the file\");\r\n      }\r\n\r\n      setImportData(parsedData);\r\n      setShowImportPreview(true);\r\n    } catch (error) {\r\n      console.error(\"Error processing file:\", error);\r\n      setError(error.message);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const confirmImport = () => {\r\n    if (importData.length === 0) return;\r\n\r\n    const updateStock = (stock) => {\r\n      const updated = [...stock];\r\n      importData.forEach((imp) => {\r\n        const foundIdx = updated.findIndex(\r\n          (s) => s.color === imp.color && s.size === imp.size\r\n        );\r\n        if (foundIdx >= 0) {\r\n          updated[foundIdx].quantity += imp.quantity;\r\n        } else {\r\n          updated.push(imp);\r\n        }\r\n      });\r\n      return updated;\r\n    };\r\n\r\n    if (currentBrand === \"World Famous\") {\r\n      setWorldFamousStock((prev) => updateStock(prev));\r\n    } else {\r\n      setEternalStock((prev) => updateStock(prev));\r\n    }\r\n    setImportData([]);\r\n  };\r\n\r\n  // 3. EXPORT (OPTIONAL)\r\n  const handleExport = () => {\r\n    // Example: deduct from stock based on importData\r\n    if (importData.length === 0) {\r\n      alert(\"No items to export (importData is empty).\");\r\n      return;\r\n    }\r\n    let updated =\r\n      currentBrand === \"World Famous\"\r\n        ? [...worldFamousStock]\r\n        : [...eternalStock];\r\n    let allGood = true;\r\n\r\n    importData.forEach((expItem) => {\r\n      const idx = updated.findIndex(\r\n        (s) => s.color === expItem.color && s.size === expItem.size\r\n      );\r\n      if (idx >= 0) {\r\n        if (updated[idx].quantity >= expItem.quantity) {\r\n          updated[idx].quantity -= expItem.quantity;\r\n        } else {\r\n          allGood = false;\r\n          alert(\r\n            `Not enough stock for ${expItem.color} (${expItem.size}). Need ${\r\n              expItem.quantity\r\n            }, have ${updated[idx].quantity}`\r\n          );\r\n        }\r\n      } else {\r\n        allGood = false;\r\n        alert(`Cannot export unknown item: ${expItem.color} (${expItem.size})`);\r\n      }\r\n    });\r\n\r\n    if (allGood) {\r\n      if (currentBrand === \"World Famous\") {\r\n        setWorldFamousStock(updated);\r\n      } else {\r\n        setEternalStock(updated);\r\n      }\r\n      alert(\"Export complete!\");\r\n      updateHistory(\"Export\", importData);\r\n    }\r\n  };\r\n\r\n  // 4. STOCK FILTERS\r\n  const getCurrentStock = () => {\r\n    const stock =\r\n      currentBrand === \"World Famous\" ? worldFamousStock : eternalStock;\r\n    return stock.filter((item) => {\r\n      const colorMatch = item.color\r\n        .toLowerCase()\r\n        .includes(searchQuery.toLowerCase());\r\n      const sizeMatch = selectedSize ? item.size === selectedSize : true;\r\n      const inStockMatch = !showInStockOnly || item.quantity > 0;\r\n      return colorMatch && sizeMatch && inStockMatch;\r\n    });\r\n  };\r\n\r\n  const totalBottles = getCurrentStock().reduce((acc, i) => acc + i.quantity, 0);\r\n\r\n  // 5. EDIT MODE\r\n  const enterEditMode = () => setIsEditMode(true);\r\n  const finalizeEditing = () => setIsEditMode(false);\r\n\r\n  const handleStockChange = (index, field, value) => {\r\n    const isWF = currentBrand === \"World Famous\";\r\n    const stock = isWF ? [...worldFamousStock] : [...eternalStock];\r\n    stock[index][field] = value;\r\n    if (isWF) {\r\n      setWorldFamousStock(stock);\r\n    } else {\r\n      setEternalStock(stock);\r\n    }\r\n  };\r\n\r\n  const addNewItem = () => {\r\n    const newItem = { color: \"\", quantity: 0, size: \"\" };\r\n    if (currentBrand === \"World Famous\") {\r\n      setWorldFamousStock((prev) => [...prev, newItem]);\r\n    } else {\r\n      setEternalStock((prev) => [...prev, newItem]);\r\n    }\r\n    updateHistory(\"Add New Item\", newItem);\r\n  };\r\n\r\n  const deleteItem = (index) => {\r\n    const confirmDelete = window.confirm(\"Delete this item?\");\r\n    if (!confirmDelete) return;\r\n    const isWF = currentBrand === \"World Famous\";\r\n    const stock = isWF ? [...worldFamousStock] : [...eternalStock];\r\n    const removed = stock[index];\r\n    stock.splice(index, 1);\r\n    if (isWF) setWorldFamousStock(stock);\r\n    else setEternalStock(stock);\r\n    updateHistory(\"Delete Item\", removed);\r\n  };\r\n\r\n  // 6. RENDER\r\n  if (currentView === \"History\") {\r\n    // Show the History table\r\n    return (\r\n      <div>\r\n        <div className=\"top-bar\">\r\n          <h1>Warehouse Inventory</h1>\r\n        </div>\r\n        <button onClick={() => setCurrentView(\"Stock\")}>Back to Stock</button>\r\n        <HistoryTable history={history} onToggleSelect={toggleHistorySelection} />\r\n        <button onClick={exportSelectedHistoryToTextFile}>\r\n          Export Selected History\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Otherwise, show the main Stock view\r\n  const stockToDisplay = getCurrentStock();\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"top-bar\">\r\n        <h1>Warehouse Inventory</h1>\r\n      </div>\r\n\r\n      {/* Sidebar (simple version) */}\r\n      <div className=\"sidebar\">\r\n        <button onClick={() => setCurrentBrand(\"World Famous\")}>\r\n          World Famous\r\n        </button>\r\n        <button onClick={() => setCurrentBrand(\"Eternal\")}>Eternal</button>\r\n      </div>\r\n\r\n      {/* Main content */}\r\n      <div className=\"main-content\">\r\n        {/* Action Buttons */}\r\n        <div>\r\n          {isEditMode ? (\r\n            <button onClick={finalizeEditing}>Finish Editing</button>\r\n          ) : (\r\n            <button onClick={enterEditMode}>Edit Stock</button>\r\n          )}\r\n          <button onClick={() => setCurrentView(\"History\")}>History</button>\r\n\r\n          <input type=\"file\" accept=\".xlsx,.xls,.pdf\" onChange={handleFileChange} />\r\n          <button onClick={handleImport}>Preview File</button>\r\n          <button onClick={confirmImport}>Confirm Import</button>\r\n          <button onClick={handleExport}>Confirm Export</button>\r\n        </div>\r\n\r\n        {/* Filters */}\r\n        <div style={{ marginTop: \"1rem\" }}>\r\n          <input\r\n            type=\"text\"\r\n            value={searchQuery}\r\n            onChange={(e) => setSearchQuery(e.target.value)}\r\n            placeholder=\"Search color...\"\r\n          />\r\n          <select\r\n            value={selectedSize}\r\n            onChange={(e) => setSelectedSize(e.target.value)}\r\n          >\r\n            <option value=\"\">All Sizes</option>\r\n            <option value=\"1/2 ounce\">1/2 ounce</option>\r\n            <option value=\"1 ounce\">1 ounce</option>\r\n            <option value=\"2 ounce\">2 ounce</option>\r\n            <option value=\"4 ounce\">4 ounce</option>\r\n            <option value=\"1oz\">1oz</option>\r\n            <option value=\"3oz\">3oz</option>\r\n            <option value=\"6oz\">6oz</option>\r\n            <option value=\"12oz\">12oz</option>\r\n          </select>\r\n          <label style={{ marginLeft: \"1rem\" }}>\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={showInStockOnly}\r\n              onChange={(e) => setShowInStockOnly(e.target.checked)}\r\n            />\r\n            In Stock Only\r\n          </label>\r\n          <div style={{ marginTop: \"0.5rem\" }}>\r\n            <strong>Total Bottles: {totalBottles}</strong>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Stock Table */}\r\n        <h3 style={{ marginTop: \"1rem\" }}>\r\n          Current Stock ({currentBrand})\r\n        </h3>\r\n        <StockTable\r\n          stockItems={stockToDisplay}\r\n          isEditMode={isEditMode}\r\n          onChangeItem={handleStockChange}\r\n          onDeleteItem={deleteItem}\r\n        />\r\n        {isEditMode && (\r\n          <button onClick={addNewItem} style={{ marginTop: \"1rem\" }}>\r\n            Add New Item\r\n          </button>\r\n        )}\r\n\r\n        {/* Import Preview */}\r\n        <ImportPreview importData={importData} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}